<module>
<baseinfo>
name=生成手机静态
team=NetLife
time=2017-04-08
email=40150501@qq.com
url=
hash=c2e2b9756dab37ed2c0d421a9ca7b69e
indexname=
indexurl=
ismember=0
autosetup=1
autodel=1
lang=utf-8
moduletype=soft
</baseinfo>
<systemfile>
<menustring>

</menustring>
<readme>
PHAgc3R5bGU9J2xpbmUtaGVpZ2h0OjE1MCUnPuazqOaEj+ebruW9leWPr+WGmTwvcD4=
</readme>
<setupsql40>
SU5TRVJUIElOVE8gYCNAX19zeXNjb25maWdgIChgYWlkYCwgYHZhcm5hbWVgLCBgaW5mb2AsIGBncm91cGlkYCwgYHR5cGVgLCBgdmFsdWVgKSBWQUxVRVMgKDAsICdjZmdfd2FwdXJsJywgJ+aJi+acuue9keWdgCcsIDEsICdzdHJpbmcnLCAnaHR0cDovL20uKioqLmNvbScpLCgwLCAnY2ZnX3dhcGh0bWwnLCAn5omL5py65qih5p2/JywgMSwgJ3N0cmluZycsICd3YXAnKSwoMCwgJ2NmZ193YXBwYXRoJywgJ3dhcOeUn+aIkOebruW9lScsIDEsICdzdHJpbmcnLCAnd2FwJyk7
</setupsql40>
<delsql>
REVMRVRFIEZST00gYCNAX19zeXNjb25maWdgIHdoZXJlIHZhcm5hbWUgPSdjZmdfd2FwdXJsJzsNCkRFTEVURSBGUk9NIGAjQF9fc3lzY29uZmlnYCB3aGVyZSB2YXJuYW1lID0nY2ZnX3dhcGh0bWwnOw0KREVMRVRFIEZST00gYCNAX19zeXNjb25maWdgIHdoZXJlIHZhcm5hbWUgPSdjZmdfd2FwcGF0aCc7
</delsql>
<setup>

</setup>
<uninstall>

</uninstall>
<oldfilelist>
../include/arc.wap_index.php
../include/arc.archives.class_wap.php
../include/typelink.class.php
../include/arc.listview.class_wap.php
../include/helpers/channelunit.helper.php
makehtml_all_wap.php
makehtml_archives_wap.php
makehtml_homepage_wap.php
makehtml_archives_action_wap.php
makehtml_list_wap.php
makehtml_list_action_wap.php
templets/makehtml_list_wap.htm
templets/makehtml_homepage_wap.htm
templets/makehtml_archives_wap.htm
templets/makehtml_all_wap.htm
inc/inc_menu.php
</oldfilelist>
</systemfile>

<modulefiles>
<file type='file' name='../include/arc.wap_index.php'>
PD9waHAgICBpZighZGVmaW5lZCgnREVERUlOQycpKSBleGl0KCJSZXF1ZXN0IEVycm9yISIpOw0NCi8qKg0NCiAqIOWNleihqOaooeWei+inhuWbvuexuw0NCiAqDQ0KICogQHZlcnNpb24gICAgICAgICRJZDogYXJjLnNncGFnZS5jbGFzcy5waHAgMSAxNTo0OCAyMDEw5bm0N+aciDfml6VaIHRpYW55YSAkDQ0KICogQHBhY2thZ2UgICAgICAgIERlZGVDTVMuTGlicmFyaWVzDQ0KICogQGNvcHlyaWdodCAgICAgIENvcHlyaWdodCAoYykgMjAwNyAtIDIwMTAsIERlc0RldiwgSW5jLg0NCiAqIEBsaWNlbnNlICAgICAgICBodHRwOi8vaGVscC5kZWRlY21zLmNvbS91c2Vyc2d1aWRlL2xpY2Vuc2UuaHRtbA0NCiAqIEBsaW5rICAgICAgICAgICBodHRwOi8vd3d3LmRlZGVjbXMuY29tDQ0KICovDQ0KZGVmaW5lKCdERURFTU9CJywgJ1knKTsNDQpkZWZpbmUoJ2NmZ19tdWx0aV9zaXRlJywnTicpOw0NCnJlcXVpcmVfb25jZShERURFSU5DLiIvYXJjLnBhcnR2aWV3LmNsYXNzLnBocCIpOw0NCg0NCi8qKg0NCiAqIOWNleihqOaooeWei+WIl+ihqOinhuWbvuexuw0NCiAqDQ0KICogQHBhY2thZ2UgICAgICAgICAgU2dMaXN0Vmlldw0NCiAqIEBzdWJwYWNrYWdlICAgICAgIERlZGVDTVMuTGlicmFyaWVzDQ0KICogQGxpbmsgICAgICAgICAgICAgaHR0cDovL3d3dy5kZWRlY21zLmNvbQ0NCiAqLw0NCmNsYXNzIHNncGFnZQ0NCnsNDQogICAgdmFyICRkc3FsOw0NCiAgICB2YXIgJGR0cDsNDQogICAgdmFyICRUeXBlSUQ7DQ0KICAgIHZhciAkRmllbGRzOw0NCiAgICB2YXIgJFR5cGVMaW5rOw0NCiAgICB2YXIgJHBhcnRWaWV3Ow0NCg0NCiAgICAvKioNDQogICAgICogIHBocDXmnoTpgKDlh73mlbANDQogICAgICoNDQogICAgICogQGFjY2VzcyAgICBwdWJsaWMNDQogICAgICogQHBhcmFtICAgICBpbnQgICRhaWQgIOWGheWuuUlEDQ0KICAgICAqIEByZXR1cm4gICAgc3RyaW5nDQ0KICAgICAqLw0NCiAgICBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkYWlkKQ0NCiAgICB7DQ0KICAgICAgICBnbG9iYWwgJGNmZ19iYXNlZGlyLCRjZmdfdGVtcGxldHNfZGlyLCRjZmdfZGZfc3R5bGUsJGVudnM7DQ0KDQ0KICAgICAgICAkdGhpcy0+ZHNxbCA9ICRHTE9CQUxTWydkc3FsJ107DQ0KICAgICAgICAkdGhpcy0+ZHRwID0gbmV3IERlZGVUYWdQYXJzZSgpOw0NCiAgICAgICAgJHRoaXMtPmR0cC0+cmVmT2JqID0gJHRoaXM7DQ0KICAgICAgICAkdGhpcy0+ZHRwLT5TZXROYW1lU3BhY2UoImRlZGUiLCJ7IiwifSIpOw0NCiAgICAgICAgJHRwbGZpbGUgPSAkY2ZnX2Jhc2VkaXIuJGNmZ190ZW1wbGV0c19kaXIuJy8nLiRjZmdfZGZfc3R5bGUuJy9pbmRleF9tLmh0bSc7DQ0KICAgICAgICAkdHBsZmlsZT1zdHJfcmVwbGFjZSgkY2ZnX2RmX3N0eWxlLCAkR0xPQkFMU1snY2ZnX3dhcGh0bWwnXSwgJHRwbGZpbGUpOw0NCiAgICAgICAgJHRoaXMtPmR0cC0+TG9hZFRlbXBsYXRlKCR0cGxmaWxlKTsNDQogICAgICAgICR0aGlzLT5QYXJzZVRlbXBsZXQoKTsNDQogICAgfQ0NCg0NCiAgICAvL3BocDTmnoTpgKDlh73mlbANDQogICAgZnVuY3Rpb24gc2dwYWdlKCRhaWQpDQ0KICAgIHsNDQogICAgICAgICR0aGlzLT5fX2NvbnN0cnVjdCgkYWlkKTsNDQogICAgfQ0NCg0NCiAgICAvKioNDQogICAgICogIOaYvuekuuWGheWuuQ0NCiAgICAgKg0NCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYw0NCiAgICAgKiBAcmV0dXJuICAgIHZvaWQNDQogICAgICovDQ0KICAgIGZ1bmN0aW9uIERpc3BsYXkoKQ0NCiAgICB7DQ0KICAgICAgICAkdGhpcy0+ZHRwLT5EaXNwbGF5KCk7DQ0KICAgIH0NDQoNDQogICAgLyoqDQ0KICAgICAqICDojrflj5blhoXlrrkNDQogICAgICoNDQogICAgICogQGFjY2VzcyAgICBwdWJsaWMNDQogICAgICogQHJldHVybiAgICB2b2lkDQ0KICAgICAqLw0NCiAgICBmdW5jdGlvbiBHZXRSZXN1bHQoKQ0NCiAgICB7DQ0KICAgICAgICByZXR1cm4gJHRoaXMtPmR0cC0+R2V0UmVzdWx0KCk7DQ0KICAgIH0NDQoNDQogICAgLyoqDQ0KICAgICAqICDkv53lrZjnu5PmnpzkuLrmlofku7YNDQogICAgICoNDQogICAgICogQGFjY2VzcyAgICBwdWJsaWMNDQogICAgICogQHJldHVybiAgICB2b2lkDQ0KICAgICAqLw0NCiAgICBmdW5jdGlvbiBTYXZlVG9IdG1sKCkNDQogICAgew0NCiAgICAgICAgJGZpbGVuYW1lID0gInskR0xPQkFMU1snY2ZnX2Jhc2VkaXInXX0veyRHTE9CQUxTWydjZmdfd2FwcGF0aCddfS9pbmRleC5odG1sIjsNDQogICAgICAgICRmaWxlbmFtZSA9IHByZWdfcmVwbGFjZSgiL1wvezEsfS8iLCAnLycsICRmaWxlbmFtZSk7DQ0KICAgICAgICAkdGhpcy0+ZHRwLT5TYXZlVG8oJGZpbGVuYW1lKTsNDQogICAgfQ0NCg0NCiAgICAvKioNDQogICAgICogIOino+aekOaooeadv+mHjOeahOagh+etvg0NCiAgICAgKg0NCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYw0NCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZw0NCiAgICAgKi8NDQogICAgZnVuY3Rpb24gUGFyc2VUZW1wbGV0KCkNDQogICAgew0NCiAgICAgICAgJEdMT0JBTFNbJ2VudnMnXVsnbGlrZWlkJ10gPSAkdGhpcy0+RmllbGRzWydsaWtlaWQnXTsNDQogICAgICAgIE1ha2VPbmVUYWcoJHRoaXMtPmR0cCwkdGhpcyk7DQ0KICAgIH0NDQoNDQogICAgLy/lhbPpl63miYDljaDnlKjnmoTotYTmupANDQogICAgZnVuY3Rpb24gQ2xvc2UoKQ0NCiAgICB7DQ0KICAgIH0NDQp9Ly9FbmQgQ2xhc3M=
</file>
<file type='file' name='../include/arc.archives.class_wap.php'>
PD9waHAKCmlmKCFkZWZpbmVkKCdERURFSU5DJykpIGV4aXQoIlJlcXVlc3QgRXJyb3IhIik7CgoKLyoqCgoKICog5paH5qGj57G7CgoKICoKCgogKiBAdmVyc2lvbiAgICAgICAgJElkOiBhcmMuYXJjaGl2ZXMuY2xhc3MucGhwIDQgMTU6MTMgMjAxMOW5tDfmnIg35pelWiB0aWFueWEgJAoKCiAqIEBwYWNrYWdlICAgICAgICBEZWRlQ01TLkxpYnJhcmllcwoKCiAqIEBjb3B5cmlnaHQgICAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDEwLCBEZXNEZXYsIEluYy4KCgogKiBAbGljZW5zZSAgICAgICAgaHR0cDovL2hlbHAuZGVkZWNtcy5jb20vdXNlcnNndWlkZS9saWNlbnNlLmh0bWwKCgogKiBAbGluayAgICAgICAgICAgaHR0cDovL3d3dy5kZWRlY21zLmNvbQoKCiAqLwoKCmRlZmluZSgnREVERU1PQicsICdZJyk7CnJlcXVpcmVfb25jZShERURFSU5DLiIvdHlwZWxpbmsuY2xhc3MucGhwIik7CnJlcXVpcmVfb25jZShERURFSU5DLiIvY2hhbm5lbHVuaXQuY2xhc3MucGhwIik7CnJlcXVpcmVfb25jZShERURFSU5DLiIvZG93bm1peC5pbmMucGhwIik7CnJlcXVpcmVfb25jZShERURFSU5DLicvZnRwLmNsYXNzLnBocCcpOwoKQHNldF90aW1lX2xpbWl0KDApOwoKCi8qKgoKCiAqIOS4u+aWh+aho+exuyhBcmNoaXZlc+exuykKCgogKgoKCiAqIEBwYWNrYWdlICAgICAgICAgIFR5cGVMaW5rCgoKICogQHN1YnBhY2thZ2UgICAgICAgRGVkZUNNUy5MaWJyYXJpZXMKCgogKiBAbGluayAgICAgICAgICAgICBodHRwOi8vd3d3LmRlZGVjbXMuY29tCgoKICovCgoKY2xhc3MgQXJjaGl2ZXMKCgp7CgoKICAgIHZhciAkVHlwZUxpbms7CgoKICAgIHZhciAkQ2hhbm5lbFVuaXQ7CgoKICAgIHZhciAkZHNxbDsKCgogICAgdmFyICRGaWVsZHM7CgoKICAgIHZhciAkZHRwOwoKCiAgICB2YXIgJEFyY0lEOwoKCiAgICB2YXIgJFNwbGl0UGFnZUZpZWxkOwoKCiAgICB2YXIgJFNwbGl0RmllbGRzOwoKCiAgICB2YXIgJE5vd1BhZ2U7CgoKICAgIHZhciAkVG90YWxQYWdlOwoKCiAgICB2YXIgJE5hbWVGaXJzdDsKCgogICAgdmFyICRTaG9ydE5hbWU7CgoKICAgIHZhciAkRml4ZWRWYWx1ZXM7CgoKICAgIHZhciAkVGVtcFNvdXJjZTsKCgogICAgdmFyICRJc0Vycm9yOwoKCiAgICB2YXIgJFNwbGl0VGl0bGVzOwoKCiAgICB2YXIgJFByZU5leHQ7CgoKICAgIHZhciAkYWRkVGFibGVSb3c7CgoKICAgIHZhciAkZnRwOwoKCiAgICB2YXIgJHJlbW90ZURpcjsKCgoKCgogICAgLyoqCgoKICAgICAqICBwaHA15p6E6YCg5Ye95pWwCgoKICAgICAqCgoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCgoKICAgICAqIEBwYXJhbSAgICAgaW50ICAkYWlkICDmlofmoaNJRAoKCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwoKCiAgICAgKi8KCgogICAgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGFpZCkKCgogICAgewoKCiAgICAgICAgZ2xvYmFsICRkc3FsLCRmdHA7CgoKICAgICAgICAkdGhpcy0+SXNFcnJvciA9IEZBTFNFOwoKCiAgICAgICAgJHRoaXMtPkFyY0lEID0gJGFpZDsKCgogICAgICAgICR0aGlzLT5QcmVOZXh0ID0gYXJyYXkoKTsKCgoKCgogICAgICAgICR0aGlzLT5kc3FsID0gJGRzcWw7CgoKICAgICAgICAkcXVlcnkgPSAiU0VMRUNUIGNoYW5uZWwsdHlwZWlkIEZST00gYCNAX19hcmN0aW55YCBXSEVSRSBpZD0nJGFpZCcgIjsKCgogICAgICAgICRhcnIgPSAkdGhpcy0+ZHNxbC0+R2V0T25lKCRxdWVyeSk7CgoKICAgICAgICBpZighaXNfYXJyYXkoJGFycikpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJHRoaXMtPklzRXJyb3IgPSBUUlVFOwoKCiAgICAgICAgfQoKCiAgICAgICAgZWxzZQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCRhcnJbJ2NoYW5uZWwnXT09MCkgJGFyclsnY2hhbm5lbCddPTE7CgoKICAgICAgICAgICAgJHRoaXMtPkNoYW5uZWxVbml0ID0gbmV3IENoYW5uZWxVbml0KCRhcnJbJ2NoYW5uZWwnXSwgJGFpZCk7CgoKICAgICAgICAgICAgJHRoaXMtPlR5cGVMaW5rID0gbmV3IFR5cGVMaW5rKCRhcnJbJ3R5cGVpZCddKTsKCgogICAgICAgICAgICBpZigkdGhpcy0+Q2hhbm5lbFVuaXQtPkNoYW5uZWxJbmZvc1snaXNzeXN0ZW0nXSE9LTEpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAvLyDlpoLmnpzlvZPliY3mlofmoaPkuI3mmK/ns7vnu5/mqKHlnoss5Li65Y2V6KGo5qih5Z6LCgoKICAgICAgICAgICAgICAgICRxdWVyeSA9ICJTRUxFQ1QgYXJjLiosdHAucmVpZCx0cC50eXBlZGlyLGNoLmFkZHRhYmxlCgoKICAgICAgICAgICAgICAgIEZST00gYCNAX19hcmNoaXZlc2AgYXJjCgoKICAgICAgICAgICAgICAgICAgICAgICAgIExFRlQgSk9JTiAjQF9fYXJjdHlwZSB0cCBvbiB0cC5pZD1hcmMudHlwZWlkCgoKICAgICAgICAgICAgICAgICAgICAgICAgICBMRUZUIEpPSU4gI0BfX2NoYW5uZWx0eXBlIGFzIGNoIG9uIGFyYy5jaGFubmVsID0gY2guaWQKCgogICAgICAgICAgICAgICAgICAgICAgICAgIFdIRVJFIGFyYy5pZD0nJGFpZCcgIjsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkcyA9ICR0aGlzLT5kc3FsLT5HZXRPbmUoJHF1ZXJ5KTsKCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndGl0bGUnXSA9ICcnOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydtb25leSddID0gJHRoaXMtPkZpZWxkc1snYXJjcmFuayddID0gMDsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snc2VuZGRhdGUnXSA9ICR0aGlzLT5GaWVsZHNbJ3B1YmRhdGUnXSA9ICR0aGlzLT5GaWVsZHNbJ21pZCddID0gJHRoaXMtPkZpZWxkc1snYWRtaW5pZCddID0gMDsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snaXNtYWtlJ10gPSAxOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydmaWxlbmFtZSddID0gJyc7CgoKICAgICAgICAgICAgfQoKCgoKCiAgICAgICAgICAgIGlmKCR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWydjb3JhbmsnXSA+IDAgJiYgJHRoaXMtPkZpZWxkc1snYXJjcmFuayddPT0wKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snYXJjcmFuayddID0gJHRoaXMtPlR5cGVMaW5rLT5UeXBlSW5mb3NbJ2NvcmFuayddOwoKCiAgICAgICAgICAgIH0KCgoKCgogICAgICAgICAgICAkdGhpcy0+RmllbGRzWyd0YWdzJ10gPSBHZXRUYWdzKCRhaWQpOwoKCiAgICAgICAgICAgICR0aGlzLT5kdHAgPSBuZXcgRGVkZVRhZ1BhcnNlKCk7CgoKICAgICAgICAgICAgJHRoaXMtPmR0cC0+U2V0UmVmT2JqKCR0aGlzKTsKCgogICAgICAgICAgICAkdGhpcy0+U3BsaXRQYWdlRmllbGQgPSAkdGhpcy0+Q2hhbm5lbFVuaXQtPlNwbGl0UGFnZUZpZWxkOwoKCiAgICAgICAgICAgICR0aGlzLT5TcGxpdEZpZWxkcyA9ICcnOwoKCiAgICAgICAgICAgICR0aGlzLT5Ub3RhbFBhZ2UgPSAxOwoKCiAgICAgICAgICAgICR0aGlzLT5OYW1lRmlyc3QgPSAnJzsKCgogICAgICAgICAgICAkdGhpcy0+U2hvcnROYW1lID0gJ2h0bWwnOwoKCiAgICAgICAgICAgICR0aGlzLT5GaXhlZFZhbHVlcyA9ICcnOwoKCiAgICAgICAgICAgICR0aGlzLT5UZW1wU291cmNlID0gJyc7CgoKICAgICAgICAgICAgJHRoaXMtPmZ0cCA9ICYkZnRwOwoKCiAgICAgICAgICAgICR0aGlzLT5yZW1vdGVEaXIgPSAnJzsKCgogICAgICAgICAgICBpZihlbXB0eSgkR0xPQkFMU1sncGFnZW5vJ10pKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHRoaXMtPk5vd1BhZ2UgPSAxOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAkdGhpcy0+Tm93UGFnZSA9ICRHTE9CQUxTWydwYWdlbm8nXTsKCgogICAgICAgICAgICB9CgoKCgoKICAgICAgICAgICAgLy/nibnmrornmoTlrZfmrrXmlbDmja7lpITnkIYKCgogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydhaWQnXSA9ICRhaWQ7CgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snaWQnXSA9ICRhaWQ7CgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sncG9zaXRpb24nXSA9ICR0aGlzLT5UeXBlTGluay0+R2V0UG9zaXRpb25MaW5rKFRSVUUpOwoKCiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3Bvc2l0aW9uJ10gPSBzdHJfcmVwbGFjZSgkR0xPQkFMU1snY2ZnX2Jhc2Vob3N0J10sJEdMT0JBTFNbJ2NmZ193YXB1cmwnXSwkdGhpcy0+RmllbGRzWydwb3NpdGlvbiddKTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAkdGhpcy0+RmllbGRzWyd0eXBlaWQnXSA9ICRhcnJbJ3R5cGVpZCddOwoKCgoKCiAgICAgICAgICAgIC8v6K6+572u5LiA5Lqb5YWo5bGA5Y+C5pWw55qE5YC8CgoKICAgICAgICAgICAgZm9yZWFjaCgkR0xPQkFMU1snUHViRmllbGRzJ10gYXMgJGs9PiR2KQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1ska10gPSAkdjsKCgogICAgICAgICAgICB9CgoKCgoKICAgICAgICAgICAgLy/kuLrkuoblh4/lsJHph43lpI3mn6Xor6LvvIzov5nph4znm7TmjqXmiorpmYTliqDooajmn6Xor6LorrDlvZXmlL7lnKggJHRoaXMtPmFkZFRhYmxlUm93IOS4re+8jOWcqCBQYXJBZGRUYWJsZSgpIOS4jeWGjeafpeivogoKCiAgICAgICAgICAgIGlmKCR0aGlzLT5DaGFubmVsVW5pdC0+Q2hhbm5lbEluZm9zWydhZGR0YWJsZSddIT0nJykKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICRxdWVyeSA9ICJTRUxFQ1QgKiBGUk9NIGB7JHRoaXMtPkNoYW5uZWxVbml0LT5DaGFubmVsSW5mb3NbJ2FkZHRhYmxlJ119YCBXSEVSRSBgYWlkYCA9ICckYWlkJyI7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5hZGRUYWJsZVJvdyA9ICR0aGlzLT5kc3FsLT5HZXRPbmUoJHF1ZXJ5KTsKCgogICAgICAgICAgICB9CgoKCgoKICAgICAgICAgICAgLy9pc3N5c3RlbT09LTEg6KGo56S65Y2V6KGo5qih5Z6L77yM5Y2V6KGo5qih5Z6L5LiN5pSv5oyBcmVkaXJlY3R1cmzov5nnsbvlj4LmlbDvvIzlm6DmraTpmZDlrprlhoXlrrnmma7pgJrmqKHlnovmiY3ov5vooYzkuIvpnaLmn6Xor6IKCgogICAgICAgICAgICBpZigkdGhpcy0+Q2hhbm5lbFVuaXQtPkNoYW5uZWxJbmZvc1snYWRkdGFibGUnXSE9JycgJiYgJHRoaXMtPkNoYW5uZWxVbml0LT5DaGFubmVsSW5mb3NbJ2lzc3lzdGVtJ10hPS0xKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgaWYoaXNfYXJyYXkoJHRoaXMtPmFkZFRhYmxlUm93KSkKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sncmVkaXJlY3R1cmwnXSA9ICR0aGlzLT5hZGRUYWJsZVJvd1sncmVkaXJlY3R1cmwnXTsKCgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3RlbXBsZXQnXSA9ICR0aGlzLT5hZGRUYWJsZVJvd1sndGVtcGxldCddOwoKCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndXNlcmlwJ10gPSAkdGhpcy0+YWRkVGFibGVSb3dbJ3VzZXJpcCddOwoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3RlbXBsZXQnXSA9IChlbXB0eSgkdGhpcy0+RmllbGRzWyd0ZW1wbGV0J10pID8gJycgOiB0cmltKCR0aGlzLT5GaWVsZHNbJ3RlbXBsZXQnXSkpOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydyZWRpcmVjdHVybCddID0gKGVtcHR5KCR0aGlzLT5GaWVsZHNbJ3JlZGlyZWN0dXJsJ10pID8gJycgOiB0cmltKCR0aGlzLT5GaWVsZHNbJ3JlZGlyZWN0dXJsJ10pKTsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndXNlcmlwJ10gPSAoZW1wdHkoJHRoaXMtPkZpZWxkc1sndXNlcmlwJ10pID8gJycgOiB0cmltKCR0aGlzLT5GaWVsZHNbJ3VzZXJpcCddKSk7CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3RlbXBsZXQnXSA9ICR0aGlzLT5GaWVsZHNbJ3JlZGlyZWN0dXJsJ10gPSAnJzsKCgogICAgICAgICAgICB9CgoKICAgICAgICB9Ly8hZXJyb3IKCgogICAgfQoKCgoKCiAgICAvL3BocDTmnoTpgKDlh73mlbAKCgogICAgZnVuY3Rpb24gQXJjaGl2ZXMoJGFpZCkKCgogICAgewoKCiAgICAgICAgJHRoaXMtPl9fY29uc3RydWN0KCRhaWQpOwoKCiAgICB9CgoKCgoKICAgIC8qKgoKCiAgICAgKiAg6Kej5p6Q6ZmE5Yqg6KGo55qE5YaF5a65CgoKICAgICAqCgoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCgoKICAgICAqIEByZXR1cm4gICAgdm9pZAoKCiAgICAgKi8KCgogICAgZnVuY3Rpb24gUGFyQWRkVGFibGUoKQoKCiAgICB7CgoKICAgICAgICAvL+ivu+WPlumZhOWKoOihqOS/oeaBr++8jOW5tuaKiumZhOWKoOihqOeahOi1hOaWmee7j+i/h+e8luivkeWkhOeQhuWQjuWvvOWFpeWIsCR0aGlzLT5GaWVsZHPkuK3vvIzku6Xmlrnkvr/lnKjmqKHmnb/kuK3nlKgge2RlZGU6ZmllbGQgbmFtZT0nZmllbGRuYW1lJyAvfSDmoIforrDnu5/kuIDosIPnlKgKCgogICAgICAgIGlmKCR0aGlzLT5DaGFubmVsVW5pdC0+Q2hhbm5lbEluZm9zWydhZGR0YWJsZSddIT0nJykKCgogICAgICAgIHsKCgogICAgICAgICAgICAkcm93ID0gJHRoaXMtPmFkZFRhYmxlUm93OwoKCiAgICAgICAgICAgIGlmKCR0aGlzLT5DaGFubmVsVW5pdC0+Q2hhbm5lbEluZm9zWydpc3N5c3RlbSddPT0tMSkKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3RpdGxlJ10gPSAkcm93Wyd0aXRsZSddOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydzZW5kZGF0ZSddID0gJHRoaXMtPkZpZWxkc1sncHViZGF0ZSddID0gJHJvd1snc2VuZGRhdGUnXTsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snbWlkJ10gPSAkdGhpcy0+RmllbGRzWydhZG1pbmlkJ10gPSAkcm93WydtaWQnXTsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snaXNtYWtlJ10gPSAxOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydhcmNyYW5rJ10gPSAwOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydtb25leSddPTA7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2ZpbGVuYW1lJ10gPSAnJzsKCgogICAgICAgICAgICB9CgoKCgoKICAgICAgICAgICAgaWYoaXNfYXJyYXkoJHJvdykpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICBmb3JlYWNoKCRyb3cgYXMgJGs9PiR2KSAkcm93W3N0cnRvbG93ZXIoJGspXSA9ICR2OwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBpZihpc19hcnJheSgkdGhpcy0+Q2hhbm5lbFVuaXQtPkNoYW5uZWxGaWVsZHMpICYmICFlbXB0eSgkdGhpcy0+Q2hhbm5lbFVuaXQtPkNoYW5uZWxGaWVsZHMpKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgZm9yZWFjaCgkdGhpcy0+Q2hhbm5lbFVuaXQtPkNoYW5uZWxGaWVsZHMgYXMgJGs9PiRhcnIpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgIGlmKGlzc2V0KCRyb3dbJGtdKSkKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICBpZighZW1wdHkoJGFyclsncmVuYW1lJ10pKQoKCiAgICAgICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG5rID0gJGFyclsncmVuYW1lJ107CgoKICAgICAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRuayA9ICRrOwoKCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAkY29iaiA9ICR0aGlzLT5HZXRDdXJUYWcoJGspOwoKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzX29iamVjdCgkY29iaikpCgoKICAgICAgICAgICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKCR0aGlzLT5kdHAtPkNUYWdzIGFzICRjdGFnKQoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkY3RhZy0+R2V0VGFnTmFtZSgpPT0nZmllbGQnICYmICRjdGFnLT5HZXRBdHQoJ25hbWUnKT09JGspCgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/luKbmoIfor4bnmoTkuJPpopjoioLngrkKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigkY3RhZy0+R2V0QXR0KCdub3RlaWQnKSAhPSAnJykgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWyRrLidfJy4kY3RhZy0+R2V0QXR0KCdub3RlaWQnKV0gPSAkdGhpcy0+Q2hhbm5lbFVuaXQtPk1ha2VGaWVsZCgkaywgJHJvd1ska10sICRjdGFnKTsKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/luKbnsbvlnovnmoTlrZfmrrXoioLngrkKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKCRjdGFnLT5HZXRBdHQoJ3R5cGUnKSAhPSAnJykgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWyRrLidfJy4kY3RhZy0+R2V0QXR0KCd0eXBlJyldID0gJHRoaXMtPkNoYW5uZWxVbml0LT5NYWtlRmllbGQoJGssICRyb3dbJGtdLCAkY3RhZyk7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5YW25a6D5a2X5q61CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJG5rXSA9ICR0aGlzLT5DaGFubmVsVW5pdC0+TWFrZUZpZWxkKCRrLCAkcm93WyRrXSwgJGN0YWcpOwoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWyRua10gPSAkcm93WyRrXTsKCgogICAgICAgICAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGFyclsndHlwZSddPT0naHRtbHRleHQnICYmICRHTE9CQUxTWydjZmdfa2V5d29yZF9yZXBsYWNlJ109PSdZJyAmJiAhZW1wdHkoJHRoaXMtPkZpZWxkc1sna2V5d29yZHMnXSkpCgoKICAgICAgICAgICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWyRua10gPSAkdGhpcy0+UmVwbGFjZUtleXdvcmQoJHRoaXMtPkZpZWxkc1sna2V5d29yZHMnXSwkdGhpcy0+RmllbGRzWyRua10pOwoKCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgfS8vRW5kIGZvcmVhY2gKCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgLy/orr7nva7lhajlsYDnjq/looPlj5jph48KCgogICAgICAgICAgICAkdGhpcy0+RmllbGRzWyd0eXBlbmFtZSddID0gJHRoaXMtPlR5cGVMaW5rLT5UeXBlSW5mb3NbJ3R5cGVuYW1lJ107CiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3R5cGVsaW5rJ10gPSAkdGhpcy0+VHlwZUxpbmstPkdldE9uZVR5cGVMaW5rKCR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zKTsKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndHlwZXVybCddID0gJHRoaXMtPlR5cGVMaW5rLT5HZXRPbmVUeXBlVXJsKCR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zKTsKICAgICAgICAgICAgQFNldFN5c0VudigkdGhpcy0+RmllbGRzWyd0eXBlaWQnXSwkdGhpcy0+RmllbGRzWyd0eXBlbmFtZSddLCR0aGlzLT5GaWVsZHNbJ2lkJ10sJHRoaXMtPkZpZWxkc1sndGl0bGUnXSwnYXJjaGl2ZXMnKTsKCiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHByZWdfcmVwbGFjZSgiQCBbXHNdezAsfWFsdFtcc117MCx9PVtcIidcc117MCx9W1xzXFNdezAsfVtcIidcc10gQGlzVSIsIiAiLCR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7CiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHN0cl9yZXBsYWNlKCckJywgJyQkJywgJHRoaXMtPkZpZWxkc1snYm9keSddKTsKCiAgICAgICAgICAgIC8vIOi/h+a7pOaOieagt+W8j+ihqOWSjOiEmuacrAogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoIi88c3R5bGUgLio/PFwvc3R5bGU+L2lzIiwgIiIsICR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7CiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHByZWdfcmVwbGFjZSgiLzxzY3JpcHQgLio/PFwvc2NyaXB0Pi9pcyIsICIiLCAkdGhpcy0+RmllbGRzWydib2R5J10pOwogICAgICAgICAgICAvLyDpppblhYjlsIblkITnp43lj6/ku6XlvJXotbfmjaLooYznmoTmoIfnrb7vvIjlpoI8YnIgLz7jgIE8cD4g5LmL57G777yJ5pu/5o2i5oiQ5o2i6KGM56ymIlxuIgogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoIi88ZGl2IC4qPz4vaXMiLCAiIiwgJHRoaXMtPkZpZWxkc1snYm9keSddKTsKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snYm9keSddID0gcHJlZ19yZXBsYWNlKCIvdGFyZ2V0PVwiX2JsYW5rXCIvaXMiLCAiIiwgJHRoaXMtPkZpZWxkc1snYm9keSddKTsKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snYm9keSddID0gcHJlZ19yZXBsYWNlKCIvPHAgLio/Pi9pcyIsICI8cD4iLCAkdGhpcy0+RmllbGRzWydib2R5J10pOwogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoIi88c3BhbiAuKj8+L2lzIiwgIjxzcGFuPiIsICR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7CiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHByZWdfcmVwbGFjZSgnLzxpbWcuKj9zcmM9W1wifFwnXT8oLio/KVtcInxcJ10/XHMuKj8+L2knLCI8bWlwLWltZyBkYXRhLWNhcm91c2VsPVwiY2Fyb3VzZWxcIiBjbGFzcz1cIm1pcC1lbGVtZW50IG1pcC1pbWdcIiBzcmM9XCIkMVwiPjwvbWlwLWltZz4iLCAkdGhpcy0+RmllbGRzWydib2R5J10pOwogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoIihzcmM9XCIvdXBsb2Fkcy9hbGxpbWcvKSIsICJzcmM9XCJodHRwOi8vd2NrLnBsbmt5eS5jb20vdXBsb2Fkcy9hbGxpbWcvIiwgJHRoaXMtPkZpZWxkc1snYm9keSddKTsKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snYm9keSddID0gcHJlZ19yZXBsYWNlKCIoPGEgaHJlZj1cIi8pIiwgIjxhIGhyZWY9XCJodHRwOi8vbWlwLnBsbmt5eS5jb20vIiwgJHRoaXMtPkZpZWxkc1snYm9keSddKTsKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snYm9keSddID0gcHJlZ19yZXBsYWNlKCcvPGltZyguKz8pPi9pJywiPG1pcC1pbWcgZGF0YS1jYXJvdXNlbD1cImNhcm91c2VsXCIgY2xhc3M9XCJtaXAtZWxlbWVudCBtaXAtaW1nXCIkMSQzPjwvbWlwLWltZz4iLCR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7IAogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoJy88YSguKz8pPi9pJywiPGFcJDEkMyB0YXJnZXQ9X2JsYW5rPiIsJHRoaXMtPkZpZWxkc1snYm9keSddKTsgCiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHByZWdfcmVwbGFjZSgiLzxcLz9kaXY+L2kiLCAiXG4iLCAkdGhpcy0+RmllbGRzWydib2R5J10pOwogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoIi88XC8/YmxvY2txdW90ZT4vaSIsICJcbiIsICR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7CiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHByZWdfcmVwbGFjZSgiLzxcLz9saT4vaSIsICJcbiIsICR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7CiAgICAgICAgICAgIC8vIOWwhiImbmJzcDsi5pu/5o2i5Li656m65qC8CiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHByZWdfcmVwbGFjZSgiL1wmbmJzcFw7L2kiLCAiICIsICR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7CiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2JvZHknXSA9IHByZWdfcmVwbGFjZSgiL1wmbmJzcC9pIiwgIiAiLCAkdGhpcy0+RmllbGRzWydib2R5J10pOwogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoIi9cIC9pIiwgIiAiLCAkdGhpcy0+RmllbGRzWydib2R5J10pOwogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydib2R5J10gPSBwcmVnX3JlcGxhY2UoIi9cIFw7L2kiLCAiICIsICR0aGlzLT5GaWVsZHNbJ2JvZHknXSk7CiAgICAgICAgfQoKCiAgICAgICAgLy/lrozmiJDpmYTliqDooajkv6Hmga/or7vlj5YKCgogICAgICAgIHVuc2V0KCRyb3cpOwoKCgoKCiAgICAgICAgLy/lpITnkIbopoHliIbpobXmmL7npLrnmoTlrZfmrrUKCgogICAgICAgICR0aGlzLT5TcGxpdFRpdGxlcyA9IEFycmF5KCk7CgoKICAgICAgICBpZigkdGhpcy0+U3BsaXRQYWdlRmllbGQhPScnICYmICRHTE9CQUxTWydjZmdfYXJjc3B0aXRsZSddPSdZJwoKCiAgICAgICAgJiYgaXNzZXQoJHRoaXMtPkZpZWxkc1skdGhpcy0+U3BsaXRQYWdlRmllbGRdKSkKCgogICAgICAgIHsKCgogICAgICAgICAgICAkdGhpcy0+U3BsaXRGaWVsZHMgPSBleHBsb2RlKCIjcCMiLCR0aGlzLT5GaWVsZHNbJHRoaXMtPlNwbGl0UGFnZUZpZWxkXSk7CgoKICAgICAgICAgICAgJGkgPSAxOwoKCiAgICAgICAgICAgIGZvcmVhY2goJHRoaXMtPlNwbGl0RmllbGRzIGFzICRrPT4kdikKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICR0bXB2ID0gY25fc3Vic3RyKCR2LDUwKTsKCgogICAgICAgICAgICAgICAgJHBvcyA9IHN0cnBvcygkdG1wdiwnI2UjJyk7CgoKICAgICAgICAgICAgICAgIGlmKCRwb3M+MCkKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgJHN0ID0gdHJpbShjbl9zdWJzdHIoJHRtcHYsJHBvcykpOwoKCiAgICAgICAgICAgICAgICAgICAgaWYoJHN0PT0iInx8JHN0PT0i5Ymv5qCH6aKYInx8JHN0PT0i5YiG6aG15qCH6aKYIikKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+U3BsaXRGaWVsZHNbJGtdID0gcHJlZ19yZXBsYWNlKCIvXiguKikjZSMvaXMiLCIiLCR2KTsKCgogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+U3BsaXRGaWVsZHNbJGtdID0gcHJlZ19yZXBsYWNlKCIvXiguKikjZSMvaXMiLCIiLCR2KTsKCgogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+U3BsaXRUaXRsZXNbJGtdID0gJHN0OwoKCiAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgJGkrKzsKCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgJHRoaXMtPlRvdGFsUGFnZSA9IGNvdW50KCR0aGlzLT5TcGxpdEZpZWxkcyk7CgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndG90YWxwYWdlJ10gPSAkdGhpcy0+VG90YWxQYWdlOwoKCiAgICAgICAgfQoKCiAgICAgICAgCgoKICAgICAgICAvL+WkhOeQhum7mOiupOe8qeeVpeWbvuetiQoKCiAgICAgICAgaWYgKGlzc2V0KCR0aGlzLT5GaWVsZHNbJ2xpdHBpYyddKSkKCgogICAgICAgIHsKCgogICAgICAgICAgICBpZigkdGhpcy0+RmllbGRzWydsaXRwaWMnXSA9PSAnLScgfHwgJHRoaXMtPkZpZWxkc1snbGl0cGljJ10gPT0gJycpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydsaXRwaWMnXSA9ICRHTE9CQUxTWydjZmdfY21zcGF0aCddLicvaW1hZ2VzL2RlZmF1bHRwaWMuZ2lmJzsKCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgaWYoIXByZWdfbWF0Y2goIiNeaHR0cDpcL1wvI2kiLCAkdGhpcy0+RmllbGRzWydsaXRwaWMnXSkgJiYgJEdMT0JBTFNbJ2NmZ19tdWx0aV9zaXRlJ10gPT0gJ1knKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snbGl0cGljJ10gPSAkR0xPQkFMU1snY2ZnX21haW5zaXRlJ10uJHRoaXMtPkZpZWxkc1snbGl0cGljJ107CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3BpY25hbWUnXSA9ICR0aGlzLT5GaWVsZHNbJ2xpdHBpYyddOwoKCiAgICAgICAgICAgIAoKCiAgICAgICAgICAgIC8v5qih5p2/6YeM55u05o6l5L2/55Soe2RlZGU6ZmllbGQgbmFtZT0naW1hZ2UnL33ojrflj5bnvKnnlaXlm74KCgogICAgICAgICAgICAkdGhpcy0+RmllbGRzWydpbWFnZSddID0gKCFwcmVnX21hdGNoKCcvanBnfGdpZnxwbmcvaScsICR0aGlzLT5GaWVsZHNbJ3BpY25hbWUnXSkgPyAnJyA6ICI8aW1nIHNyYz0neyR0aGlzLT5GaWVsZHNbJ3BpY25hbWUnXX0nIC8+Iik7CgoKICAgICAgICB9CgoKICAgICAgICAvLyDlpITnkIbmipXnpajpgInpobkKCgogICAgICAgIGlmIChpc3NldCgkdGhpcy0+RmllbGRzWyd2b3RlaWQnXSkgJiYgIWVtcHR5KCR0aGlzLT5GaWVsZHNbJ3ZvdGVpZCddKSkKCgogICAgICAgIHsKCgogICAgICAgICAgICAkdGhpcy0+RmllbGRzWyd2b3RlJ10gPSAnJzsKCgogICAgICAgICAgICAkdm90ZWlkID0gJHRoaXMtPkZpZWxkc1sndm90ZWlkJ107CgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndm90ZSddID0gIjxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnIHNyYz0neyRHTE9CQUxTWydjZmdfY21zcGF0aCddfS9kYXRhL3ZvdGUvdm90ZV97JHZvdGVpZH0uanMnPjwvc2NyaXB0PiI7CgoKICAgICAgICAgICAgaWYgKCRHTE9CQUxTWydjZmdfbXVsdGlfc2l0ZSddID09ICdZJykKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ3ZvdGUnXSA9ICI8c2NyaXB0IGxhbmd1YWdlPSdqYXZhc2NyaXB0JyBzcmM9J3skR0xPQkFMU1snY2ZnX21haW5zaXRlJ119L2RhdGEvdm90ZS92b3RlX3skdm90ZWlkfS5qcyc+PC9zY3JpcHQ+IjsKCgogICAgICAgICAgICB9CgoKICAgICAgICB9CgoKICAgICAgICAKCgogICAgICAgIGlmIChpc3NldCgkdGhpcy0+RmllbGRzWydnb29kcG9zdCddKSAmJiBpc3NldCgkdGhpcy0+RmllbGRzWydiYWRwb3N0J10pKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIC8vZGlnZwoKCiAgICAgICAgICAgIGlmKCR0aGlzLT5GaWVsZHNbJ2dvb2Rwb3N0J10gKyAkdGhpcy0+RmllbGRzWydiYWRwb3N0J10gPT0gMCkKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2dvb2RwZXInXSA9ICR0aGlzLT5GaWVsZHNbJ2JhZHBlciddID0gMDsKCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snZ29vZHBlciddID0gbnVtYmVyX2Zvcm1hdCgkdGhpcy0+RmllbGRzWydnb29kcG9zdCddLygkdGhpcy0+RmllbGRzWydnb29kcG9zdCddKyR0aGlzLT5GaWVsZHNbJ2JhZHBvc3QnXSksIDMpKjEwMDsKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snYmFkcGVyJ10gPSAxMDAgLSAkdGhpcy0+RmllbGRzWydnb29kcGVyJ107CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgfQoKCiAgICB9CgoKCgoKICAgIC8v6I635b6X5b2T5YmN5a2X5q615Y+C5pWwCgoKICAgIGZ1bmN0aW9uIEdldEN1clRhZygkZmllbGRuYW1lKQoKCiAgICB7CgoKICAgICAgICBpZighaXNzZXQoJHRoaXMtPmR0cC0+Q1RhZ3MpKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIHJldHVybiAnJzsKCgogICAgICAgIH0KCgogICAgICAgIGZvcmVhY2goJHRoaXMtPmR0cC0+Q1RhZ3MgYXMgJGN0YWcpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgaWYoJGN0YWctPkdldFRhZ05hbWUoKT09J2ZpZWxkJyAmJiAkY3RhZy0+R2V0QXR0KCduYW1lJyk9PSRmaWVsZG5hbWUpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICByZXR1cm4gJGN0YWc7CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KCgogICAgICAgIHJldHVybiAnJzsKCgogICAgfQoKCgoKCiAgICAvKioKCgogICAgICogIOeUn+aIkOmdmeaAgUhUTUwKCgogICAgICoKCgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKCgogICAgICogQHBhcmFtICAgICBpbnQgICAgJGlzcmVtb3RlICDmmK/lkKbov5znqIsKCgogICAgICogQHJldHVybiAgICBzdHJpbmcKCgogICAgICovCgoKICAgIGZ1bmN0aW9uIE1ha2VIdG1sKCRpc3JlbW90ZT0wKQoKCiAgICB7CgoKICAgICAgICBnbG9iYWwgJGNmZ19yZW1vdGVfc2l0ZSwkZmlsZUZpcnN0OwoKCiAgICAgICAgaWYoJHRoaXMtPklzRXJyb3IpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgcmV0dXJuICcnOwoKCiAgICAgICAgfQoKCiAgICAgICAgJHRoaXMtPkZpZWxkc1siZGlzcGxheXR5cGUiXSA9ICJzdCI7CgoKICAgICAgICAvL+mihOe8luivkSR0aAoKCiAgICAgICAgJHRoaXMtPkxvYWRUZW1wbGV0KCk7CgoKICAgICAgICAkdGhpcy0+UGFyQWRkVGFibGUoKTsKCgogICAgICAgICR0aGlzLT5QYXJzZVRlbXBsZXRzRmlyc3QoKTsKCgogICAgICAgICR0aGlzLT5GaWVsZHNbJ3NlbmRkYXRlJ10gPSBlbXB0eSgkdGhpcy0+RmllbGRzWydzZW5kZGF0ZSddKT8gJycgOiAkdGhpcy0+RmllbGRzWydzZW5kZGF0ZSddOwoKCiAgICAgICAgJHRoaXMtPkZpZWxkc1sndGl0bGUnXSA9IGVtcHR5KCR0aGlzLT5GaWVsZHNbJ3RpdGxlJ10pPyAnJyA6ICR0aGlzLT5GaWVsZHNbJ3RpdGxlJ107CgoKICAgICAgICAkdGhpcy0+RmllbGRzWydhcmNyYW5rJ10gPSBlbXB0eSgkdGhpcy0+RmllbGRzWydhcmNyYW5rJ10pPyAwIDogJHRoaXMtPkZpZWxkc1snYXJjcmFuayddOwoKCiAgICAgICAgJHRoaXMtPkZpZWxkc1snaXNtYWtlJ10gPSBlbXB0eSgkdGhpcy0+RmllbGRzWydpc21ha2UnXSk/IDAgOiAkdGhpcy0+RmllbGRzWydpc21ha2UnXTsKCgogICAgICAgICR0aGlzLT5GaWVsZHNbJ21vbmV5J10gPSBlbXB0eSgkdGhpcy0+RmllbGRzWydtb25leSddKT8gMCA6ICR0aGlzLT5GaWVsZHNbJ21vbmV5J107CgoKICAgICAgICAkdGhpcy0+RmllbGRzWydmaWxlbmFtZSddID0gZW1wdHkoJHRoaXMtPkZpZWxkc1snZmlsZW5hbWUnXSk/ICcnIDogJHRoaXMtPkZpZWxkc1snZmlsZW5hbWUnXTsKCgoKCgogICAgICAgIC8v5YiG5p6Q6KaB5Yib5bu655qE5paH5Lu25ZCN56ewCgoKICAgICAgICAkZmlsZW5hbWUgPSBHZXRGaWxlTmV3TmFtZV93YXAoCgoKICAgICAgICAgICAgJHRoaXMtPkFyY0lELCR0aGlzLT5GaWVsZHNbJ3R5cGVpZCddLCR0aGlzLT5GaWVsZHNbJ3NlbmRkYXRlJ10sCgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndGl0bGUnXSwkdGhpcy0+RmllbGRzWydpc21ha2UnXSwkdGhpcy0+RmllbGRzWydhcmNyYW5rJ10sCgoKICAgICAgICAgICAgJHRoaXMtPlR5cGVMaW5rLT5UeXBlSW5mb3NbJ25hbWVydWxlJ10sJHRoaXMtPlR5cGVMaW5rLT5UeXBlSW5mb3NbJ3R5cGVkaXInXSwkdGhpcy0+RmllbGRzWydtb25leSddLCR0aGlzLT5GaWVsZHNbJ2ZpbGVuYW1lJ10KCgogICAgICAgICk7CgoKICAgICAgICAkZmlsZW5hbWVzICA9IGV4cGxvZGUoIi4iLCAkZmlsZW5hbWUpOwoKCiAgICAgICAgJHRoaXMtPlNob3J0TmFtZSA9ICRmaWxlbmFtZXNbY291bnQoJGZpbGVuYW1lcyktMV07CgoKICAgICAgICBpZigkdGhpcy0+U2hvcnROYW1lPT0nJykgJHRoaXMtPlNob3J0TmFtZSA9ICdodG1sJzsKCgogICAgICAgICRmaWxlRmlyc3QgPSBwcmVnX3JlcGxhY2UoIi9cLiIuJHRoaXMtPlNob3J0TmFtZS4iJC9pIiwgIiIsICRmaWxlbmFtZSk7CgoKICAgICAgICAkdGhpcy0+RmllbGRzWyduYW1laGFuZCddID0gYmFzZW5hbWUoJGZpbGVGaXJzdCk7CgoKICAgICAgICAkZmlsZW5hbWVzICA9IGV4cGxvZGUoIi8iLCAkZmlsZW5hbWUpOwoKCiAgICAgICAgJHRoaXMtPk5hbWVGaXJzdCA9IHByZWdfcmVwbGFjZSgiL1wuIi4kdGhpcy0+U2hvcnROYW1lLiIkL2kiLCAiIiwgJGZpbGVuYW1lc1tjb3VudCgkZmlsZW5hbWVzKS0xXSk7CgoKICAgICAgICBpZigkdGhpcy0+TmFtZUZpcnN0PT0nJykKCgogICAgICAgIHsKCgogICAgICAgICAgICAkdGhpcy0+TmFtZUZpcnN0ID0gJHRoaXMtPmFyY0lEOwoKCiAgICAgICAgfQoKCgoKCiAgICAgICAgLy/ojrflvpflvZPliY3mlofmoaPnmoTlhajlkI0KCgogICAgICAgICRmaWxlbmFtZUZ1bGwgPSBHZXRGaWxlVXJsKAoKCiAgICAgICAgICAgICR0aGlzLT5BcmNJRCwkdGhpcy0+RmllbGRzWyd0eXBlaWQnXSwkdGhpcy0+RmllbGRzWyJzZW5kZGF0ZSJdLAoKCiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbInRpdGxlIl0sJHRoaXMtPkZpZWxkc1siaXNtYWtlIl0sCgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1siYXJjcmFuayJdLCR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWyduYW1lcnVsZSddLCR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWyd0eXBlZGlyJ10sJHRoaXMtPkZpZWxkc1sibW9uZXkiXSwkdGhpcy0+RmllbGRzWydmaWxlbmFtZSddLAoKCiAgICAgICAgICAgICR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWydtb3Jlc2l0ZSddLCR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWydzaXRldXJsJ10sJHRoaXMtPlR5cGVMaW5rLT5UeXBlSW5mb3NbJ3NpdGVwYXRoJ10KCgogICAgICAgICk7CgoKICAgICAgICAkdGhpcy0+RmllbGRzWydhcmN1cmwnXSA9ICR0aGlzLT5GaWVsZHNbJ2Z1bGxuYW1lJ10gPSAkZmlsZW5hbWVGdWxsOwoKCgoKCiAgICAgICAgLy/lr7nkuo7lt7Lorr7nva7kuI3nlJ/miJBIVE1M55qE5paH56ug55u05o6l6L+U5Zue572R5Z2ACgoKICAgICAgICBpZigkdGhpcy0+RmllbGRzWydpc21ha2UnXT09LTEgfHwgJHRoaXMtPkZpZWxkc1snYXJjcmFuayddIT0wIHx8ICR0aGlzLT5GaWVsZHNbJ21vbmV5J10+MCAKCgogICAgICAgICAgIHx8ICgkdGhpcy0+RmllbGRzWyd0eXBlaWQnXT09MCAmJiAkdGhpcy0+RmllbGRzWydjaGFubmVsJ10gIT0gLTEpICkKCgogICAgICAgIHsKCgogICAgICAgICAgICByZXR1cm4gJHRoaXMtPkdldFRydWVVcmwoJGZpbGVuYW1lKTsKCgogICAgICAgIH0KCgogICAgICAgIC8v5b6q546v55Sf5oiQSFRNTOaWh+S7tgoKCiAgICAgICAgZWxzZQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGZvcigkaT0xOyRpPD0kdGhpcy0+VG90YWxQYWdlOyRpKyspCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICBpZigkdGhpcy0+VG90YWxQYWdlID4gMSkgewoKCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndG1wdGl0bGUnXSA9IChlbXB0eSgkdGhpcy0+RmllbGRzWyd0bXB0aXRsZSddKSA/ICR0aGlzLT5GaWVsZHNbJ3RpdGxlJ10gOiAkdGhpcy0+RmllbGRzWyd0bXB0aXRsZSddKTsKCgogICAgICAgICAgICAgICAgICAgIGlmKCRpPjEpICR0aGlzLT5GaWVsZHNbJ3RpdGxlJ10gPSAkdGhpcy0+RmllbGRzWyd0bXB0aXRsZSddLiIoJGkpIjsKCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICBpZigkaT4xKQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAkVFJVRWZpbGVuYW1lID0gJHRoaXMtPkdldFRydWVQYXRoKCkuJGZpbGVGaXJzdC4iXyIuJGkuIi4iLiR0aGlzLT5TaG9ydE5hbWU7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAkVFJVRWZpbGVuYW1lID0gJHRoaXMtPkdldFRydWVQYXRoKCkuJGZpbGVuYW1lOwoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgICR0aGlzLT5QYXJzZURNRmllbGRzKCRpLDEpOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+ZHRwLT5TYXZlVG8oJFRSVUVmaWxlbmFtZSk7CgoKICAgICAgICAgICAgICAgIC8v5aaC5p6c5ZCv55So6L+c56iL5Y+R5biD5YiZ6ZyA6KaB6L+b6KGM5Yik5patCgoKICAgICAgICAgICAgICAgIGlmKCRjZmdfcmVtb3RlX3NpdGU9PSdZJyAmJiAkaXNyZW1vdGUgPT0gMSkKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgIAoKCiAgICAgICAgICAgICAgICAgICAgLy/liIbmnpDov5znqIvmlofku7bot6/lvoQKCgogICAgICAgICAgICAgICAgICAgICRyZW1vdGVmaWxlID0gc3RyX3JlcGxhY2UoREVERVJPT1QsICcnLCAkVFJVRWZpbGVuYW1lKTsKCgogICAgICAgICAgICAgICAgICAgICRsb2NhbGZpbGUgPSAnLi4nLiRyZW1vdGVmaWxlOwoKCiAgICAgICAgICAgICAgICAgICAgLy/liJvlu7rov5znqIvmlofku7blpLkKCgogICAgICAgICAgICAgICAgICAgICRyZW1vdGVkaXIgPSBwcmVnX3JlcGxhY2UoIiNbXlwvXSpcLmh0bWwjIiwgJycsICRyZW1vdGVmaWxlKTsKCgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5mdHAtPnJta2RpcigkcmVtb3RlZGlyKTsKCgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5mdHAtPnVwbG9hZCgkbG9jYWxmaWxlLCAkcmVtb3RlZmlsZSwgJ2FzY2lpJyk7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICB9CgoKICAgICAgICB9CgoKICAgICAgICAkdGhpcy0+ZHNxbC0+RXhlY3V0ZU5vbmVRdWVyeSgiVXBkYXRlIGAjQF9fYXJjaGl2ZXNgIFNFVCBpc21ha2U9MSBXSEVSRSBpZD0nIi4kdGhpcy0+QXJjSUQuIiciKTsKCgogICAgICAgIHJldHVybiAkdGhpcy0+R2V0VHJ1ZVVybCgkZmlsZW5hbWUpOwoKCiAgICB9CgoKCgoKICAgIC8qKgoKCiAgICAgKiAg6I635b6X55yf5a6e6L+e5o6l6Lev5b6ECgoKICAgICAqCgoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCgoKICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAgICRudXJsICDov57mjqUKCgogICAgICogQHJldHVybiAgICBzdHJpbmcKCgogICAgICovCgoKICAgIGZ1bmN0aW9uIEdldFRydWVVcmwoJG51cmwpCgoKICAgIHsKCgogICAgICAgIHJldHVybiBHZXRGaWxlVXJsX3dhcAoKCiAgICAgICAgKAoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWydpZCddLAoKCiAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWyd0eXBlaWQnXSwKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snc2VuZGRhdGUnXSwKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sndGl0bGUnXSwKCgogICAgICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1snaXNtYWtlJ10sCgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2FyY3JhbmsnXSwKCgogICAgICAgICAgICAgICAgJHRoaXMtPlR5cGVMaW5rLT5UeXBlSW5mb3NbJ25hbWVydWxlJ10sCgoKICAgICAgICAgICAgICAgICR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWyd0eXBlZGlyJ10sCgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ21vbmV5J10sCgoKICAgICAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2ZpbGVuYW1lJ10sCgoKICAgICAgICAgICAgICAgICR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWydtb3Jlc2l0ZSddLAoKCiAgICAgICAgICAgICAgICAkdGhpcy0+VHlwZUxpbmstPlR5cGVJbmZvc1snc2l0ZXVybCddLAoKCiAgICAgICAgICAgICAgICAkdGhpcy0+VHlwZUxpbmstPlR5cGVJbmZvc1snc2l0ZXBhdGgnXQoKCiAgICAgICAgKTsKCgogICAgfQoKCgoKCiAgICAvKioKCgogICAgICogIOiOt+W+l+ermeeCueeahOecn+Wunuaguei3r+W+hAoKCiAgICAgKgoKCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwoKCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwoKCiAgICAgKi8KCgogICAgZnVuY3Rpb24gR2V0VHJ1ZVBhdGgoKQoKCiAgICB7CgoKICAgICAgICAkVFJVRXBhdGggPSAkR0xPQkFMU1siY2ZnX2Jhc2VkaXIiXTsKCgogICAgICAgIHJldHVybiAkVFJVRXBhdGg7CgoKICAgIH0KCgoKCgogICAgLyoqCgoKICAgICAqICDojrflvpfmjIflrprplK7lgLznmoTlrZfmrrUKCgogICAgICoKCgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKCgogICAgICogQHBhcmFtICAgICBzdHJpbmcgICRmbmFtZSAg6ZSu5ZCN56ewCgoKICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAkY3RhZyAg5qCH6K6wCgoKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCgoKICAgICAqLwoKCiAgICBmdW5jdGlvbiBHZXRGaWVsZCgkZm5hbWUsICRjdGFnKQoKCiAgICB7CgoKICAgICAgICAvL+aJgOaciUZpZWxk5pWw57uEIE9SIOaZrumAmkZpZWxkCgoKICAgICAgICBpZigkZm5hbWU9PSdhcnJheScpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5GaWVsZHM7CgoKICAgICAgICB9CgoKICAgICAgICAvL+aMh+WumuS6hklE55qE6IqC54K5CgoKICAgICAgICBlbHNlIGlmKCRjdGFnLT5HZXRBdHQoJ25vdGVpZCcpICE9ICcnKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCBpc3NldCgkdGhpcy0+RmllbGRzWyRmbmFtZS4nXycuJGN0YWctPkdldEF0dCgnbm90ZWlkJyldKSApCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXMtPkZpZWxkc1skZm5hbWUuJ18nLiRjdGFnLT5HZXRBdHQoJ25vdGVpZCcpXTsKCgogICAgICAgICAgICB9CgoKICAgICAgICB9CgoKICAgICAgICAvL+aMh+WumuS6hnR5cGXnmoToioLngrkKCgogICAgICAgIGVsc2UgaWYoJGN0YWctPkdldEF0dCgndHlwZScpICE9ICcnKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCBpc3NldCgkdGhpcy0+RmllbGRzWyRmbmFtZS4nXycuJGN0YWctPkdldEF0dCgndHlwZScpXSkgKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgcmV0dXJuICR0aGlzLT5GaWVsZHNbJGZuYW1lLidfJy4kY3RhZy0+R2V0QXR0KCd0eXBlJyldOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KCgogICAgICAgIGVsc2UgaWYoIGlzc2V0KCR0aGlzLT5GaWVsZHNbJGZuYW1lXSkgKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+RmllbGRzWyRmbmFtZV07CgoKICAgICAgICB9CgoKICAgICAgICByZXR1cm4gJyc7CgoKICAgIH0KCgoKCgogICAgLyoqCgoKICAgICAqICDojrflvpfmqKHmnb/mlofku7bkvY3nva4KCgogICAgICoKCgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKCgogICAgICogQHJldHVybiAgICBzdHJpbmcKCgogICAgICovCgoKICAgIGZ1bmN0aW9uIEdldFRlbXBsZXRGaWxlKCkKCgogICAgewoKCiAgICAgICAgZ2xvYmFsICRjZmdfYmFzZWRpciwkY2ZnX3RlbXBsZXRzX2RpciwkY2ZnX2RmX3N0eWxlLCRjZmdfd2FwaHRtbDsKCgogICAgICAgICRjaWQgPSAkdGhpcy0+Q2hhbm5lbFVuaXQtPkNoYW5uZWxJbmZvc1snbmlkJ107CgoKICAgICAgICBpZighZW1wdHkoJHRoaXMtPkZpZWxkc1sndGVtcGxldCddKSkKCgogICAgICAgIHsKCgogICAgICAgICAgICAkZmlsZXRhZyA9IE1mVGVtcGxldCgkdGhpcy0+RmllbGRzWyd0ZW1wbGV0J10pOwoKCiAgICAgICAgICAgIGlmKCAhcHJlZ19tYXRjaCgiI1wvIyIsICRmaWxldGFnKSApICRmaWxldGFnID0gJEdMT0JBTFNbJ2NmZ19kZl9zdHlsZSddLicvJy4kZmlsZXRhZzsKCgogICAgICAgIH0KCgogICAgICAgIGVsc2UKCgogICAgICAgIHsKCgogICAgICAgICAgICAkZmlsZXRhZyA9IE1mVGVtcGxldCgkdGhpcy0+VHlwZUxpbmstPlR5cGVJbmZvc1sidGVtcGFydGljbGUiXSk7CgoKICAgICAgICB9CgoKICAgICAgICAkdGlkID0gJHRoaXMtPkZpZWxkc1sndHlwZWlkJ107CgoKICAgICAgICAkZmlsZXRhZyA9IHN0cl9yZXBsYWNlKCd7Y2lkfScsICRjaWQsJGZpbGV0YWcpOwoKCiAgICAgICAgJGZpbGV0YWcgPSBzdHJfcmVwbGFjZSgne3RpZH0nLCAkdGlkLCRmaWxldGFnKTsKCgogICAgICAgICR0bXBmaWxlID0gJGNmZ19iYXNlZGlyLiRjZmdfdGVtcGxldHNfZGlyLicvJy4kZmlsZXRhZzsKCgogICAgICAgIGlmKCRjaWQ9PSdzcGVjJykKCgogICAgICAgIHsKCgogICAgICAgICAgICBpZiggIWVtcHR5KCR0aGlzLT5GaWVsZHNbJ3RlbXBsZXQnXSkgKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHRtcGZpbGUgPSAkY2ZnX2Jhc2VkaXIuJGNmZ190ZW1wbGV0c19kaXIuJy8nLiRmaWxldGFnOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAkdG1wZmlsZSA9ICRjZmdfYmFzZWRpci4kY2ZnX3RlbXBsZXRzX2Rpci4iL3skY2ZnX2RmX3N0eWxlfS9hcnRpY2xlX3NwZWMuaHRtIjsKCgogICAgICAgICAgICB9CgoKICAgICAgICB9CgoKICAgICAgICBpZiAoIGRlZmluZWQoJ0RFREVNT0InKSApCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJHRtcGZpbGUgPXN0cl9yZXBsYWNlKCcuaHRtJywnX20uaHRtJywkdG1wZmlsZSk7CgoKICAgICAgICB9CgoKICAgICAgICBpZighZmlsZV9leGlzdHMoJHRtcGZpbGUpKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICR0bXBmaWxlID0gJGNmZ19iYXNlZGlyLiRjZmdfdGVtcGxldHNfZGlyLiIveyRjZmdfZGZfc3R5bGV9LyIuKCRjaWQ9PSdzcGVjJyA/ICdhcnRpY2xlX3NwZWMuaHRtJyA6ICdhcnRpY2xlX2FydGljbGUuaHRtJyk7CgoKICAgICAgICAgICAvKiAKCgoJCSAgIGlmICggZGVmaW5lZCgnREVERU1PQicpICkKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICR0bXBmaWxlID1zdHJfcmVwbGFjZSgnLmh0bScsJ19tLmh0bScsJHRtcGZpbGUpOwoKCiAgICAgICAgICAgIH0KCgoJCQkqLwoKCiAgICAgICAgfQoKCiAgICAgICAgJHRtcGZpbGUgPSBzdHJfcmVwbGFjZSgkY2ZnX2RmX3N0eWxlLCAkY2ZnX3dhcGh0bWwsICR0bXBmaWxlKTsKCgogICAgICAgIGlmICghcHJlZ19tYXRjaCgiIy5odG0kIyIsICR0bXBmaWxlKSkgcmV0dXJuIEZBTFNFOwoKCiAgICAgICAgcmV0dXJuICR0bXBmaWxlOwoKCiAgICB9CgoKCgoKICAgIC8qKgoKCiAgICAgKiAg5Yqo5oCB6L6T5Ye657uT5p6cCgoKICAgICAqCgoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCgoKICAgICAqIEByZXR1cm4gICAgdm9pZAoKCiAgICAgKi8KCgogICAgZnVuY3Rpb24gZGlzcGxheSgpCgoKICAgIHsKCgogICAgICAgIGdsb2JhbCAkaHRtbHR5cGU7CgoKICAgICAgICBpZigkdGhpcy0+SXNFcnJvcikKCgogICAgICAgIHsKCgogICAgICAgICAgICByZXR1cm4gJyc7CgoKICAgICAgICB9CgoKICAgICAgICAkdGhpcy0+RmllbGRzWyJkaXNwbGF5dHlwZSJdID0gImRtIjsKCgogICAgICAgIGlmKCR0aGlzLT5Ob3dQYWdlID4gMSkgJHRoaXMtPkZpZWxkc1sidGl0bGUiXSA9ICR0aGlzLT5GaWVsZHNbInRpdGxlIl0uIih7JHRoaXMtPk5vd1BhZ2V9KSI7CgoKICAgICAgICAvL+mihOe8luivkQoKCiAgICAgICAgJHRoaXMtPkxvYWRUZW1wbGV0KCk7CgoKICAgICAgICAkdGhpcy0+UGFyQWRkVGFibGUoKTsKCgoKCgogICAgICAgICR0aGlzLT5QYXJzZVRlbXBsZXRzRmlyc3QoKTsKCgoKCgogICAgICAgIC8v6Lez6L2s572R5Z2ACgoKICAgICAgICAkdGhpcy0+RmllbGRzWydmbGFnJ109ZW1wdHkoJHRoaXMtPkZpZWxkc1snZmxhZyddKT8gIiIgOiAkdGhpcy0+RmllbGRzWydmbGFnJ107CgoKICAgICAgICBpZihwcmVnX21hdGNoKCIjaiMiLCAkdGhpcy0+RmllbGRzWydmbGFnJ10pICYmICR0aGlzLT5GaWVsZHNbJ3JlZGlyZWN0dXJsJ10gIT0gJycpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgaWYoJEdMT0JBTFNbJ2NmZ19qdW1wX29uY2UnXT09J04nKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJHBhZ2VIdG1sID0gIjxodG1sPlxyXG48aGVhZD5cclxuPG1ldGEgaHR0cC1lcXVpdj1cIkNvbnRlbnQtVHlwZVwiIGNvbnRlbnQ9XCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9Ii4kR0xPQkFMU1snY2ZnX3NvZnRfbGFuZyddLiJcIj5cclxuPHRpdGxlPiIuJHRoaXMtPkZpZWxkc1sndGl0bGUnXS4iPC90aXRsZT5cclxuIjsKCgogICAgICAgICAgICAgICAgJHBhZ2VIdG1sIC49ICI8bWV0YSBodHRwLWVxdWl2PVwicmVmcmVzaFwiIGNvbnRlbnQ9XCIzO1VSTD0iLiR0aGlzLT5GaWVsZHNbJ3JlZGlyZWN0dXJsJ10uIlwiPlxyXG48L2hlYWQ+XHJcbjxib2R5PlxyXG4iOwoKCiAgICAgICAgICAgICAgICAkcGFnZUh0bWwgLj0gIueOsOWcqOato+WcqOi9rOWQke+8miIuJHRoaXMtPkZpZWxkc1sndGl0bGUnXS4i77yM6K+356iN5YCZLi4uPGJyLz48YnIvPlxyXG7ovazlkJHlhoXlrrnnroDku4s6Ii4kdGhpcy0+RmllbGRzWydkZXNjcmlwdGlvbiddLiJcclxuPC9ib2R5PlxyXG48L2h0bWw+XHJcbiI7CgoKICAgICAgICAgICAgICAgIGVjaG8gJHBhZ2VIdG1sOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICBoZWFkZXIoImxvY2F0aW9uOnskdGhpcy0+RmllbGRzWydyZWRpcmVjdHVybCddfSIpOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBleGl0KCk7CgoKICAgICAgICB9CgoKICAgICAgICAkcGFnZUNvdW50ID0gJHRoaXMtPk5vd1BhZ2U7CgoKICAgICAgICAkdGhpcy0+UGFyc2VETUZpZWxkcygkcGFnZUNvdW50LDApOwoKCiAgICAgICAgJHRoaXMtPmR0cC0+ZGlzcGxheSgpOwoKCiAgICB9CgoKCgoKICAgIC8qKgoKCiAgICAgKiAg6L295YWl5qih5p2/CgoKICAgICAqCgoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCgoKICAgICAqIEByZXR1cm4gICAgdm9pZAoKCiAgICAgKi8KCgogICAgZnVuY3Rpb24gTG9hZFRlbXBsZXQoKQoKCiAgICB7CgoKICAgICAgICBpZigkdGhpcy0+VGVtcFNvdXJjZT09JycpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJHRlbXBmaWxlID0gJHRoaXMtPkdldFRlbXBsZXRGaWxlKCk7CgoKICAgICAgICAgICAgaWYoIWZpbGVfZXhpc3RzKCR0ZW1wZmlsZSkgfHwgIWlzX2ZpbGUoJHRlbXBmaWxlKSkKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgIGVjaG8gIuaWh+aho0lE77yaeyR0aGlzLT5GaWVsZHNbJ2lkJ119IC0geyR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWyd0eXBlbmFtZSddfSAtIHskdGhpcy0+RmllbGRzWyd0aXRsZSddfTxiciAvPiI7CgoKICAgICAgICAgICAgICAgIGVjaG8gInskdGVtcGZpbGV95qih5p2/5paH5Lu25LiN5a2Y5Zyo77yM5peg5rOV6Kej5p6Q5paH5qGj77yBIjsKCgogICAgICAgICAgICAgICAgZXhpdCgpOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAkdGhpcy0+ZHRwLT5Mb2FkVGVtcGxhdGUoJHRlbXBmaWxlKTsKCgogICAgICAgICAgICAkdGhpcy0+VGVtcFNvdXJjZSA9ICR0aGlzLT5kdHAtPlNvdXJjZVN0cmluZzsKCgogICAgICAgIH0KCgogICAgICAgIGVsc2UKCgogICAgICAgIHsKCgogICAgICAgICAgICAkdGhpcy0+ZHRwLT5Mb2FkU291cmNlKCR0aGlzLT5UZW1wU291cmNlKTsKCgogICAgICAgIH0KCgogICAgfQoKCgoKCiAgICAvKioKCgogICAgICogIOino+aekOaooeadv++8jOWvueWbuuWumueahOagh+iusOi/m+ihjOWIneWni+e7meWAvAoKCiAgICAgKgoKCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwoKCiAgICAgKiBAcmV0dXJuICAgIHZvaWQKCgogICAgICovCgoKICAgIGZ1bmN0aW9uIFBhcnNlVGVtcGxldHNGaXJzdCgpCgoKICAgIHsKCgogICAgICAgIGlmKGVtcHR5KCR0aGlzLT5GaWVsZHNbJ2tleXdvcmRzJ10pKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICR0aGlzLT5GaWVsZHNbJ2tleXdvcmRzJ10gPSAnJzsKCgogICAgICAgIH0KCgoKCgogICAgICAgIGlmKGVtcHR5KCR0aGlzLT5GaWVsZHNbJ3JlaWQnXSkpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1sncmVpZCddID0gMDsKCgogICAgICAgIH0KCgoKCgogICAgICAgICRHTE9CQUxTWydlbnZzJ11bJ3RhZ3MnXSA9ICR0aGlzLT5GaWVsZHNbJ3RhZ3MnXTsKCgoKCgogICAgICAgIGlmKGlzc2V0KCR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWydyZWlkJ10pKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICRHTE9CQUxTWydlbnZzJ11bJ3JlaWQnXSA9ICR0aGlzLT5UeXBlTGluay0+VHlwZUluZm9zWydyZWlkJ107CgoKICAgICAgICB9CgoKCgoKICAgICAgICAkR0xPQkFMU1snZW52cyddWydrZXl3b3JkJ10gPSAkdGhpcy0+RmllbGRzWydrZXl3b3JkcyddOwoKCgoKCiAgICAgICAgJEdMT0JBTFNbJ2VudnMnXVsndHlwZWlkJ10gPSAkdGhpcy0+RmllbGRzWyd0eXBlaWQnXTsKCgoKCgogICAgICAgICRHTE9CQUxTWydlbnZzJ11bJ3RvcGlkJ10gPSBHZXRUb3BpZCgkdGhpcy0+RmllbGRzWyd0eXBlaWQnXSk7CgoKCgoKICAgICAgICAkR0xPQkFMU1snZW52cyddWydhaWQnXSA9ICRHTE9CQUxTWydlbnZzJ11bJ2lkJ10gPSAkdGhpcy0+RmllbGRzWydpZCddOwoKCgoKCiAgICAgICAgJEdMT0JBTFNbJ2VudnMnXVsnYWRtaW5pZCddID0gJEdMT0JBTFNbJ2VudnMnXVsnbWlkJ10gPSBpc3NldCgkdGhpcy0+RmllbGRzWydtaWQnXSk/ICR0aGlzLT5GaWVsZHNbJ21pZCddIDogMTsKCgoKCgogICAgICAgICRHTE9CQUxTWydlbnZzJ11bJ2NoYW5uZWxpZCddID0gJHRoaXMtPlR5cGVMaW5rLT5UeXBlSW5mb3NbJ2NoYW5uZWx0eXBlJ107CgoKCgoKICAgICAgICBpZigkdGhpcy0+RmllbGRzWydyZWlkJ10+MCkKCgogICAgICAgIHsKCgogICAgICAgICAgICAkR0xPQkFMU1snZW52cyddWyd0eXBlaWQnXSA9ICR0aGlzLT5GaWVsZHNbJ3JlaWQnXTsKCgogICAgICAgIH0KCgoKCgogICAgICAgIE1ha2VPbmVUYWcoJHRoaXMtPmR0cCwgJHRoaXMsICdOJyk7CgoKICAgIH0KCgoKCgogICAgLyoqCgoKICAgICAqICDop6PmnpDmqKHmnb/vvIzlr7nlhoXlrrnph4znmoTlj5jliqjov5vooYzotYvlgLwKCgogICAgICoKCgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKCgogICAgICogQHBhcmFtICAgICBzdHJpbmcgICRwYWdlTm8gIOmhteeggeaVsAoKCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgJGlzbWFrZSAg5piv5ZCm55Sf5oiQCgoKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCgoKICAgICAqLwoKCiAgICBmdW5jdGlvbiBQYXJzZURNRmllbGRzKCRwYWdlTm8sICRpc21ha2U9MSkKCgogICAgewoKCiAgICAgICAgJHRoaXMtPk5vd1BhZ2UgPSAkcGFnZU5vOwoKCiAgICAgICAgJHRoaXMtPkZpZWxkc1snbm93cGFnZSddID0gJHRoaXMtPk5vd1BhZ2U7CgoKICAgICAgICBpZigkdGhpcy0+U3BsaXRQYWdlRmllbGQhPScnICYmIGlzc2V0KCR0aGlzLT5GaWVsZHNbJHRoaXMtPlNwbGl0UGFnZUZpZWxkXSkpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJHRoaXMtPkZpZWxkc1skdGhpcy0+U3BsaXRQYWdlRmllbGRdID0gJHRoaXMtPlNwbGl0RmllbGRzWyRwYWdlTm8gLSAxXTsKCgogICAgICAgICAgICBpZigkcGFnZU5vPjEpICR0aGlzLT5GaWVsZHNbJ2Rlc2NyaXB0aW9uJ10gPSB0cmltKHByZWdfcmVwbGFjZSgiL1tcclxuXHRdLyIsICcgJywgY25fc3Vic3RyKGh0bWwydGV4dCgkdGhpcy0+RmllbGRzWyR0aGlzLT5TcGxpdFBhZ2VGaWVsZF0pLCAyMDApKSk7CgoKICAgICAgICB9CgoKCgoKICAgICAgICAvL+ino+aekOaooeadvwoKCiAgICAgICAgaWYoaXNfYXJyYXkoJHRoaXMtPmR0cC0+Q1RhZ3MpKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGZvcmVhY2goJHRoaXMtPmR0cC0+Q1RhZ3MgYXMgJGk9PiRjdGFnKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgaWYoJGN0YWctPkdldE5hbWUoKT09J2ZpZWxkJykKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmR0cC0+QXNzaWduKCRpLCAkdGhpcy0+R2V0RmllbGQoJGN0YWctPkdldEF0dCgnbmFtZScpLCAkY3RhZykgKTsKCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICBlbHNlIGlmKCRjdGFnLT5HZXROYW1lKCk9PSdwYWdlYnJlYWsnKQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICBpZigkaXNtYWtlPT0wKQoKCiAgICAgICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5kdHAtPkFzc2lnbigkaSwkdGhpcy0+R2V0UGFnZWJyZWFrRE0oJHRoaXMtPlRvdGFsUGFnZSwkdGhpcy0+Tm93UGFnZSwkdGhpcy0+QXJjSUQpKTsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+ZHRwLT5Bc3NpZ24oJGksJHRoaXMtPkdldFBhZ2VicmVhaygkdGhpcy0+VG90YWxQYWdlLCR0aGlzLT5Ob3dQYWdlLCR0aGlzLT5BcmNJRCkpOwoKCiAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgIGVsc2UgaWYoJGN0YWctPkdldE5hbWUoKT09J3BhZ2V0aXRsZScpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgIGlmKCRpc21ha2U9PTApCgoKICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmR0cC0+QXNzaWduKCRpLCR0aGlzLT5HZXRQYWdlVGl0bGVzRE0oJGN0YWctPkdldEF0dCgic3R5bGUiKSwkcGFnZU5vKSk7CgoKICAgICAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmR0cC0+QXNzaWduKCRpLCR0aGlzLT5HZXRQYWdlVGl0bGVzU1QoJGN0YWctPkdldEF0dCgic3R5bGUiKSwkcGFnZU5vKSk7CgoKICAgICAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgZWxzZSBpZigkY3RhZy0+R2V0TmFtZSgpPT0ncHJlbmV4dCcpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICR0aGlzLT5kdHAtPkFzc2lnbigkaSwkdGhpcy0+R2V0UHJlTmV4dCgkY3RhZy0+R2V0QXR0KCdnZXQnKSkpOwoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgIGVsc2UgaWYoJGN0YWctPkdldE5hbWUoKT09J2ZpZWxkbGlzdCcpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRpbm5lcnRleHQgPSB0cmltKCRjdGFnLT5HZXRJbm5lclRleHQoKSk7CgoKICAgICAgICAgICAgICAgICAgICBpZigkaW5uZXJ0ZXh0PT0nJykgJGlubmVydGV4dCA9IEdldFN5c1RlbXBsZXRzKCd0YWdfZmllbGRsaXN0Lmh0bScpOwoKCiAgICAgICAgICAgICAgICAgICAgJGR0cDIgPSBuZXcgRGVkZVRhZ1BhcnNlKCk7CgoKICAgICAgICAgICAgICAgICAgICAkZHRwMi0+U2V0TmFtZVNwYWNlKCdmaWVsZCcsJ1snLCddJyk7CgoKICAgICAgICAgICAgICAgICAgICAkZHRwMi0+TG9hZFNvdXJjZSgkaW5uZXJ0ZXh0KTsKCgogICAgICAgICAgICAgICAgICAgICRvbGRTb3VyY2UgPSAkZHRwMi0+U291cmNlU3RyaW5nOwoKCiAgICAgICAgICAgICAgICAgICAgJG9sZEN0YWdzID0gJGR0cDItPkNUYWdzOwoKCiAgICAgICAgICAgICAgICAgICAgJHJlcyA9ICcnOwoKCiAgICAgICAgICAgICAgICAgICAgaWYoaXNfYXJyYXkoJHRoaXMtPkNoYW5uZWxVbml0LT5DaGFubmVsRmllbGRzKSAmJiBpc19hcnJheSgkZHRwMi0+Q1RhZ3MpKQoKCiAgICAgICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJHRoaXMtPkNoYW5uZWxVbml0LT5DaGFubmVsRmllbGRzIGFzICRrPT4kdikKCgogICAgICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzc2V0KCR2WydhdXRvZmllbGQnXSkgJiYgZW1wdHkoJHZbJ2F1dG9maWVsZCddKSkgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGR0cDItPlNvdXJjZVN0cmluZyA9ICRvbGRTb3VyY2U7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkdHAyLT5DVGFncyA9ICRvbGRDdGFnczsKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZuYW1lID0gJHZbJ2l0ZW1uYW1lJ107CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2goJGR0cDItPkNUYWdzIGFzICR0aWQ9PiRjdGFnMikKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoJGN0YWcyLT5HZXROYW1lKCk9PSduYW1lJykKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZHRwMi0+QXNzaWduKCR0aWQsJGZuYW1lKTsKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYoJGN0YWcyLT5HZXROYW1lKCk9PSd0YWduYW1lJykKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZHRwMi0+QXNzaWduKCR0aWQsJGspOwoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZigkY3RhZzItPkdldE5hbWUoKT09J3ZhbHVlJykKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+RmllbGRzWyRrXSA9ICR0aGlzLT5DaGFubmVsVW5pdC0+TWFrZUZpZWxkKCRrLCR0aGlzLT5GaWVsZHNbJGtdLCRjdGFnMik7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQCRkdHAyLT5Bc3NpZ24oJHRpZCwkdGhpcy0+RmllbGRzWyRrXSk7CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJlcyAuPSAkZHRwMi0+R2V0UmVzdWx0KCk7CgoKICAgICAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPmR0cC0+QXNzaWduKCRpLCRyZXMpOwoKCiAgICAgICAgICAgICAgICB9Ly9lbmQgY2FzZQoKCgoKCiAgICAgICAgICAgIH0vL+e7k+adn+aooeadv+W+queOrwoKCgoKCiAgICAgICAgfQoKCiAgICB9CgoKCgoKICAgIC8qKgoKCiAgICAgKiAg5YWz6Zet5omA5Y2g55So55qE6LWE5rqQCgoKICAgICAqCgoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCgoKICAgICAqIEByZXR1cm4gICAgdm9pZAoKCiAgICAgKi8KCgogICAgZnVuY3Rpb24gQ2xvc2UoKQoKCiAgICB7CgoKICAgICAgICAkdGhpcy0+Rml4ZWRWYWx1ZXMgPSAnJzsKCgogICAgICAgICR0aGlzLT5GaWVsZHMgPSAnJzsKCgogICAgfQoKCgoKCiAgICAvKioKCgogICAgICogIOiOt+WPluS4iuS4gOevh++8jOS4i+S4gOevh+mTvuaOpQoKCiAgICAgKgoKCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwoKCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgJGd0eXBlICDojrflj5bnsbvlnosgIAoKCiAgICAgKiAgICAgICAgICAgICAgICAgICAgcHJlOuS4iuS4gOevhyAgcHJlaW1nOuS4iuS4gOevh+WbvueJhyAgbmV4dDrkuIvkuIDnr4cgIG5leHRpbWc65LiL5LiA56+H5Zu+54mHCgoKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCgoKICAgICAqLwoKCiAgICBmdW5jdGlvbiBHZXRQcmVOZXh0KCRndHlwZT0nJykKCgogICAgewoKCiAgICAgICAgJHJzID0gJyc7CgoKICAgICAgICBpZihjb3VudCgkdGhpcy0+UHJlTmV4dCk8MikKCgogICAgICAgIHsKCgogICAgICAgICAgICAkYWlkID0gJHRoaXMtPkFyY0lEOwoKCiAgICAgICAgICAgICRwcmVSID0gICR0aGlzLT5kc3FsLT5HZXRPbmUoIlNlbGVjdCBpZCBGcm9tIGAjQF9fYXJjdGlueWAgd2hlcmUgaWQ8JGFpZCBBbmQgYXJjcmFuaz4tMSBBbmQgdHlwZWlkPSd7JHRoaXMtPkZpZWxkc1sndHlwZWlkJ119JyBvcmRlciBieSBpZCBkZXNjIik7CgoKICAgICAgICAgICAgJG5leHRSID0gJHRoaXMtPmRzcWwtPkdldE9uZSgiU2VsZWN0IGlkIEZyb20gYCNAX19hcmN0aW55YCB3aGVyZSBpZD4kYWlkIEFuZCBhcmNyYW5rPi0xIEFuZCB0eXBlaWQ9J3skdGhpcy0+RmllbGRzWyd0eXBlaWQnXX0nIG9yZGVyIGJ5IGlkIGFzYyIpOwoKCiAgICAgICAgICAgICRuZXh0ID0gKGlzX2FycmF5KCRuZXh0UikgPyAiIHdoZXJlIGFyYy5pZD17JG5leHRSWydpZCddfSAiIDogJyB3aGVyZSAxPjIgJyk7CgoKICAgICAgICAgICAgJHByZSA9IChpc19hcnJheSgkcHJlUikgPyAiIHdoZXJlIGFyYy5pZD17JHByZVJbJ2lkJ119ICIgOiAnIHdoZXJlIDE+MiAnKTsKCgogICAgICAgICAgICAkcXVlcnkgPSAiU2VsZWN0IGFyYy5pZCxhcmMudGl0bGUsYXJjLnNob3J0dGl0bGUsYXJjLnR5cGVpZCxhcmMuaXNtYWtlLGFyYy5zZW5kZGF0ZSxhcmMuYXJjcmFuayxhcmMubW9uZXksYXJjLmZpbGVuYW1lLGFyYy5saXRwaWMsCgoKICAgICAgICAgICAgICAgICAgICAgICAgdC50eXBlZGlyLHQudHlwZW5hbWUsdC5uYW1lcnVsZSx0Lm5hbWVydWxlMix0LmlzcGFydCx0Lm1vcmVzaXRlLHQuc2l0ZXVybCx0LnNpdGVwYXRoCgoKICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBgI0BfX2FyY2hpdmVzYCBhcmMgbGVmdCBqb2luICNAX19hcmN0eXBlIHQgb24gYXJjLnR5cGVpZD10LmlkICAiOwoKCiAgICAgICAgICAgICRuZXh0Um93ID0gJHRoaXMtPmRzcWwtPkdldE9uZSgkcXVlcnkuJG5leHQpOwoKCiAgICAgICAgICAgICRwcmVSb3cgPSAkdGhpcy0+ZHNxbC0+R2V0T25lKCRxdWVyeS4kcHJlKTsKCgogICAgICAgICAgICBpZihpc19hcnJheSgkcHJlUm93KSkKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICRtbGluayA9IEdldEZpbGVVcmwoJHByZVJvd1snaWQnXSwkcHJlUm93Wyd0eXBlaWQnXSwkcHJlUm93WydzZW5kZGF0ZSddLCRwcmVSb3dbJ3RpdGxlJ10sJHByZVJvd1snaXNtYWtlJ10sJHByZVJvd1snYXJjcmFuayddLAoKCiAgICAgICAgICAgICAgICAkcHJlUm93WyduYW1lcnVsZSddLCRwcmVSb3dbJ3R5cGVkaXInXSwkcHJlUm93Wydtb25leSddLCRwcmVSb3dbJ2ZpbGVuYW1lJ10sJHByZVJvd1snbW9yZXNpdGUnXSwkcHJlUm93WydzaXRldXJsJ10sJHByZVJvd1snc2l0ZXBhdGgnXSk7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5QcmVOZXh0WydwcmUnXSA9ICLkuIrkuIDnr4fvvJo8YSBocmVmPSckbWxpbmsnPnskcHJlUm93Wyd0aXRsZSddfTwvYT4gIjsKCgogICAgICAgICAgICAgICAgJHRoaXMtPlByZU5leHRbJ3ByZWltZyddID0gIjxhIGhyZWY9JyRtbGluayc+PGltZyBzcmM9XCJ7JHByZVJvd1snbGl0cGljJ119XCIgYWx0PVwieyRwcmVSb3dbJ3RpdGxlJ119XCIvPjwvYT4gIjsgCgoKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5QcmVOZXh0WydwcmUnXSA9ICLkuIrkuIDnr4fvvJrmsqHmnInkuoYgIjsKCgogICAgICAgICAgICAgICAgJHRoaXMtPlByZU5leHRbJ3ByZWltZyddID0iPGltZyBzcmM9XCIvdGVtcGxldHMvZGVmYXVsdC9pbWFnZXMvbm9waG90by5qcGdcIiBhbHQ9XCLlr7nkuI3otbfvvIzmsqHmnInkuIrkuIDlm77pm4bkuobvvIFcIi8+IjsKCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgaWYoaXNfYXJyYXkoJG5leHRSb3cpKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJG1saW5rID0gR2V0RmlsZVVybCgkbmV4dFJvd1snaWQnXSwkbmV4dFJvd1sndHlwZWlkJ10sJG5leHRSb3dbJ3NlbmRkYXRlJ10sJG5leHRSb3dbJ3RpdGxlJ10sJG5leHRSb3dbJ2lzbWFrZSddLCRuZXh0Um93WydhcmNyYW5rJ10sCgoKICAgICAgICAgICAgICAgICRuZXh0Um93WyduYW1lcnVsZSddLCRuZXh0Um93Wyd0eXBlZGlyJ10sJG5leHRSb3dbJ21vbmV5J10sJG5leHRSb3dbJ2ZpbGVuYW1lJ10sJG5leHRSb3dbJ21vcmVzaXRlJ10sJG5leHRSb3dbJ3NpdGV1cmwnXSwkbmV4dFJvd1snc2l0ZXBhdGgnXSk7CgoKICAgICAgICAgICAgICAgICR0aGlzLT5QcmVOZXh0WyduZXh0J10gPSAi5LiL5LiA56+H77yaPGEgaHJlZj0nJG1saW5rJz57JG5leHRSb3dbJ3RpdGxlJ119PC9hPiAiOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+UHJlTmV4dFsnbmV4dGltZyddID0gIjxhIGhyZWY9JyRtbGluayc+PGltZyBzcmM9XCJ7JG5leHRSb3dbJ2xpdHBpYyddfVwiIGFsdD1cInskbmV4dFJvd1sndGl0bGUnXX1cIi8+PC9hPiAiOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAkdGhpcy0+UHJlTmV4dFsnbmV4dCddID0gIuS4i+S4gOevh++8muayoeacieS6hiAiOwoKCiAgICAgICAgICAgICAgICAkdGhpcy0+UHJlTmV4dFsnbmV4dGltZyddID0iPGEgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyBhbHQ9XCJcIj48aW1nIHNyYz1cIi90ZW1wbGV0cy9kZWZhdWx0L2ltYWdlcy9ub3Bob3RvLmpwZ1wiIGFsdD1cIuWvueS4jei1t++8jOayoeacieS4i+S4gOWbvumbhuS6hu+8gVwiLz48L2E+IjsKCgogICAgICAgICAgICB9CgoKICAgICAgICB9CgoKICAgICAgICBpZigkZ3R5cGU9PSdwcmUnKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICRycyA9ICAkdGhpcy0+UHJlTmV4dFsncHJlJ107CgoKICAgICAgICB9CgoKICAgICAgICBlbHNlIGlmKCRndHlwZT09J3ByZWltZycpewoKCiAgICAgICAgICAgIAoKCiAgICAgICAgICAgICRycyA9ICAkdGhpcy0+UHJlTmV4dFsncHJlaW1nJ107CgoKICAgICAgICB9CgoKICAgICAgICBlbHNlIGlmKCRndHlwZT09J25leHQnKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICRycyA9ICAkdGhpcy0+UHJlTmV4dFsnbmV4dCddOwoKCiAgICAgICAgfQoKCiAgICAgICAgZWxzZSBpZigkZ3R5cGU9PSduZXh0aW1nJyl7CgoKICAgICAgICAgICAgCgoKICAgICAgICAgICAgJHJzID0gICR0aGlzLT5QcmVOZXh0WyduZXh0aW1nJ107CgoKICAgICAgICB9CgoKICAgICAgICBlbHNlCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJHJzID0gICR0aGlzLT5QcmVOZXh0WydwcmUnXS4iICZuYnNwOyAiLiR0aGlzLT5QcmVOZXh0WyduZXh0J107CgoKICAgICAgICB9CgoKICAgICAgICAkcnMgPSBzdHJfcmVwbGFjZSgkR0xPQkFMU1snY2ZnX2Jhc2Vob3N0J10sJEdMT0JBTFNbJ2NmZ193YXB1cmwnXSwkcnMpOwoKCiAgICAgICAgcmV0dXJuICRyczsKCgogICAgfQoKCgoKCiAgICAvKioKCgogICAgICogIOiOt+W+l+WKqOaAgemhtemdouWIhumhteWIl+ihqAoKCiAgICAgKgoKCiAgICAgKiBAYWNjZXNzICAgIHB1YmxpYwoKCiAgICAgKiBAcGFyYW0gICAgIGludCAgICR0b3RhbFBhZ2UgIOaAu+mhteaVsAoKCiAgICAgKiBAcGFyYW0gICAgIGludCAgICRub3dQYWdlICDlvZPliY3pobXmlbAKCgogICAgICogQHBhcmFtICAgICBpbnQgICAkYWlkICDmlofmoaNpZAoKCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwoKCiAgICAgKi8KCgogICAgZnVuY3Rpb24gR2V0UGFnZWJyZWFrRE0oJHRvdGFsUGFnZSwgJG5vd1BhZ2UsICRhaWQpCgoKICAgIHsKCgogICAgICAgIGdsb2JhbCAkY2ZnX3Jld3JpdGU7CgoKICAgICAgICBpZigkdG90YWxQYWdlPT0xKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIHJldHVybiAiIjsKCgogICAgICAgIH0KCgogICAgICAgICQvL1BhZ2VMaXN0ID0gIjxsaT48YT7lhbEiLiR0b3RhbFBhZ2UuIumhtTogPC9hPjwvbGk+IjsKCgogICAgICAgICRuUGFnZSA9ICRub3dQYWdlLTE7CgoKICAgICAgICAkbFBhZ2UgPSAkbm93UGFnZSsxOwoKCiAgICAgICAgaWYoJG5vd1BhZ2U9PTEpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJFBhZ2VMaXN0Lj0iPGxpIGNsYXNzPSdwZ05leHQgcGdFbXB0eSc+PGEgaHJlZj0nIyc+Jmx0OyZsdDs8L2E+PC9saT4iOwoKCiAgICAgICAgfQoKCiAgICAgICAgZWxzZQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCRuUGFnZT09MSkKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaSBjbGFzcz0ncGdOZXh0IHBnRW1wdHknPjxhIGhyZWY9J3ZpZXcucGhwP2FpZD0kYWlkJz4mbHQ7Jmx0OzwvYT48L2xpPiI7CgoKICAgICAgICAgICAgICAgIGlmKCRjZmdfcmV3cml0ZSA9PSAnWScpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRQYWdlTGlzdCA9IHByZWdfcmVwbGFjZSgiIy5waHBcP2FpZD0oXGQrKSNpIiwgJy1cXDEtMS5odG1sJywgJFBhZ2VMaXN0KTsKCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAkUGFnZUxpc3QuPSI8bGkgY2xhc3M9J3BnTmV4dCBwZ0VtcHR5Jz48YSBocmVmPSd2aWV3LnBocD9haWQ9JGFpZCZwYWdlbm89JG5QYWdlJz4mbHQ7Jmx0OzwvYT48L2xpPiI7CgoKICAgICAgICAgICAgICAgIGlmKCRjZmdfcmV3cml0ZSA9PSAnWScpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRQYWdlTGlzdCA9IHN0cl9yZXBsYWNlKCIucGhwP2FpZD0iLCAiLSIsICRQYWdlTGlzdCk7CgoKICAgICAgICAgICAgICAgICAgICAkUGFnZUxpc3QgPSAgcHJlZ19yZXBsYWNlKCIjJnBhZ2Vubz0oXGQrKSNpIiwgJy1cXDEuaHRtbCcsICRQYWdlTGlzdCk7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICB9CgoKICAgICAgICB9CgoKICAgICAgICBmb3IoJGk9MTskaTw9JHRvdGFsUGFnZTskaSsrKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCRpPT0xKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgaWYoJG5vd1BhZ2UhPTEpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaSBjbGFzcz0ncGFnZS1udW1iZXInPjxhIGhyZWY9J3ZpZXcucGhwP2FpZD0kYWlkJz4xPC9hPjwvbGk+IjsKCgogICAgICAgICAgICAgICAgICAgIGlmKCRjZmdfcmV3cml0ZSA9PSAnWScpCgoKICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgJFBhZ2VMaXN0ID0gcHJlZ19yZXBsYWNlKCIjLnBocFw/YWlkPShcZCspI2kiLCAnLVxcMS0xLmh0bWwnLCAkUGFnZUxpc3QpOwoKCiAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgJFBhZ2VMaXN0Lj0iPGxpIGNsYXNzPVwicGFnZS1udW1iZXIgcGdDdXJyZW50XCI+PGE+MTwvYT48L2xpPiI7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJG4gPSAkaTsKCgogICAgICAgICAgICAgICAgaWYoJG5vd1BhZ2UhPSRpKQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAkUGFnZUxpc3QuPSI8bGk+PGEgaHJlZj0ndmlldy5waHA/YWlkPSRhaWQmcGFnZW5vPSRpJz4iLiRuLiI8L2E+PC9saT4iOwoKCiAgICAgICAgICAgICAgICAgICAgaWYoJGNmZ19yZXdyaXRlID09ICdZJykKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkUGFnZUxpc3QgPSBzdHJfcmVwbGFjZSgiLnBocD9haWQ9IiwgIi0iLCAkUGFnZUxpc3QpOwoKCiAgICAgICAgICAgICAgICAgICAgICAgICRQYWdlTGlzdCA9ICBwcmVnX3JlcGxhY2UoIiMmcGFnZW5vPShcZCspI2kiLCAnLVxcMS5odG1sJywgJFBhZ2VMaXN0KTsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaSBjbGFzcz1cInBhZ2UtbnVtYmVyIHBnQ3VycmVudFwiPjxhIGhyZWY9JyMnPnskbn08L2E+PC9saT4iOwoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgfQoKCiAgICAgICAgaWYoJGxQYWdlIDw9ICR0b3RhbFBhZ2UpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJFBhZ2VMaXN0Lj0iPGxpIGNsYXNzPSdwZ05leHQnPjxhIGhyZWY9J3ZpZXcucGhwP2FpZD0kYWlkJnBhZ2Vubz0kbFBhZ2UnPiZndDsmZ3Q7PC9hPjwvbGk+IjsKCgogICAgICAgICAgICBpZigkY2ZnX3Jld3JpdGUgPT0gJ1knKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJFBhZ2VMaXN0ID0gc3RyX3JlcGxhY2UoIi5waHA/YWlkPSIsICItIiwgJFBhZ2VMaXN0KTsKCgogICAgICAgICAgICAgICAgJFBhZ2VMaXN0ID0gIHByZWdfcmVwbGFjZSgiIyZwYWdlbm89KFxkKykjaSIsICctXFwxLmh0bWwnLCAkUGFnZUxpc3QpOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KCgogICAgICAgIGVsc2UKCgogICAgICAgIHsKCgogICAgICAgICAgICAkUGFnZUxpc3QuPSAiPGxpIGNsYXNzPSdwZ05leHQnPjxhIGhyZWY9JyMnPiZndDsmZ3Q7PC9hPjwvbGk+IjsKCgogICAgICAgIH0KCgogICAgICAgIHJldHVybiAkUGFnZUxpc3Q7CgoKICAgIH0KCgoKCgogICAgLyoqCgoKICAgICAqICDojrflvpfpnZnmgIHpobXpnaLliIbpobXliJfooagKCgogICAgICoKCgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKCgogICAgICogQHBhcmFtICAgICBpbnQgICAkdG90YWxQYWdlICDmgLvpobXmlbAKCgogICAgICogQHBhcmFtICAgICBpbnQgICAkbm93UGFnZSAg5b2T5YmN6aG15pWwCgoKICAgICAqIEBwYXJhbSAgICAgaW50ICAgJGFpZCAg5paH5qGjaWQKCgogICAgICogQHJldHVybiAgICBzdHJpbmcKCgogICAgICovCgoKICAgIGZ1bmN0aW9uIEdldFBhZ2VicmVhaygkdG90YWxQYWdlLCAkbm93UGFnZSwgJGFpZCkKCgogICAgewoKCiAgICAgICAgaWYoJHRvdGFsUGFnZT09MSkKCgogICAgICAgIHsKCgogICAgICAgICAgICByZXR1cm4gIiI7CgoKICAgICAgICB9CgoKICAgICAgICAvLyRQYWdlTGlzdCA9ICI8bGk+PGE+5YWxIi4kdG90YWxQYWdlLiLpobU6IDwvYT48L2xpPiI7CgoKICAgICAgICAkblBhZ2UgPSAkbm93UGFnZS0xOwoKCiAgICAgICAgJGxQYWdlID0gJG5vd1BhZ2UrMTsKCgogICAgICAgIGlmKCRub3dQYWdlPT0xKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaT48YSBocmVmPScjJz7kuIrkuIDpobU8L2E+PC9saT4iOwoKCiAgICAgICAgfQoKCiAgICAgICAgZWxzZQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCRuUGFnZT09MSkKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaT48YSBocmVmPSciLiR0aGlzLT5OYW1lRmlyc3QuIi4iLiR0aGlzLT5TaG9ydE5hbWUuIic+5LiK5LiA6aG1PC9hPjwvbGk+IjsKCgogICAgICAgICAgICB9CgoKICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgJFBhZ2VMaXN0Lj0iPGxpPjxhIGhyZWY9JyIuJHRoaXMtPk5hbWVGaXJzdC4iXyIuJG5QYWdlLiIuIi4kdGhpcy0+U2hvcnROYW1lLiInPuS4iuS4gOmhtTwvYT48L2xpPiI7CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgfQoKCiAgICAgICAgLy9mb3IoJGk9MTskaTw9JHRvdGFsUGFnZTskaSsrKQoKCgoKCiAgICAgICAgJHRvdGFsX2xpc3Q9MzsgLy/mmL7npLo55Liq77yMNCoyKzE9OSDlj6/ku6XmoLnmja7pnIDopoHoh6rooYzkv67mlLnvvIzmnIDlpb3mmK/lpYfmlbAKCgoKCgogICAgICAgIGlmKCRub3dQYWdlID49ICR0b3RhbF9saXN0KXsKCgoKCgogICAgICAgICAgICAkaSA9ICRub3dQYWdlLTE7IC8v5YmN5ZCOOOS4qu+8jO+8iDktMe+8iS8gMj00IAoKCgoKCiAgICAgICAgICAgICR0b3RhbF9saXN0ID0gJG5vd1BhZ2UrMTsgLy/liY3lkI405Liq77yM77yIOS0x77yJLyAyPTQgCgoKCgoKICAgICAgICAgICAgaWYoJHRvdGFsX2xpc3QgPj0gJHRvdGFsUGFnZSkKCgoKCgogICAgICAgICAgICAkdG90YWxfbGlzdCA9ICR0b3RhbFBhZ2U7CgoKCgoKICAgICAgICB9ZWxzZXsKCgoKCgogICAgICAgICAgICAkaT0xOwoKCgoKCiAgICAgICAgICAgIGlmKCR0b3RhbF9saXN0ID49ICR0b3RhbFBhZ2UpCgoKCgoKICAgICAgICAgICAgJHRvdGFsX2xpc3QgPSAkdG90YWxQYWdlOwoKCgoKCiAgICAgICAgfQoKCgoKCiAgICAgICAgZm9yKCRpOyRpPD0kdG90YWxfbGlzdDskaSsrKQoKCgoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCRpPT0xKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgaWYoJG5vd1BhZ2UhPTEpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaT48YSBocmVmPSciLiR0aGlzLT5OYW1lRmlyc3QuIi4iLiR0aGlzLT5TaG9ydE5hbWUuIic+MTwvYT48L2xpPiI7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAkUGFnZUxpc3QuPSI8bGkgY2xhc3M9XCJ0aGlzY2xhc3NcIj48YSBocmVmPScjJz4xPC9hPjwvbGk+IjsKCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICBlbHNlCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAkbiA9ICRpOwoKCiAgICAgICAgICAgICAgICBpZigkbm93UGFnZSE9JGkpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaT48YSBocmVmPSciLiR0aGlzLT5OYW1lRmlyc3QuIl8iLiRpLiIuIi4kdGhpcy0+U2hvcnROYW1lLiInPiIuJG4uIjwvYT48L2xpPiI7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAkUGFnZUxpc3QuPSI8bGkgY2xhc3M9XCJ0aGlzY2xhc3NcIj48YSBocmVmPScjJz57JG59PC9hPjwvbGk+IjsKCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KCgogICAgICAgIGlmKCRsUGFnZSA8PSAkdG90YWxQYWdlKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICRQYWdlTGlzdC49IjxsaT48YSBocmVmPSciLiR0aGlzLT5OYW1lRmlyc3QuIl8iLiRsUGFnZS4iLiIuJHRoaXMtPlNob3J0TmFtZS4iJz7kuIvkuIDpobU8L2E+PC9saT4iOwoKCiAgICAgICAgfQoKCiAgICAgICAgZWxzZQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICRQYWdlTGlzdC49ICI8bGk+PGEgaHJlZj0nIyc+5LiL5LiA6aG1PC9hPjwvbGk+IjsKCgogICAgICAgIH0KCgogICAgICAgIHJldHVybiAkUGFnZUxpc3Q7CgoKICAgIH0KCgoKCgogICAgLyoqCgoKICAgICAqICDojrflvpfliqjmgIHpobXpnaLlsI/moIfpopgKCgogICAgICoKCgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKCgogICAgICogQHBhcmFtICAgICBzdHJpbmcgICRzdHlsZU5hbWUgIOexu+Wei+WQjeensAoKCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgJHBhZ2VObyAg6aG156CB5pWwCgoKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCgoKICAgICAqLwoKCiAgICBmdW5jdGlvbiBHZXRQYWdlVGl0bGVzRE0oJHN0eWxlTmFtZSwgJHBhZ2VObykKCgogICAgewoKCiAgICAgICAgaWYoJHRoaXMtPlRvdGFsUGFnZT09MSkKCgogICAgICAgIHsKCgogICAgICAgICAgICByZXR1cm4gIiI7CgoKICAgICAgICB9CgoKICAgICAgICBpZihjb3VudCgkdGhpcy0+U3BsaXRUaXRsZXMpPT0wKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIHJldHVybiAiIjsKCgogICAgICAgIH0KCgogICAgICAgICRpPTE7CgoKICAgICAgICAkYWlkID0gJHRoaXMtPkFyY0lEOwoKCiAgICAgICAgaWYoJHN0eWxlTmFtZT09J2xpbmsnKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgICRyZXZhbHVlID0gIiI7CgoKICAgICAgICAgICAgZm9yZWFjaCgkdGhpcy0+U3BsaXRUaXRsZXMgYXMgJGs9PiR2KQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgaWYoJGk9PTEpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRyZXZhbHVlIC49ICI8Yj48bGk+PHNwYW4+IOesrHskaX3pobXvvJo8L3NwYW4+PGEgaHJlZj0ndmlldy5waHA/YWlkPSRhaWQmcGFnZW5vPSRpJz4kdjwvYT48L2I+PC9saT4gXHJcbiI7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICBpZigkcGFnZU5vPT0kaSkKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkcmV2YWx1ZSAuPSAiPGxpPjxiPjxzcGFuPiDnrKx7JGl96aG177yaPC9zcGFuPiR2PC9iPjwvbGk+IFxyXG4iOwoKCiAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgICAgICRyZXZhbHVlIC49ICI8bGk+PHNwYW4+IOesrHskaX3pobXvvJo8L3NwYW4+PGEgaHJlZj0ndmlldy5waHA/YWlkPSRhaWQmcGFnZW5vPSRpJz4kdjwvYT48L2xpPiBcclxuIjsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAkaSsrOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KCgogICAgICAgIGVsc2UKCgogICAgICAgIHsKCgogICAgICAgICAgICAkcmV2YWx1ZSA9ICI8c2VsZWN0IGlkPSdkZWRlcGFnZXRpdGxlcycgb25jaGFuZ2U9J2xvY2F0aW9uLmhyZWY9dGhpcy5vcHRpb25zW3RoaXMuc2VsZWN0ZWRJbmRleF0udmFsdWU7Jz5cclxuIjsKCgogICAgICAgICAgICBmb3JlYWNoKCR0aGlzLT5TcGxpdFRpdGxlcyBhcyAkaz0+JHYpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICBpZigkaT09MSkKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgJHJldmFsdWUgLj0gIjxvcHRpb24gdmFsdWU9JyIuJHRoaXMtPkZpZWxkc1sncGhwdXJsJ10uIi92aWV3LnBocD9haWQ9JGFpZCZwYWdlbm89JGknPnskaX3jgIF7JHZ9PC9vcHRpb24+XHJcbiI7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgZWxzZQoKCiAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICBpZigkcGFnZU5vPT0kaSkKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkcmV2YWx1ZSAuPSAiPG9wdGlvbiB2YWx1ZT0nIi4kdGhpcy0+RmllbGRzWydwaHB1cmwnXS4iL3ZpZXcucGhwP2FpZD0kYWlkJnBhZ2Vubz0kaScgc2VsZWN0ZWQ+eyRpfeOAgXskdn08L29wdGlvbj5cclxuIjsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkcmV2YWx1ZSAuPSAiPG9wdGlvbiB2YWx1ZT0nIi4kdGhpcy0+RmllbGRzWydwaHB1cmwnXS4iL3ZpZXcucGhwP2FpZD0kYWlkJnBhZ2Vubz0kaSc+eyRpfeOAgXskdn08L29wdGlvbj5cclxuIjsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAkaSsrOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgICAgICAkcmV2YWx1ZSAuPSAiPC9zZWxlY3Q+XHJcbiI7CgoKICAgICAgICB9CgoKICAgICAgICByZXR1cm4gJHJldmFsdWU7CgoKICAgIH0KCgoKCgogICAgLyoqCgoKICAgICAqICDojrflvpfpnZnmgIHpobXpnaLlsI/moIfpopgKCgogICAgICoKCgogICAgICogQGFjY2VzcyAgICBwdWJsaWMKCgogICAgICogQHBhcmFtICAgICBzdHJpbmcgICRzdHlsZU5hbWUgIOexu+Wei+WQjeensAoKCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgJHBhZ2VObyAg6aG156CB5pWwCgoKICAgICAqIEByZXR1cm4gICAgc3RyaW5nCgoKICAgICAqLwoKCiAgICBmdW5jdGlvbiBHZXRQYWdlVGl0bGVzU1QoJHN0eWxlTmFtZSwgJHBhZ2VObykKCgogICAgewoKCiAgICAgICAgaWYoJHRoaXMtPlRvdGFsUGFnZT09MSkKCgogICAgICAgIHsKCgogICAgICAgICAgICByZXR1cm4gIiI7CgoKICAgICAgICB9CgoKICAgICAgICBpZihjb3VudCgkdGhpcy0+U3BsaXRUaXRsZXMpPT0wKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIHJldHVybiAiIjsKCgogICAgICAgIH0KCgogICAgICAgICRpPTE7CgoKICAgICAgICBpZigkc3R5bGVOYW1lPT0nbGluaycpCgoKICAgICAgICB7CgoKICAgICAgICAgICAgJHJldmFsdWUgPSAiIjsKCgogICAgICAgICAgICBmb3JlYWNoKCR0aGlzLT5TcGxpdFRpdGxlcyBhcyAkaz0+JHYpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICBpZigkaT09MSkKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgJHJldmFsdWUgLj0gIuesrHskaX3pobU8YSBocmVmPSciLiR0aGlzLT5OYW1lRmlyc3QuIi4iLiR0aGlzLT5TaG9ydE5hbWUuIic+JHY8L2E+IFxyXG4iOwoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgaWYoJHBhZ2VObz09JGkpCgoKICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgJHJldmFsdWUgLj0gIiAkdiBcclxuIjsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkcmV2YWx1ZSAuPSAi56yseyRpfemhtTo8YSBocmVmPSciLiR0aGlzLT5OYW1lRmlyc3QuIl8iLiRpLiIuIi4kdGhpcy0+U2hvcnROYW1lLiInPiR2PC9hPiBcclxuIjsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICAkaSsrOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KCgogICAgICAgIGVsc2UKCgogICAgICAgIHsKCgogICAgICAgICAgICAkcmV2YWx1ZSA9ICI8c2VsZWN0IGlkPSdkZWRlcGFnZXRpdGxlcycgb25jaGFuZ2U9J2xvY2F0aW9uLmhyZWY9dGhpcy5vcHRpb25zW3RoaXMuc2VsZWN0ZWRJbmRleF0udmFsdWU7Jz5cclxuIjsKCgogICAgICAgICAgICBmb3JlYWNoKCR0aGlzLT5TcGxpdFRpdGxlcyBhcyAkaz0+JHYpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICBpZigkaT09MSkKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgJHJldmFsdWUgLj0gIjxvcHRpb24gdmFsdWU9JyIuJHRoaXMtPk5hbWVGaXJzdC4iLiIuJHRoaXMtPlNob3J0TmFtZS4iJz57JGl944CBeyR2fTwvb3B0aW9uPlxyXG4iOwoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgaWYoJHBhZ2VObz09JGkpCgoKICAgICAgICAgICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgICAgICAgICAgJHJldmFsdWUgLj0gIjxvcHRpb24gdmFsdWU9JyIuJHRoaXMtPk5hbWVGaXJzdC4iXyIuJGkuIi4iLiR0aGlzLT5TaG9ydE5hbWUuIicgc2VsZWN0ZWQ+eyRpfeOAgXskdn08L29wdGlvbj5cclxuIjsKCgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgICAgIGVsc2UKCgogICAgICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICAgICAkcmV2YWx1ZSAuPSAiPG9wdGlvbiB2YWx1ZT0nIi4kdGhpcy0+TmFtZUZpcnN0LiJfIi4kaS4iLiIuJHRoaXMtPlNob3J0TmFtZS4iJz57JGl944CBeyR2fTwvb3B0aW9uPlxyXG4iOwoKCiAgICAgICAgICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICAgICB9CgoKICAgICAgICAgICAgICAgICRpKys7CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICRyZXZhbHVlIC49ICI8L3NlbGVjdD5cclxuIjsKCgogICAgICAgIH0KCgogICAgICAgIHJldHVybiAkcmV2YWx1ZTsKCgogICAgfQoKCgoKCiAgICAvKioKCgogICAgICog6auY5Lqu6Zeu6aKY5L+u5q2jLCDmjpLpmaRhbHQgdGl0bGUgPGE+PC9hPuebtOaOpeeahOWtl+espuabv+aNogoKCiAgICAgKgoKCiAgICAgKiBAcGFyYW0gc3RyaW5nICRrdwoKCiAgICAgKiBAcGFyYW0gc3RyaW5nICRib2R5CgoKICAgICAqIEByZXR1cm4gc3RyaW5nCgoKICAgICAqLwoKCiAgICBmdW5jdGlvbiBSZXBsYWNlS2V5d29yZCgka3csJiRib2R5KQoKCiAgICB7CgoKICAgICAgICBnbG9iYWwgJGNmZ19jbXNwYXRoOwoKCiAgICAgICAgJG1heGtleSA9IDU7CgoKICAgICAgICAka3dzID0gZXhwbG9kZSgiLCIsdHJpbSgka3cpKTsgICAgLy/ku6XliIblpb3kuLrpl7TpmpTnrKYKCgogICAgICAgICRpPTA7CgoKICAgICAgICAka2FyciA9ICRrYWFyciA9ICRHTE9CQUxTWydyZXBsYWNlZCddID0gYXJyYXkoKTsKCgoKCgogICAgICAgIC8v5pqC5pe25bGP6JS96LaF6ZO+5o6lCgoKICAgICAgICAkYm9keSA9IHByZWdfcmVwbGFjZSgiIyg8YSguKikpKD4pKC4qKSg8KShcL2E+KSNpc1UiLCAnXFwxLV0tXFw0LVstXFw2JywgJGJvZHkpOwoKCgoKCiAgICAgICAgLyoKCgogICAgICAgIGZvcmVhY2goJGt3cyBhcyAkaykKCgogICAgICAgIHsKCgogICAgICAgICAgICAkayA9IHRyaW0oJGspOwoKCiAgICAgICAgICAgIGlmKCRrIT0iIikKCgogICAgICAgICAgICB7CgoKICAgICAgICAgICAgICAgIGlmKCRpID4gJG1heGtleSkKCgogICAgICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgJG15cm93ID0gJHRoaXMtPmRzcWwtPkdldE9uZSgiU0VMRUNUICogRlJPTSAjQF9fa2V5d29yZHMgV0hFUkUga2V5d29yZD0nJGsnIEFORCBycHVybDw+JycgIik7CgoKICAgICAgICAgICAgICAgIGlmKGlzX2FycmF5KCRteXJvdykpCgoKICAgICAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgICAgICRrYXJyW10gPSAkazsKCgogICAgICAgICAgICAgICAgICAgICRHTE9CQUxTWydyZXBsYWNlZCddWyRrXSA9IDA7CgoKICAgICAgICAgICAgICAgICAgICAka2FhcnJbXSA9ICI8YSBocmVmPSd7JG15cm93WydycHVybCddfSc+PHU+JGs8L3U+PC9hPiI7CgoKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgJGkrKzsKCgogICAgICAgICAgICB9CgoKICAgICAgICB9CgoKICAgICAgICAqLwoKCiAgICAgICAgJHF1ZXJ5ID0gIlNFTEVDVCAqIEZST00gI0BfX2tleXdvcmRzIFdIRVJFIHJwdXJsPD4nJyBPUkRFUiBCWSByYW5rIERFU0MiOyAKCgogICAgICAgICR0aGlzLT5kc3FsLT5TZXRRdWVyeSgkcXVlcnkpOwoKCiAgICAgICAgJHRoaXMtPmRzcWwtPkV4ZWN1dGUoKTsKCgogICAgICAgIHdoaWxlKCRyb3cgPSAkdGhpcy0+ZHNxbC0+R2V0QXJyYXkoKSkKCgogICAgICAgIHsKCgogICAgICAgICAgICAka2V5ID0gdHJpbSgkcm93WydrZXl3b3JkJ10pOwoKCiAgICAgICAgICAgICRrZXlfdXJsPXRyaW0oJHJvd1sncnB1cmwnXSk7CgoKICAgICAgICAgICAgJGthcnJbXSA9ICRrZXk7CgoKICAgICAgICAgICAgJGthYXJyW10gPSAiPGEgaHJlZj0nJGtleV91cmwnIHRhcmdldD0nX2JsYW5rJz48dT4ka2V5PC91PjwvYT4iOwoKCiAgICAgICAgfQoKCgoKCiAgICAgICAgLy8g6L+Z6YeM5Y+v6IO95Lya5pyJ6ZSZ6K+vCgoKICAgICAgICAkYm9keSA9IEBwcmVnX3JlcGxhY2UoIiMoXnw+KShbXjxdKykoPz08fCQpI3NVZSIsICJfaGlnaGxpZ2h0KCdcXDInLCBcJGthcnIsIFwka2FhcnIsICdcXDEnKSIsICRib2R5KTsKCgoKCgogICAgICAgIC8v5oGi5aSN6LaF6ZO+5o6lCgoKICAgICAgICAkYm9keSA9IHByZWdfcmVwbGFjZSgiIyg8YSguKikpLVxdLSguKiktXFstKFwvYT4pI2lzVSIsICdcXDE+XFwzPFxcNCcsICRib2R5KTsKCgogICAgICAgIHJldHVybiAkYm9keTsKCgogICAgfQoKCgoKCgoKCn0vL0VuZCBBcmNoaXZlcwoKCgoKCi8v6auY5Lqu5LiT55SoLCDmm7/mjaLlpJrmrKHmmK/lj6/og73kuI3og73ovr7liLDmnIDlpJrmrKEKCgpmdW5jdGlvbiBfaGlnaGxpZ2h0KCRzdHJpbmcsICR3b3JkcywgJHJlc3VsdCwgJHByZSkKCgp7CgoKICAgIGdsb2JhbCAkY2ZnX3JlcGxhY2VfbnVtOwoKCiAgICAkc3RyaW5nID0gc3RyX3JlcGxhY2UoJ1wiJywgJyInLCAkc3RyaW5nKTsKCgogICAgaWYoJGNmZ19yZXBsYWNlX251bSA+IDApCgoKICAgIHsKCgogICAgICAgIGZvcmVhY2ggKCR3b3JkcyBhcyAka2V5ID0+ICR3b3JkKQoKCiAgICAgICAgewoKCiAgICAgICAgICAgIGlmKCRHTE9CQUxTWydyZXBsYWNlZCddWyR3b3JkXSA9PSAxKQoKCiAgICAgICAgICAgIHsKCgogICAgICAgICAgICAgICAgY29udGludWU7CgoKICAgICAgICAgICAgfQoKCiAgICAgICAgICAgICRzdHJpbmcgPSBwcmVnX3JlcGxhY2UoIiMiLnByZWdfcXVvdGUoJHdvcmQpLiIjIiwgJHJlc3VsdFska2V5XSwgJHN0cmluZywgJGNmZ19yZXBsYWNlX251bSk7CgoKICAgICAgICAgICAgaWYoc3RycG9zKCRzdHJpbmcsICR3b3JkKSAhPT0gRkFMU0UpCgoKICAgICAgICAgICAgewoKCiAgICAgICAgICAgICAgICAkR0xPQkFMU1sncmVwbGFjZWQnXVskd29yZF0gPSAxOwoKCiAgICAgICAgICAgIH0KCgogICAgICAgIH0KCgogICAgfQoKCiAgICBlbHNlCgoKICAgIHsKCgogICAgICAgICRzdHJpbmcgPSBzdHJfcmVwbGFjZSgkd29yZHMsICRyZXN1bHQsICRzdHJpbmcpOwoKCiAgICB9CgoKICAgIHJldHVybiAkcHJlLiRzdHJpbmc7CgoKfQ==
</file>
<file type='file' name='../include/typelink.class.php'>
PD9waHAgICBpZighZGVmaW5lZCgnREVERUlOQycpKSBleGl0KCJSZXF1ZXN0IEVycm9yISIpOwovKioKICog5qCP55uu6L+e5o6lCiAqCiAqIEB2ZXJzaW9uICAgICAgICAkSWQ6IHR5cGVsaW5rLmNsYXNzLnBocCAxIDE1OjIxIDIwMTDlubQ35pyINeaXpVogdGlhbnlhICQKICogQHBhY2thZ2UgICAgICAgIERlZGVDTVMuTGlicmFyaWVzCiAqIEBjb3B5cmlnaHQgICAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDEwLCBEZXNEZXYsIEluYy4KICogQGxpY2Vuc2UgICAgICAgIGh0dHA6Ly9oZWxwLmRlZGVjbXMuY29tL3VzZXJzZ3VpZGUvbGljZW5zZS5odG1sCiAqIEBsaW5rICAgICAgICAgICBodHRwOi8vd3d3LmRlZGVjbXMuY29tCiAqLwpyZXF1aXJlX29uY2UoREVERUlOQy4iL2NoYW5uZWx1bml0LmZ1bmMucGhwIik7CgovKioKICog5qCP55uu6L+e5o6l57G7CiAqCiAqIEBwYWNrYWdlICAgICAgICAgIFR5cGVMaW5rCiAqIEBzdWJwYWNrYWdlICAgICAgIERlZGVDTVMuTGlicmFyaWVzCiAqIEBsaW5rICAgICAgICAgICAgIGh0dHA6Ly93d3cuZGVkZWNtcy5jb20KICovCmNsYXNzIFR5cGVMaW5rCnsKICAgIHZhciAkdHlwZURpcjsKICAgIHZhciAkZHNxbDsKICAgIHZhciAkVHlwZUlEOwogICAgdmFyICRiYXNlRGlyOwogICAgdmFyICRtb2REaXI7CiAgICB2YXIgJGluZGV4VXJsOwoJdmFyICRpbmRleE1vYmlsZVVybDsKICAgIHZhciAkaW5kZXhOYW1lOwogICAgdmFyICRUeXBlSW5mb3M7CiAgICB2YXIgJFNwbGl0U3ltYm9sOwogICAgdmFyICR2YWx1ZVBvc2l0aW9uOwogICAgdmFyICR2YWx1ZVBvc2l0aW9uTmFtZTsKICAgIHZhciAkT3B0aW9uQXJyYXlMaXN0OwoKICAgIC8v5p6E6YCg5Ye95pWwLy8vLy8vLwogICAgLy9waHA15p6E6YCg5Ye95pWwCiAgICBmdW5jdGlvbiBfX2NvbnN0cnVjdCgkdHlwZWlkKQogICAgewogICAgICAgICR0aGlzLT5pbmRleFVybCA9ICRHTE9CQUxTWydjZmdfYmFzZWhvc3QnXS4kR0xPQkFMU1snY2ZnX2luZGV4dXJsJ107CgkJJHRoaXMtPmluZGV4TW9iaWxlVXJsID0gJEdMT0JBTFNbJ2NmZ193YXB1cmwnXTsKICAgICAgICAkdGhpcy0+aW5kZXhOYW1lID0gJEdMT0JBTFNbJ2NmZ19pbmRleG5hbWUnXTsKICAgICAgICAkdGhpcy0+YmFzZURpciA9ICRHTE9CQUxTWydjZmdfYmFzZWRpciddOwogICAgICAgICR0aGlzLT5tb2REaXIgPSAkR0xPQkFMU1snY2ZnX3RlbXBsZXRzX2RpciddOwogICAgICAgICR0aGlzLT5TcGxpdFN5bWJvbCA9ICRHTE9CQUxTWydjZmdfbGlzdF9zeW1ib2wnXTsKICAgICAgICAkdGhpcy0+ZHNxbCA9ICRHTE9CQUxTWydkc3FsJ107CiAgICAgICAgJHRoaXMtPlR5cGVJRCA9ICR0eXBlaWQ7CiAgICAgICAgJHRoaXMtPnZhbHVlUG9zaXRpb24gPSAnJzsKICAgICAgICAkdGhpcy0+dmFsdWVQb3NpdGlvbk5hbWUgPSAnJzsKICAgICAgICAkdGhpcy0+dHlwZURpciA9ICcnOwogICAgICAgICR0aGlzLT5PcHRpb25BcnJheUxpc3QgPSAnJzsKCiAgICAgICAgLy/ovb3lhaXnsbvnm67kv6Hmga8KICAgICAgICAkcXVlcnkgPSAiU0VMRUNUIHRwLiosY2gudHlwZW5hbWUgYXMgY3R5cGVuYW1lLGNoLmFkZHRhYmxlLGNoLmlzc3lzdGVtIEZST00gYCNAX19hcmN0eXBlYCB0cCBsZWZ0IGpvaW4gYCNAX19jaGFubmVsdHlwZWAgY2gKICAgICAgICBvbiBjaC5pZD10cC5jaGFubmVsdHlwZSAgV0hFUkUgdHAuaWQ9JyR0eXBlaWQnICI7CiAgICAgICAgaWYoJHR5cGVpZCA+IDApCiAgICAgICAgewogICAgICAgICAgICAkdGhpcy0+VHlwZUluZm9zID0gJHRoaXMtPmRzcWwtPkdldE9uZSgkcXVlcnkpOwogICAgICAgICAgICBpZihpc19hcnJheSgkdGhpcy0+VHlwZUluZm9zKSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJHRoaXMtPlR5cGVJbmZvc1sndGVtcGluZGV4J10gPSBNZlRlbXBsZXQoJHRoaXMtPlR5cGVJbmZvc1sndGVtcGluZGV4J10pOwogICAgICAgICAgICAgICAgJHRoaXMtPlR5cGVJbmZvc1sndGVtcGxpc3QnXSA9IE1mVGVtcGxldCgkdGhpcy0+VHlwZUluZm9zWyd0ZW1wbGlzdCddKTsKICAgICAgICAgICAgICAgICR0aGlzLT5UeXBlSW5mb3NbJ3RlbXBhcnRpY2xlJ10gPSBNZlRlbXBsZXQoJHRoaXMtPlR5cGVJbmZvc1sndGVtcGFydGljbGUnXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy/lr7nkuo7kvb/nlKjpu5jorqTmnoTpgKDlh73mlbDnmoTmg4XlhrUKICAgIC8vR2V0UG9zaXRpb25MaW5rKCnlsIbkuI3lj6/nlKgKICAgIGZ1bmN0aW9uIFR5cGVMaW5rKCR0eXBlaWQpCiAgICB7CiAgICAgICAgJHRoaXMtPl9fY29uc3RydWN0KCR0eXBlaWQpOwogICAgfQoKICAgIC8v5YWz6Zet5pWw5o2u5bqT6L+e5o6l77yM5p6Q5pS+6LWE5rqQCiAgICBmdW5jdGlvbiBDbG9zZSgpCiAgICB7CiAgICB9CgogICAgLy/ph43orr7nsbvnm65JRAogICAgZnVuY3Rpb24gU2V0VHlwZUlEKCR0eXBlaWQpCiAgICB7CiAgICAgICAgJHRoaXMtPlR5cGVJRCA9ICR0eXBlaWQ7CiAgICAgICAgJHRoaXMtPnZhbHVlUG9zaXRpb24gPSAiIjsKICAgICAgICAkdGhpcy0+dmFsdWVQb3NpdGlvbk5hbWUgPSAiIjsKICAgICAgICAkdGhpcy0+dHlwZURpciA9ICIiOwogICAgICAgICR0aGlzLT5PcHRpb25BcnJheUxpc3QgPSAiIjsKCiAgICAgICAgLy/ovb3lhaXnsbvnm67kv6Hmga8KICAgICAgICAkcXVlcnkgPSAiCiAgICAgICAgU0VMRUNUICNAX19hcmN0eXBlLiosI0BfX2NoYW5uZWx0eXBlLnR5cGVuYW1lIGFzIGN0eXBlbmFtZQogICAgICAgIEZST00gI0BfX2FyY3R5cGUgbGVmdCBqb2luICNAX19jaGFubmVsdHlwZQogICAgICAgIG9uICNAX19jaGFubmVsdHlwZS5pZD0jQF9fYXJjdHlwZS5jaGFubmVsdHlwZSBXSEVSRSAjQF9fYXJjdHlwZS5pZD0nJHR5cGVpZCcgIjsKICAgICAgICAkdGhpcy0+ZHNxbC0+U2V0UXVlcnkoJHF1ZXJ5KTsKICAgICAgICAkdGhpcy0+VHlwZUluZm9zID0gJHRoaXMtPmRzcWwtPkdldE9uZSgpOwogICAgfQoKICAgIC8v6I635b6X6L+Z5Liq57G755uu55qE6Lev5b6ECiAgICBmdW5jdGlvbiBHZXRUeXBlRGlyKCkKICAgIHsKICAgICAgICBpZihlbXB0eSgkdGhpcy0+VHlwZUluZm9zWyd0eXBlZGlyJ10pKQogICAgICAgIHsKICAgICAgICAgICAgcmV0dXJuICRHTE9CQUxTWydjZmdfY21zcGF0aCddLiRHTE9CQUxTWydjZmdfYXJjZGlyJ107CiAgICAgICAgfQogICAgICAgIGVsc2UKICAgICAgICB7CiAgICAgICAgICAgIHJldHVybiAkdGhpcy0+VHlwZUluZm9zWyd0eXBlZGlyJ107CiAgICAgICAgfQogICAgfQoKICAgIC8v6I635b6X5p+Q57G755uu55qE6ZO+5o6l5YiX6KGoIOWmgu+8muexu+ebruS4gD4+57G755uu5LqMPj4g6L+Z5qC355qE5b2i5byPCiAgICAvL2lzbGluayDooajnpLrov5Tlm57nmoTliJfooajmmK/lkKbluKbov57mjqUKICAgIGZ1bmN0aW9uIEdldFBvc2l0aW9uTGluaygkaXNsaW5rPXRydWUpCiAgICB7CiAgICAgICAgaWYgKCBkZWZpbmVkKCdERURFTU9CJykgKQogICAgICAgIHsKICAgICAgICAgICAgLy8gJGluZGV4cGFnZSA9ICI8YSBocmVmPSdpbmRleC5waHAnIHRpdGxlPSciLiR0aGlzLT5pbmRleE5hbWUuIic+Ii4kdGhpcy0+aW5kZXhOYW1lLiI8L2E+IjsKCQkJJGluZGV4cGFnZSA9ICI8YSBocmVmPSciLiR0aGlzLT5pbmRleE1vYmlsZVVybC4iJyB0aXRsZT0nIi4kdGhpcy0+aW5kZXhOYW1lLiInPiIuJHRoaXMtPmluZGV4TmFtZS4iPC9hPiI7CQkJCiAgICAgICAgfSBlbHNlewogICAgICAgICAgICAkaW5kZXhwYWdlID0gIjxhIGhyZWY9JyIuJHRoaXMtPmluZGV4VXJsLiInIHRpdGxlPSciLiR0aGlzLT5pbmRleE5hbWUuIic+Ii4kdGhpcy0+aW5kZXhOYW1lLiI8L2E+IjsKICAgICAgICB9CgkJCiAgICAgICAgaWYoJHRoaXMtPnZhbHVlUG9zaXRpb24hPSIiICYmICRpc2xpbmspCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnZhbHVlUG9zaXRpb247CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYoJHRoaXMtPnZhbHVlUG9zaXRpb25OYW1lIT0iIiAmJiAhJGlzbGluaykKICAgICAgICB7CgkJCQogICAgICAgICAgICByZXR1cm4gJHRoaXMtPnZhbHVlUG9zaXRpb25OYW1lOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmKCR0aGlzLT5UeXBlSUQ9PTApCiAgICAgICAgewogICAgICAgICAgICBpZigkaXNsaW5rKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICByZXR1cm4gJGluZGV4cGFnZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHJldHVybiAi5rKh5oyH5a6a5YiG57G777yBIjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewoJCQkKICAgICAgICAgICAgaWYoJGlzbGluaykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJHRoaXMtPnZhbHVlUG9zaXRpb24gPSAkdGhpcy0+R2V0T25lVHlwZUxpbmsoJHRoaXMtPlR5cGVJbmZvcyk7CQkJCQogICAgICAgICAgICAgICAgaWYoJHRoaXMtPlR5cGVJbmZvc1sncmVpZCddIT0wKQogICAgICAgICAgICAgICAgewoJCQkJCQogICAgICAgICAgICAgICAgICAgIC8v6LCD55So6YCS5b2S6YC76L6RCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPkxvZ2ljR2V0UG9zaXRpb24oJHRoaXMtPlR5cGVJbmZvc1sncmVpZCddLHRydWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHRoaXMtPnZhbHVlUG9zaXRpb24gPSAkaW5kZXhwYWdlLiR0aGlzLT5TcGxpdFN5bWJvbC4kdGhpcy0+dmFsdWVQb3NpdGlvbjsKICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+dmFsdWVQb3NpdGlvbi4kdGhpcy0+U3BsaXRTeW1ib2w7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkdGhpcy0+dmFsdWVQb3NpdGlvbk5hbWUgPSAkdGhpcy0+VHlwZUluZm9zWyd0eXBlbmFtZSddOwogICAgICAgICAgICAgICAgaWYoJHRoaXMtPlR5cGVJbmZvc1sncmVpZCddIT0wKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIC8v6LCD55So6YCS5b2S6YC76L6RCiAgICAgICAgICAgICAgICAgICAgJHRoaXMtPkxvZ2ljR2V0UG9zaXRpb24oJHRoaXMtPlR5cGVJbmZvc1sncmVpZCddLGZhbHNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcy0+dmFsdWVQb3NpdGlvbk5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy/ojrflvpflkI3lrZfliJfooagKICAgIGZ1bmN0aW9uIEdldFBvc2l0aW9uTmFtZSgpCiAgICB7CiAgICAgICAgcmV0dXJuICR0aGlzLT5HZXRQb3NpdGlvbkxpbmsoZmFsc2UpOwogICAgfQoKICAgIC8v6I635b6X5p+Q57G755uu55qE6ZO+5o6l5YiX6KGo77yM6YCS5b2S6YC76L6R6YOo5YiGCiAgICBmdW5jdGlvbiBMb2dpY0dldFBvc2l0aW9uKCRpZCwkaXNsaW5rKQogICAgewogICAgICAgICR0aGlzLT5kc3FsLT5TZXRRdWVyeSgiU0VMRUNUIGlkLHJlaWQsdHlwZW5hbWUsdHlwZWRpcixpc2RlZmF1bHQsaXNwYXJ0LGRlZmF1bHRuYW1lLG5hbWVydWxlMixtb3Jlc2l0ZSxzaXRldXJsLHNpdGVwYXRoIEZST00gI0BfX2FyY3R5cGUgV0hFUkUgaWQ9JyIuJGlkLiInIik7CiAgICAgICAgJHRpbmZvcyA9ICR0aGlzLT5kc3FsLT5HZXRPbmUoKTsKICAgICAgICBpZigkaXNsaW5rKQogICAgICAgIHsKICAgICAgICAgICAgJHRoaXMtPnZhbHVlUG9zaXRpb24gPSAkdGhpcy0+R2V0T25lVHlwZUxpbmsoJHRpbmZvcykuJHRoaXMtPlNwbGl0U3ltYm9sLiR0aGlzLT52YWx1ZVBvc2l0aW9uOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICAkdGhpcy0+dmFsdWVQb3NpdGlvbk5hbWUgPSAkdGluZm9zWyd0eXBlbmFtZSddLiR0aGlzLT5TcGxpdFN5bWJvbC4kdGhpcy0+dmFsdWVQb3NpdGlvbk5hbWU7CiAgICAgICAgfQogICAgICAgIGlmKCR0aW5mb3NbJ3JlaWQnXT4wKQogICAgICAgIHsKICAgICAgICAgICAgJHRoaXMtPkxvZ2ljR2V0UG9zaXRpb24oJHRpbmZvc1sncmVpZCddLCRpc2xpbmspOwogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB9CgogICAgfQoKICAgIC8v6I635b6X5p+Q5Liq57G755uu55qE6LaF6ZO+5o6l5L+h5oGvCiAgICBmdW5jdGlvbiBHZXRPbmVUeXBlTGluaygkdHlwZWluZm9zKQogICAgewogICAgICAgICR0eXBlcGFnZSA9ICR0aGlzLT5HZXRPbmVUeXBlVXJsKCR0eXBlaW5mb3MpOwogICAgICAgICR0eXBlbGluayA9ICI8YSBocmVmPSciLiR0eXBlcGFnZS4iJyB0aXRsZT0nIi4kdHlwZWluZm9zWyd0eXBlbmFtZSddLiInPiIuJHR5cGVpbmZvc1sndHlwZW5hbWUnXS4iPC9hPiI7CiAgICAgICAgcmV0dXJuICR0eXBlbGluazsKICAgIH0KCiAgICAvL+iOt+W+l+afkOWIhuexu+i/nuaOpeeahFVSTAogICAgZnVuY3Rpb24gR2V0T25lVHlwZVVybCgkdHlwZWluZm9zKQogICAgewogICAgICAgIGlmICggZGVmaW5lZCgnREVERU1PQicpICkKICAgICAgICB7CQogICAgICAgICAgICAvL3JldHVybiAnbGlzdC5waHA/dGlkPScuJHR5cGVpbmZvc1snaWQnXTsKCQkJcmV0dXJuICR0aGlzLT5pbmRleE1vYmlsZVVybC5HZXRUeXBlVXJsKCR0eXBlaW5mb3NbJ2lkJ10sTWZUeXBlZGlyKCR0eXBlaW5mb3NbJ3R5cGVkaXInXSksJHR5cGVpbmZvc1snaXNkZWZhdWx0J10sJHR5cGVpbmZvc1snZGVmYXVsdG5hbWUnXSwkdHlwZWluZm9zWydpc3BhcnQnXSwkdHlwZWluZm9zWyduYW1lcnVsZTInXSwkdHlwZWluZm9zWydtb3Jlc2l0ZSddLCR0eXBlaW5mb3NbJ3NpdGV1cmwnXSwkdHlwZWluZm9zWydzaXRlcGF0aCddKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gR2V0VHlwZVVybCgkdHlwZWluZm9zWydpZCddLE1mVHlwZWRpcigkdHlwZWluZm9zWyd0eXBlZGlyJ10pLCR0eXBlaW5mb3NbJ2lzZGVmYXVsdCddLCR0eXBlaW5mb3NbJ2RlZmF1bHRuYW1lJ10sJHR5cGVpbmZvc1snaXNwYXJ0J10sJHR5cGVpbmZvc1snbmFtZXJ1bGUyJ10sJHR5cGVpbmZvc1snbW9yZXNpdGUnXSwkdHlwZWluZm9zWydzaXRldXJsJ10sJHR5cGVpbmZvc1snc2l0ZXBhdGgnXSk7CiAgICAgICAgfQogICAgICAgICAgICAKICAgIH0KCiAgICAvL+iOt+W+l+exu+WIq+WIl+ihqAogICAgLy9oaWQg5piv5oyH6buY6K6k6YCJ5Lit57G755uu77yMMCDooajnpLrigJzor7fpgInmi6nnsbvnm67igJ3miJbigJzkuI3pmZDnsbvnm67igJ0KICAgIC8vb3BlciDmmK/nlKjmiLflhYHorrjnrqHnkIbnmoTnsbvnm67vvIwwIOihqOekuuaJgOacieexu+ebrgogICAgLy9jaGFubmVsdHlwZSDmmK/mjIfnsbvnm67nmoTlhoXlrrnnsbvlnovvvIwwIOihqOekuuS4jemZkOmikemBkwogICAgZnVuY3Rpb24gR2V0T3B0aW9uQXJyYXkoJGhpZD0wLCRvcGVyPTAsJGNoYW5uZWx0eXBlPTAsJHVzZXJzZz0wKQogICAgewogICAgICAgIHJldHVybiAkdGhpcy0+R2V0T3B0aW9uTGlzdCgkaGlkLCRvcGVyLCRjaGFubmVsdHlwZSwkdXNlcnNnKTsKICAgIH0KCiAgICBmdW5jdGlvbiBHZXRPcHRpb25MaXN0KCRoaWQ9MCwkb3Blcj0wLCRjaGFubmVsdHlwZT0wLCR1c2Vyc2c9MCkKICAgIHsKICAgICAgICBnbG9iYWwgJGNmZ19hZG1pbl9jaGFubmVsOwogICAgICAgIGlmKGVtcHR5KCRjZmdfYWRtaW5fY2hhbm5lbCkpICRjZmdfYWRtaW5fY2hhbm5lbCA9ICdhbGwnOwogICAgICAgIAogICAgICAgIGlmKCEkdGhpcy0+ZHNxbCkgJHRoaXMtPmRzcWwgPSAkR0xPQkFMU1snZHNxbCddOwogICAgICAgICR0aGlzLT5PcHRpb25BcnJheUxpc3QgPSAnJzsKICAgICAgICAKICAgICAgICBpZigkaGlkPjApCiAgICAgICAgewogICAgICAgICAgICAkcm93ID0gJHRoaXMtPmRzcWwtPkdldE9uZSgiU0VMRUNUIGlkLHR5cGVuYW1lLGlzcGFydCxjaGFubmVsdHlwZSBGUk9NICNAX19hcmN0eXBlIFdIRVJFIGlkPSckaGlkJyIpOwogICAgICAgICAgICAkY2hhbm5lbHR5cGUgPSAkcm93WydjaGFubmVsdHlwZSddOwogICAgICAgICAgICBpZigkcm93Wydpc3BhcnQnXT09MSkgewogICAgICAgICAgICAgICAgJHRoaXMtPk9wdGlvbkFycmF5TGlzdCAuPSAiPG9wdGlvbiB2YWx1ZT0nIi4kcm93WydpZCddLiInIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOiNERkRGREI7Y29sb3I6Izg4ODg4OCcgc2VsZWN0ZWQ+Ii4kcm93Wyd0eXBlbmFtZSddLiI8L29wdGlvbj5cclxuIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICR0aGlzLT5PcHRpb25BcnJheUxpc3QgLj0gIjxvcHRpb24gdmFsdWU9JyIuJHJvd1snaWQnXS4iJyBzZWxlY3RlZD4iLiRyb3dbJ3R5cGVuYW1lJ10uIjwvb3B0aW9uPlxyXG4iOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGlmKCRjaGFubmVsdHlwZT09MCkgJGN0c3FsID0gJyc7CiAgICAgICAgZWxzZSAkY3RzcWw9IiBBTkQgY2hhbm5lbHR5cGU9JyRjaGFubmVsdHlwZScgIjsKICAgICAgICAKICAgICAgICAKICAgICAgICBpZihpc19hcnJheSgkb3BlcikgJiYgJGNmZ19hZG1pbl9jaGFubmVsICE9ICdhbGwnKQogICAgICAgIHsKICAgICAgICAgICAgaWYoIGNvdW50KCRvcGVyKSA9PSAwICkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJHF1ZXJ5ID0gIlNFTEVDVCBpZCx0eXBlbmFtZSxpc3BhcnQgRlJPTSBgI0BfX2FyY3R5cGVgIFdIRVJFIDE9MiAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJGFkbWluX2NhdGFsb2dfdG1wID0gJGFkbWluX2NhdGFsb2cgPSBqb2luKCcsJywgJG9wZXIpOwogICAgICAgICAgICAgICAgJHRoaXMtPmRzcWwtPlNldFF1ZXJ5KCJTRUxFQ1QgcmVpZCBGUk9NIGAjQF9fYXJjdHlwZWAgV0hFUkUgaWQgaW4oJGFkbWluX2NhdGFsb2cpIEdST1VQIEJZIHJlaWQgIik7CiAgICAgICAgICAgICAgICAkdGhpcy0+ZHNxbC0+RXhlY3V0ZSgpOwogICAgICAgICAgICAgICAgJHRvcGlkc3RyID0gJyc7CiAgICAgICAgICAgICAgICB3aGlsZSgkcm93ID0gJHRoaXMtPmRzcWwtPkdldE9iamVjdCgpKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGlmKCRyb3ctPnJlaWQ9PTApIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgICAgICR0b3BpZHN0ciAuPSAoJHRvcGlkc3RyPT0nJyA/ICRyb3ctPnJlaWQgOiAnLCcuJHJvdy0+cmVpZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAkYWRtaW5fY2F0YWxvZyAuPSAnLCcuJHRvcGlkc3RyOwogICAgICAgICAgICAgICAgJGFkbWluX2NhdGFsb2dzID0gZXhwbG9kZSgnLCcsICRhZG1pbl9jYXRhbG9nKTsKICAgICAgICAgICAgICAgICRhZG1pbl9jYXRhbG9ncyA9IGFycmF5X3VuaXF1ZSgkYWRtaW5fY2F0YWxvZ3MpOwogICAgICAgICAgICAgICAgJGFkbWluX2NhdGFsb2cgPSBqb2luKCcsJywgJGFkbWluX2NhdGFsb2dzKTsKICAgICAgICAgICAgICAgICRhZG1pbl9jYXRhbG9nID0gcHJlZ19yZXBsYWNlKCIvLCQvIiwgJycsICRhZG1pbl9jYXRhbG9nKTsKICAgICAgICAgICAgICAgICRxdWVyeSA9ICJTRUxFQ1QgaWQsdHlwZW5hbWUsaXNwYXJ0IEZST00gYCNAX19hcmN0eXBlYCBXSEVSRSBpc3BhcnQ8PjIgQU5EIGlkIGluKHskYWRtaW5fY2F0YWxvZ30pIEFORCByZWlkPTAgJGN0c3FsIjsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlCiAgICAgICAgewogICAgICAgICAgICAkcXVlcnkgPSAiU0VMRUNUIGlkLHR5cGVuYW1lLGlzcGFydCBGUk9NIGAjQF9fYXJjdHlwZWAgV0hFUkUgaXNwYXJ0PD4yIEFORCByZWlkPTAgJGN0c3FsIE9SREVSIEJZIHNvcnRyYW5rIEFTQyI7CiAgICAgICAgfQoKICAgICAgICAkdGhpcy0+ZHNxbC0+U2V0UXVlcnkoJHF1ZXJ5KTsKICAgICAgICAkdGhpcy0+ZHNxbC0+RXhlY3V0ZSgpOwogICAgICAgIHdoaWxlKCRyb3c9JHRoaXMtPmRzcWwtPkdldE9iamVjdCgpKQogICAgICAgIHsKICAgICAgICAgICAgaWYoJHJvdy0+aWQhPSRoaWQpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGlmKCRyb3ctPmlzcGFydD09MSkgewogICAgICAgICAgICAgICAgICAgICR0aGlzLT5PcHRpb25BcnJheUxpc3QgLj0gIjxvcHRpb24gdmFsdWU9JyIuJHJvdy0+aWQuIicgc3R5bGU9J2JhY2tncm91bmQtY29sb3I6I0VGRUZFRjtjb2xvcjojNjY2NjY2Jz4iLiRyb3ctPnR5cGVuYW1lLiI8L29wdGlvbj5cclxuIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICR0aGlzLT5PcHRpb25BcnJheUxpc3QgLj0gIjxvcHRpb24gdmFsdWU9JyIuJHJvdy0+aWQuIic+Ii4kcm93LT50eXBlbmFtZS4iPC9vcHRpb24+XHJcbiI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHRoaXMtPkxvZ2ljR2V0T3B0aW9uQXJyYXkoJHJvdy0+aWQsICLilIAiLCAkb3Blcik7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkdGhpcy0+T3B0aW9uQXJyYXlMaXN0OwogICAgfQoKICAgIC8qKgogICAgICogIOmAu+i+kemAkuW9kgogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAcGFyYW0gICAgIGludCAgICRpZCAgIOagj+ebrklECiAgICAgKiBAcGFyYW0gICAgIGludCAgICRzdGVwICAg5q2l6L+b5qCH5b+XCiAgICAgKiBAcGFyYW0gICAgIGludCAgICRvcGVyICAg5pON5L2c5p2D6ZmQCiAgICAgKiBAcmV0dXJuICAgIHN0cmluZwogICAgICovCiAgICBmdW5jdGlvbiBMb2dpY0dldE9wdGlvbkFycmF5KCRpZCwgJHN0ZXAsICRvcGVyPTApCiAgICB7CiAgICAgICAgZ2xvYmFsICRjZmdfYWRtaW5fY2hhbm5lbDsKICAgICAgICBpZihlbXB0eSgkY2ZnX2FkbWluX2NoYW5uZWwpKSAkY2ZnX2FkbWluX2NoYW5uZWwgPSAnYWxsJzsKICAgICAgICAKICAgICAgICAkdGhpcy0+ZHNxbC0+U2V0UXVlcnkoIlNFTEVDVCBpZCx0eXBlbmFtZSxpc3BhcnQgRlJPTSAjQF9fYXJjdHlwZSBXSEVSRSByZWlkPSciLiRpZC4iJyBBTkQgaXNwYXJ0PD4yIE9SREVSIEJZIHNvcnRyYW5rIEFTQyIpOwogICAgICAgICR0aGlzLT5kc3FsLT5FeGVjdXRlKCRpZCk7CiAgICAgICAgd2hpbGUoJHJvdz0kdGhpcy0+ZHNxbC0+R2V0T2JqZWN0KCRpZCkpCiAgICAgICAgewogICAgICAgICAgICBpZihpc19hcnJheSgkb3BlcikgJiYgJGNmZ19hZG1pbl9jaGFubmVsICE9ICdhbGwnKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBpZighaW5fYXJyYXkoJHJvdy0+aWQsICRvcGVyKSkgY29udGludWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoJHJvdy0+aXNwYXJ0PT0xKSB7CiAgICAgICAgICAgICAgICAkdGhpcy0+T3B0aW9uQXJyYXlMaXN0IC49ICI8b3B0aW9uIHZhbHVlPSciLiRyb3ctPmlkLiInIHN0eWxlPSdiYWNrZ3JvdW5kLWNvbG9yOiNFRkVGRUY7Y29sb3I6IzY2NjY2Nic+JHN0ZXAiLiRyb3ctPnR5cGVuYW1lLiI8L29wdGlvbj5cclxuIjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICR0aGlzLT5PcHRpb25BcnJheUxpc3QgLj0gIjxvcHRpb24gdmFsdWU9JyIuJHJvdy0+aWQuIic+JHN0ZXAiLiRyb3ctPnR5cGVuYW1lLiI8L29wdGlvbj5cclxuIjsKICAgICAgICAgICAgfQogICAgICAgICAgICAkdGhpcy0+TG9naWNHZXRPcHRpb25BcnJheSgkcm93LT5pZCwgJHN0ZXAuIuKUgCIsICRvcGVyKTsKICAgICAgICB9CiAgICB9CgogICAgLyoqCiAgICAgKiAg6I635b6X5LiO6K+l57G755u45YWz55qE57G755uu77yM5pys5Ye95pWw5bqU55So5LqO5qih5p2/5qCH6K6we2RlZGU6Y2hhbm5lbH17L2RlZGU6Y2hhbm5lbH3kuK0KICAgICAqICAkdHlwZXR5cGUg55qE5YC85Li677yaIHN1biDkuIvnuqfliIbnsbsgc2VsZiDlkIznuqfliIbnsbsgdG9wIOmhtue6p+WIhuexuwogICAgICoKICAgICAqIEBhY2Nlc3MgICAgcHVibGljCiAgICAgKiBAcGFyYW0gICAgIGludCAgICR0eXBlaWQgICDmoI/nm65JRAogICAgICogQHBhcmFtICAgICBpbnQgICAkcmVpZCAgIOaJgOWxnklECiAgICAgKiBAcGFyYW0gICAgIGludCAgICRyb3cgICDmoI/nm67ooYzmlbAKICAgICAqIEBwYXJhbSAgICAgc3RyaW5nICAgJHR5cGV0eXBlICAg5qCP55uu57G75Z6LCiAgICAgKiBAcGFyYW0gICAgIHN0cmluZyAgICRpbm5lcnRleHQgICDlupXlsYLmqKHmnb8KICAgICAqIEBwYXJhbSAgICAgaW50ICAgJGNvbCAgIOaYvuekuuWIl+aVsAogICAgICogQHBhcmFtICAgICBpbnQgICAkdGFibGV3aWR0aCAgIOihqOagvOWuveW6pgogICAgICogQHBhcmFtICAgICBpbnQgICAkbXlpbm5lcnRleHQgICDoh6rlrprkuYnlupXlsYLmqKHmnb8KICAgICAqIEByZXR1cm4gICAgc3RyaW5nCiAgICAgKi8KICAgIGZ1bmN0aW9uIEdldENoYW5uZWxMaXN0KCR0eXBlaWQ9MCwgJHJlaWQ9MCwgJHJvdz04LCAkdHlwZXR5cGU9J3N1bicsICRpbm5lcnRleHQ9JycsCiAgICAkY29sPTEsICR0YWJsZXdpZHRoPTEwMCwgJG15aW5uZXJ0ZXh0PScnKQogICAgewogICAgICAgIGlmKCR0eXBlaWQ9PTApICR0eXBlaWQgPSAkdGhpcy0+VHlwZUlEOwogICAgICAgIGlmKCRyb3c9PSIiKSAkcm93ID0gODsKICAgICAgICBpZigkcmVpZD09IiIpICRyZWlkID0gMDsKICAgICAgICBpZigkY29sPT0iIikgJGNvbCA9IDE7CgogICAgICAgICR0YWJsZXdpZHRoID0gc3RyX3JlcGxhY2UoIiUiLCIiLCR0YWJsZXdpZHRoKTsKICAgICAgICBpZigkdGFibGV3aWR0aD09IiIpICR0YWJsZXdpZHRoPTEwMDsKICAgICAgICBpZigkY29sPT0iIikgJGNvbCA9IDE7CgogICAgICAgICRjb2xXaWR0aCA9IGNlaWwoMTAwLyRjb2wpOwogICAgICAgICR0YWJsZXdpZHRoID0gJHRhYmxld2lkdGguIiUiOwogICAgICAgICRjb2xXaWR0aCA9ICRjb2xXaWR0aC4iJSI7CiAgICAgICAgaWYoJHR5cGV0eXBlPT0iIikgJHR5cGV0eXBlPSJzdW4iOwoKICAgICAgICBpZigkaW5uZXJ0ZXh0PT0iIikgJGlubmVydGV4dCA9IEdldFN5c1RlbXBsZXRzKCJjaGFubmVsX2xpc3QuaHRtIik7CgogICAgICAgIGlmKCRyZWlkPT0wICYmICR0eXBlaWQ+MCkKICAgICAgICB7CiAgICAgICAgICAgICRkYnJvdyA9ICR0aGlzLT5kc3FsLT5HZXRPbmUoIlNFTEVDVCByZWlkIEZST00gI0BfX2FyY3R5cGUgV0hFUkUgaWQ9JyR0eXBlaWQnICIpOwogICAgICAgICAgICBpZihpc19hcnJheSgkZGJyb3cpKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAkcmVpZCA9ICRkYnJvd1sncmVpZCddOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgICRsaWtlVHlwZSA9ICIiOwogICAgICAgIGlmKCR0eXBldHlwZT09InRvcCIpCiAgICAgICAgewogICAgICAgICAgICAkc3FsID0gIlNFTEVDVCBpZCx0eXBlbmFtZSx0eXBlZGlyLGlzZGVmYXVsdCxpc3BhcnQsZGVmYXVsdG5hbWUsbmFtZXJ1bGUyLG1vcmVzaXRlLHNpdGV1cmwKICAgICAgICAgIEZST00gI0BfX2FyY3R5cGUgV0hFUkUgcmVpZD0wIEFORCBpc2hpZGRlbjw+MSBPUkRFUiBCWSBzb3J0cmFuayBBU0MgbGltaXQgMCwkcm93IjsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZigkdHlwZXR5cGU9PSJzdW4ifHwkdHlwZXR5cGU9PSJzb24iKQogICAgICAgIHsKICAgICAgICAgICAgJHNxbCA9ICJTRUxFQ1QgaWQsdHlwZW5hbWUsdHlwZWRpcixpc2RlZmF1bHQsaXNwYXJ0LGRlZmF1bHRuYW1lLG5hbWVydWxlMixtb3Jlc2l0ZSxzaXRldXJsCiAgICAgICAgICBGUk9NICNAX19hcmN0eXBlIFdIRVJFIHJlaWQ9JyR0eXBlaWQnIEFORCBpc2hpZGRlbjw+MSBPUkRFUiBCWSBzb3J0cmFuayBBU0MgbGltaXQgMCwkcm93IjsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZigkdHlwZXR5cGU9PSJzZWxmIikKICAgICAgICB7CiAgICAgICAgICAgICRzcWwgPSAiU0VMRUNUIGlkLHR5cGVuYW1lLHR5cGVkaXIsaXNkZWZhdWx0LGlzcGFydCxkZWZhdWx0bmFtZSxuYW1lcnVsZTIsbW9yZXNpdGUsc2l0ZXVybAogICAgICAgICAgICBGUk9NICNAX19hcmN0eXBlIFdIRVJFIHJlaWQ9JyRyZWlkJyBBTkQgaXNoaWRkZW48PjEgT1JERVIgQlkgc29ydHJhbmsgQVNDIGxpbWl0IDAsJHJvdyI7CiAgICAgICAgfQoKICAgICAgICAvL0FORCBJRDw+JyR0eXBlaWQnCiAgICAgICAgJGR0cDIgPSBuZXcgRGVkZVRhZ1BhcnNlKCk7CiAgICAgICAgJGR0cDItPlNldE5hbWVTcGFjZSgiZmllbGQiLCJbIiwiXSIpOwogICAgICAgICRkdHAyLT5Mb2FkU291cmNlKCRpbm5lcnRleHQpOwogICAgICAgICR0aGlzLT5kc3FsLT5TZXRRdWVyeSgkc3FsKTsKICAgICAgICAkdGhpcy0+ZHNxbC0+RXhlY3V0ZSgpOwogICAgICAgICRsaW5lID0gJHJvdzsKICAgICAgICAkR0xPQkFMU1snYXV0b2luZGV4J10gPSAwOwogICAgICAgIGlmKCRjb2w+MSkKICAgICAgICB7CiAgICAgICAgICAgICRsaWtlVHlwZSA9ICI8dGFibGUgd2lkdGg9JyR0YWJsZXdpZHRoJyBib3JkZXI9JzAnIGNlbGxzcGFjaW5nPScwJyBjZWxscGFkZGluZz0nMCc+XHJcbiI7CiAgICAgICAgfQogICAgICAgIGZvcigkaT0wOyRpPCRsaW5lOyRpKyspCiAgICAgICAgewogICAgICAgICAgICBpZigkY29sPjEpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRsaWtlVHlwZSAuPSAiPHRyPlxyXG4iOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcigkaj0wOyRqPCRjb2w7JGorKykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgaWYoJGNvbD4xKSAkbGlrZVR5cGUgLj0gIiAgICA8dGQgd2lkdGg9JyRjb2xXaWR0aCc+XHJcbiI7CiAgICAgICAgICAgICAgICBpZigkcm93PSR0aGlzLT5kc3FsLT5HZXRBcnJheSgpKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIC8v5aSE55CG5b2T5YmN5qCP55uu55qE5qC35byPCiAgICAgICAgICAgICAgICAgICAgaWYoJHJvd1snaWQnXT09IiR0eXBlaWQiICYmICRteWlubmVydGV4dCAhPSAnJykKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rT2tzdHIgPSAkbXlpbm5lcnRleHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICRyb3dbJ3R5cGVsaW5rJ10gPSAkdGhpcy0+R2V0T25lVHlwZVVybCgkcm93KTsKICAgICAgICAgICAgICAgICAgICAgICAgJGxpbmtPa3N0ciA9IHN0cl9yZXBsYWNlKCJ+dHlwZWxpbmt+IiwgJHJvd1sndHlwZWxpbmsnXSwgJGxpbmtPa3N0cik7CiAgICAgICAgICAgICAgICAgICAgICAgICRsaW5rT2tzdHIgPSBzdHJfcmVwbGFjZSgifnR5cGVuYW1lfiIsICRyb3dbJ3R5cGVuYW1lJ10sICRsaW5rT2tzdHIpOwogICAgICAgICAgICAgICAgICAgICAgICAkbGlrZVR5cGUgLj0gJGxpbmtPa3N0cjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy/pnZ7lvZPliY3moI/nm64KICAgICAgICAgICAgICAgICAgICAgICAgJHJvd1sndHlwZWxpbmsnXSA9ICR0aGlzLT5HZXRPbmVUeXBlVXJsKCRyb3cpOwogICAgICAgICAgICAgICAgICAgICAgICBpZihpc19hcnJheSgkZHRwMi0+Q1RhZ3MpKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoKCRkdHAyLT5DVGFncyBhcyAkdGFnaWQ9PiRjdGFnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGlzc2V0KCRyb3dbJGN0YWctPkdldE5hbWUoKV0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGR0cDItPkFzc2lnbigkdGFnaWQsICRyb3dbJGN0YWctPkdldE5hbWUoKV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAkbGlrZVR5cGUgLj0gJGR0cDItPkdldFJlc3VsdCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmKCRjb2w+MSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAkbGlrZVR5cGUgLj0gIiAgICA8L3RkPlxyXG4iOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJEdMT0JBTFNbJ2F1dG9pbmRleCddKys7CiAgICAgICAgICAgIH0vL0xvb3AgQ29sCgogICAgICAgICAgICBpZigkY29sPjEpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICRpICs9ICRjb2wgLSAxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmKCRjb2w+MSkKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgJGxpa2VUeXBlIC49ICIgICAgPC90cj5cclxuIjsKICAgICAgICAgICAgfQogICAgICAgIH0vL0xvb3AgZm9yICRpCgogICAgICAgIGlmKCRjb2w+MSkKICAgICAgICB7CiAgICAgICAgICAgICRsaWtlVHlwZSAuPSAiICAgIDwvdGFibGU+XHJcbiI7CiAgICAgICAgfQogICAgICAgICR0aGlzLT5kc3FsLT5GcmVlUmVzdWx0KCk7CiAgICAgICAgcmV0dXJuICRsaWtlVHlwZTsKICAgIH0vL0dldENoYW5uZWwKCn0vL0VuZCBDbGFzcw==
</file>
<file type='file' name='../include/arc.listview.class_wap.php'>

</file>
<file type='file' name='../include/helpers/channelunit.helper.php'>

</file>
<file type='file' name='makehtml_all_wap.php'>
PD9waHANDQovKioNDQogKiDnlJ/miJDmiYDmnInpobXpnaINDQogKg0NCiAqIEB2ZXJzaW9uICAgICAgICAkSWQ6IG1ha2VodG1sX2FsbC5waHAgMSA4OjQ4IDIwMTDlubQ35pyIMTPml6VaIHRpYW55YSAkDQ0KICogQHBhY2thZ2UgICAgICAgIERlZGVDTVMuQWRtaW5pc3RyYXRvcg0NCiAqIEBjb3B5cmlnaHQgICAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDEwLCBEZXNEZXYsIEluYy4NDQogKiBAbGljZW5zZSAgICAgICAgaHR0cDovL2hlbHAuZGVkZWNtcy5jb20vdXNlcnNndWlkZS9saWNlbnNlLmh0bWwNDQogKiBAbGluayAgICAgICAgICAgaHR0cDovL3d3dy5kZWRlY21zLmNvbQ0NCiAqLw0NCnJlcXVpcmVfb25jZShkaXJuYW1lKF9fRklMRV9fKS4iL2NvbmZpZy5waHAiKTsNDQpyZXF1aXJlX29uY2UoREVERUlOQy4iL2NoYW5uZWx1bml0LmZ1bmMucGhwIik7DQ0KJGFjdGlvbiA9IChlbXB0eSgkYWN0aW9uKSA/ICcnIDogJGFjdGlvbik7DQ0KDQ0KaWYoJGFjdGlvbj09JycpDQ0Kew0NCiAgICByZXF1aXJlX29uY2UoREVERUFETUlOLiIvdGVtcGxldHMvbWFrZWh0bWxfYWxsX3dhcC5odG0iKTsNDQogICAgZXhpdCgpOw0NCn0NDQplbHNlIGlmKCRhY3Rpb249PSdtYWtlJykNDQp7DQ0KICAgIC8vc3RlcCA9IDEg5pu05paw5Li76aG144CBc3RlcCA9IDIg5pu05paw5YaF5a6544CBc3RlcCA9IDMg5pu05paw5qCP55uuDQ0KICAgIGlmKGVtcHR5KCRzdGVwKSkgJHN0ZXAgPSAxOw0NCg0NCiAgICAvL+abtOaWsOaWh+aho+WJjeS8mOWMluaVsOaNrg0NCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0NDQogICAgZnVuY3Rpb24gXzFfT3B0aW1pemVEYXRhMSgpDQ0KICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLSovDQ0KICAgIGlmKCRzdGVwPT0xKQ0NCiAgICB7DQ0KICAgICAgICAkc3RhcnR0aW1lID0gR2V0TWtUaW1lKCRzdGFydHRpbWUpOw0NCiAgICAgICAgJG1rdmFsdWUgPSAoJHVwdHlwZT09J3RpbWUnID8gJHN0YXJ0dGltZSA6ICRzdGFydGlkKTsNDQogICAgICAgIE9wdGltaXplRGF0YSgkZHNxbCk7DQ0KICAgICAgICBTaG93TXNnKCLlrozmiJDmlbDmja7kvJjljJbvvIznjrDlnKjlvIDlp4vmm7TmlrDmlofmoaPvvIEiLCJtYWtlaHRtbF9hbGxfd2FwLnBocD9hY3Rpb249bWFrZSZzdGVwPTImdXB0eXBlPSR1cHR5cGUmbWt2YWx1ZT0kbWt2YWx1ZSIpOw0NCiAgICAgICAgZXhpdCgpOw0NCiAgICB9DQ0KICAgIC8v5pu05paw5paH5qGjDQ0KICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLQ0NCiAgICBmdW5jdGlvbiBfMl9NYWtlQXJjaGl2ZXMoKQ0NCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0qLw0NCiAgICBlbHNlIGlmKCRzdGVwPT0yKQ0NCiAgICB7DQ0KICAgICAgICBpbmNsdWRlX29uY2UoREVERUFETUlOLiIvbWFrZWh0bWxfYXJjaGl2ZXNfYWN0aW9uX3dhcC5waHAiKTsNDQogICAgICAgIGV4aXQoKTsNDQogICAgfQ0NCiAgICAvL+abtOaWsOS4u+mhtQ0NCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NDQogICAgZnVuY3Rpb24gXzNfTWFrZUhvbWVQYWdlKCkNDQogICAgLS0tLS0tLS0tLS0tLS0tLS0tLSovDQ0KICAgIGlmKCRzdGVwPT0zKQ0NCiAgICB7ICANDQogICAgaW5jbHVkZV9vbmNlKERFREVJTkMuIi9hcmMud2FwX2luZGV4LnBocCIpOw0NCiAgICAgICRzZyA9IG5ldyBzZ3BhZ2UoJGFpZCk7DQ0KICAgICRzZy0+U2F2ZVRvSHRtbCgpOw0NCiAgIA0NCiAgICAgICAgU2hvd01zZygi5a6M5oiQ5pu05paw5omA5pyJ5paH5qGj77yM546w5Zyo5byA5aeL5pu05paw5qCP55uu6aG177yBIiwibWFrZWh0bWxfYWxsX3dhcC5waHA/YWN0aW9uPW1ha2Umc3RlcD00JnVwdHlwZT0kdXB0eXBlJm1rdmFsdWU9JG1rdmFsdWUiKTsNDQogICAgICAgIGV4aXQoKTsNDQogICAgfQ0NCiAgICAvL+abtOaWsOagj+ebrg0NCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0NDQogICAgZnVuY3Rpb24gXzRfTWFrZUNhdGFsb2coKQ0NCiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLSovDQ0KICAgIGVsc2UgaWYoJHN0ZXA9PTQpDQ0KICAgIHsNDQogICAgICAgICRta3ZhbHVlID0gaW50dmFsKCRta3ZhbHVlKTsNDQogICAgICAgICR0eXBlaWRzb2sgPSAkdHlwZWlkcyA9IGFycmF5KCk7DQ0KICAgICAgICAkYWRtaW5JRCA9ICRjdXNlckxvZ2luLT5nZXRVc2VySUQoKTsNDQogICAgICAgICRta2NhY2hlZmlsZSA9IERFREVEQVRBLiIvbWthbGxfY2FjaGVfeyRhZG1pbklEfS5waHAiOw0NCiAgICAgICAgaWYoJHVwdHlwZT09J2FsbCcgfHwgZW1wdHkoJG1rdmFsdWUpKQ0NCiAgICAgICAgew0NCiAgICAgICAgICAgIFNob3dNc2coIuS4jemcgOimgei/m+ihjOWIneWkhOeQhu+8jOeOsOabtOaWsOaJgOacieagj+ebru+8gSIsICJtYWtlaHRtbF9saXN0X2FjdGlvbl93YXAucGhwP2dvdHlwZT1ta2FsbGN0Iik7DQ0KICAgICAgICAgICAgZXhpdCgpOw0NCiAgICAgICAgfQ0NCiAgICAgICAgZWxzZQ0NCiAgICAgICAgew0NCiAgICAgICAgICAgIGlmKCR1cHR5cGU9PSd0aW1lJykNDQogICAgICAgICAgICB7DQ0KICAgICAgICAgICAgICAgICRxdWVyeSA9ICJTRUxFQ1QgIERJU1RJTkNUIHR5cGVpZCBGcm9tIGAjQF9fYXJjdGlueWAgV0hFUkUgc2VuZGRhdGUgPj0iLkdldE1rVGltZSgkbWt2YWx1ZSkuIiBBTkQgYXJjcmFuaz4tMSI7DQ0KICAgICAgICAgICAgfQ0NCiAgICAgICAgICAgIGVsc2UNDQogICAgICAgICAgICB7DQ0KICAgICAgICAgICAgICAgICRxdWVyeSA9ICJTRUxFQ1QgRElTVElOQ1QgdHlwZWlkIEZyb20gYCNAX19hcmN0aW55YCBXSEVSRSBpZD49JG1rdmFsdWUgQU5EIGFyY3Jhbms+LTEiOw0NCiAgICAgICAgICAgIH0NDQogICAgICAgICAgICAkZHNxbC0+U2V0UXVlcnkoJHF1ZXJ5KTsNDQogICAgICAgICAgICAkZHNxbC0+RXhlY3V0ZSgpOw0NCiAgICAgICAgICAgIHdoaWxlKCRyb3cgPSAkZHNxbC0+R2V0QXJyYXkoKSkNDQogICAgICAgICAgICB7DQ0KICAgICAgICAgICAgICAgICR0eXBlaWRzWyRyb3dbJ3R5cGVpZCddXSA9IDE7DQ0KICAgICAgICAgICAgfQ0NCg0NCiAgICAgICAgICAgIGZvcmVhY2goJHR5cGVpZHMgYXMgJGs9PiR2KQ0NCiAgICAgICAgICAgIHsNDQogICAgICAgICAgICAgICAgJHZzID0gYXJyYXkoKTsNDQogICAgICAgICAgICAgICAgJHZzID0gR2V0UGFyZW50SWRzKCRrKTsNDQogICAgICAgICAgICAgICAgaWYoICFpc3NldCgkdHlwZWlkc29rWyRrXSkgKQ0NCiAgICAgICAgICAgICAgICB7DQ0KICAgICAgICAgICAgICAgICAgICAkdHlwZWlkc29rWyRrXSA9IDE7DQ0KICAgICAgICAgICAgICAgIH0NDQogICAgICAgICAgICAgICAgZm9yZWFjaCgkdnMgYXMgJGs9PiR2KQ0NCiAgICAgICAgICAgICAgICB7DQ0KICAgICAgICAgICAgICAgICAgICBpZighaXNzZXQoJHR5cGVpZHNva1skdl0pKQ0NCiAgICAgICAgICAgICAgICAgICAgew0NCiAgICAgICAgICAgICAgICAgICAgICAgICR0eXBlaWRzb2tbJHZdID0gMTsNDQogICAgICAgICAgICAgICAgICAgIH0NDQogICAgICAgICAgICAgICAgfQ0NCiAgICAgICAgICAgIH0NDQogICAgICAgIH0NDQogICAgICAgICRmcCA9IGZvcGVuKCRta2NhY2hlZmlsZSwndycpIG9yIGRpZSgi5peg5rOV5YaZ5YWl57yT5a2Y5paH5Lu277yaeyRta2NhY2hlZmlsZX0g5omA5Lul5peg5rOV5pu05paw5qCP55uu77yBIik7DQ0KICAgICAgICBpZihjb3VudCgkdHlwZWlkc29rKT4wKQ0NCiAgICAgICAgew0NCiAgICAgICAgICAgIGZ3cml0ZSgkZnAsIjwiLiI/cGhwXHJcbiIpOw0NCiAgICAgICAgICAgICRpID0gLTE7DQ0KICAgICAgICAgICAgZm9yZWFjaCgkdHlwZWlkc29rIGFzICRrPT4kdCkNDQogICAgICAgICAgICB7DQ0KICAgICAgICAgICAgICAgIGlmKCRrIT0nJykNDQogICAgICAgICAgICAgICAgew0NCiAgICAgICAgICAgICAgICAgICAgJGkrKzsNDQogICAgICAgICAgICAgICAgICAgIGZ3cml0ZSgkZnAsICJcJGlkQXJyYXlbJGldPXska307XHJcbiIpOw0NCiAgICAgICAgICAgICAgICB9DQ0KICAgICAgICAgICAgfQ0NCiAgICAgICAgICAgIGZ3cml0ZSgkZnAsIj8iLiI+Iik7DQ0KICAgICAgICAgICAgZmNsb3NlKCRmcCk7DQ0KICAgICAgICAgICAgU2hvd01zZygi5a6M5oiQ5qCP55uu57yT5a2Y5aSE55CG77yM546w6L2s5ZCR5pu05paw5qCP55uu77yBIiwibWFrZWh0bWxfbGlzdF9hY3Rpb25fd2FwLnBocD9nb3R5cGU9bWthbGwiKTsNDQogICAgICAgICAgICBleGl0KCk7DQ0KICAgICAgICB9DQ0KICAgICAgICBlbHNlDQ0KICAgICAgICB7DQ0KICAgICAgICAgICAgZmNsb3NlKCRmcCk7DQ0KICAgICAgICAgICAgU2hvd01zZygi5rKh5pyJ5Y+v5pu05paw55qE5qCP55uu77yM546w5Zyo5L2c5pyA5ZCO5pWw5o2u5LyY5YyW77yBIiwibWFrZWh0bWxfYWxsX3dhcC5waHA/YWN0aW9uPW1ha2Umc3RlcD0xMCIpOw0NCiAgICAgICAgICAgIGV4aXQoKTsNDQogICAgICAgIH0NDQogICAgfQ0NCiAgICAvL+aIkOWKn+eKtuaAgQ0NCiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0NDQogICAgZnVuY3Rpb24gXzEwX01ha2VBbGxPSygpDQ0KICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NDQogICAgZWxzZSBpZigkc3RlcD09MTApDQ0KICAgIHsNDQogICAgICAgICRhZG1pbklEID0gJGN1c2VyTG9naW4tPmdldFVzZXJJRCgpOw0NCiAgICAgICAgJG1rY2FjaGVmaWxlID0gREVERURBVEEuIi9ta2FsbF9jYWNoZV97JGFkbWluSUR9LnBocCI7DQ0KICAgICAgICBAdW5saW5rKCRta2NhY2hlZmlsZSk7DQ0KICAgICAgICBPcHRpbWl6ZURhdGEoJGRzcWwpOw0NCiAgICAgICAgU2hvd01zZygi5a6M5oiQ5omA5pyJ5paH5Lu255qE5pu05paw77yBIiwiamF2YXNjcmlwdDo7Iik7DQ0KICAgICAgICBleGl0KCk7DQ0KICAgIH0vL21ha2Ugc3RlcA0NCg0NCn0gLy9hY3Rpb249PSdtYWtlJw0NCg0NCi8qKg0NCiAqICDkvJjljJbmlbDmja4NDQogKg0NCiAqIEBhY2Nlc3MgICAgcHVibGljDQ0KICogQHBhcmFtICAgICBvYmplY3QgICRkc3FsICDmlbDmja7lupPlr7nosaENDQogKiBAcmV0dXJuICAgIHZvaWQNDQogKi8NDQpmdW5jdGlvbiBPcHRpbWl6ZURhdGEoJGRzcWwpDQ0Kew0NCiAgICBnbG9iYWwgJGNmZ19kYnByZWZpeDsNDQogICAgJHRwdGFibGVzID0gYXJyYXkoInskY2ZnX2RicHJlZml4fWFyY2hpdmVzIiwieyRjZmdfZGJwcmVmaXh9YXJjdGlueSIpOw0NCiAgICAkZHNxbC0+U2V0UXVlcnkoIlNFTEVDVCBtYWludGFibGUsYWRkdGFibGUgRlJPTSBgI0BfX2NoYW5uZWx0eXBlYCAiKTsNDQogICAgJGRzcWwtPkV4ZWN1dGUoKTsNDQogICAgd2hpbGUoJHJvdyA9ICRkc3FsLT5HZXRPYmplY3QoKSkNDQogICAgew0NCiAgICAgICAgJGFkZHRhYmxlID0gc3RyX3JlcGxhY2UoJyNAX18nLCRjZmdfZGJwcmVmaXgsJHJvdy0+YWRkdGFibGUpOw0NCiAgICAgICAgaWYoJGFkZHRhYmxlIT0nJyAmJiAhaW5fYXJyYXkoJGFkZHRhYmxlLCR0cHRhYmxlcykpICR0cHRhYmxlc1tdID0gJGFkZHRhYmxlOw0NCiAgICB9DQ0KICAgICR0cHRhYmxlID0gJyc7DQ0KICAgIGZvcmVhY2goJHRwdGFibGVzIGFzICR0KSAkdHB0YWJsZSAuPSAoJHRwdGFibGU9PScnID8gImB7JHR9YCIgOiAiLGB7JHR9YCIgKTsNDQogICAgJGRzcWwtPkV4ZWN1dGVOb25lUXVlcnkoIiBPUFRJTUlaRSBUQUJMRSAkdHB0YWJsZTsgIik7DQ0KfQ==
</file>
<file type='file' name='makehtml_archives_wap.php'>
PD9waHANDQovKioNDQogKiDnlJ/miJDmlofmoaMNDQogKg0NCiAqIEB2ZXJzaW9uICAgICAgICAkSWQ6IG1ha2VodG1sX2FyY2hpdmVzLnBocCAxIDk6MTAgMjAxMOW5tDfmnIgxOeaXpVogdGlhbnlhICQNDQogKiBAcGFja2FnZSAgICAgICAgRGVkZUNNUy5BZG1pbmlzdHJhdG9yDQ0KICogQGNvcHlyaWdodCAgICAgIENvcHlyaWdodCAoYykgMjAwNyAtIDIwMTAsIERlc0RldiwgSW5jLg0NCiAqIEBsaWNlbnNlICAgICAgICBodHRwOi8vaGVscC5kZWRlY21zLmNvbS91c2Vyc2d1aWRlL2xpY2Vuc2UuaHRtbA0NCiAqIEBsaW5rICAgICAgICAgICBodHRwOi8vd3d3LmRlZGVjbXMuY29tDQ0KICovDQ0KcmVxdWlyZV9vbmNlKGRpcm5hbWUoX19GSUxFX18pLiIvY29uZmlnLnBocCIpOw0NCnJlcXVpcmVfb25jZShERURFSU5DLiIvdHlwZWxpbmsuY2xhc3MucGhwIik7DQ0KaW5jbHVkZSBEZWRlSW5jbHVkZSgndGVtcGxldHMvbWFrZWh0bWxfYXJjaGl2ZXNfd2FwLmh0bScpOw==
</file>
<file type='file' name='makehtml_homepage_wap.php'>
PD9waHANDQovKioNDQogKiDnvJbovpHkuIDkuKrmqKHmnb8NDQogKg0NCiAqIEB2ZXJzaW9uICAgICAgICAkSWQ6IHRlbXBsZXRzX29uZV9lZGl0LnBocCAxIDIzOjA3IDIwMTDlubQ35pyIMjDml6VaIHRpYW55YSAkDQ0KICogQHBhY2thZ2UgICAgICAgIERlZGVDTVMuQWRtaW5pc3RyYXRvcg0NCiAqIEBjb3B5cmlnaHQgICAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDEwLCBEZXNEZXYsIEluYy4NDQogKiBAbGljZW5zZSAgICAgICAgaHR0cDovL2hlbHAuZGVkZWNtcy5jb20vdXNlcnNndWlkZS9saWNlbnNlLmh0bWwNDQogKiBAbGluayAgICAgICAgICAgaHR0cDovL3d3dy5kZWRlY21zLmNvbQ0NCiAqLw0NCnJlcXVpcmUoZGlybmFtZShfX0ZJTEVfXykuIi9jb25maWcucGhwIik7DQ0KQ2hlY2tQdXJ2aWV3KCd0ZW1wX09uZScpOw0NCmlmKGVtcHR5KCRkb3Bvc3QpKSAkZG9wb3N0ID0gIiI7DQ0KDQ0KDQ0KDQ0KDQ0KIGlmKCRkb3Bvc3Q9PSJtYWtlIikNDQp7DQ0KICAgIGluY2x1ZGVfb25jZShERURFSU5DLiIvYXJjLndhcF9pbmRleC5waHAiKTsNDQoNDQogICAgJHNnID0gbmV3IHNncGFnZSgkYWlkKTsNDQogICAgJHNnLT5TYXZlVG9IdG1sKCk7DQ0KICAgLy9TaG93TXNnKCLmiJDlip/mm7TmlrDkuIDkuKrpobXpnaLvvIEiLCAkZmlsZXVybCk7DQ0KICAgICBlY2hvICLmiJDlip/mm7TmlrDkuLvpobVIVE1M77yaPGJyIC8+PGEgaHJlZj0neyRjZmdfd2FwdXJsfS9pbmRleC5odG1sJyB0YXJnZXQ9J19ibGFuayc+5rWP6KeILi4uPC9hPjxiciAvPiI7DQ0KICAgIGV4aXQoKTsNDQp9DQ0KaW5jbHVkZShERURFQURNSU4uIi90ZW1wbGV0cy9tYWtlaHRtbF9ob21lcGFnZV93YXAuaHRtIik7
</file>
<file type='file' name='makehtml_archives_action_wap.php'>
PD9waHANDQovKioNDQogKiDnlJ/miJDmlofmoaPmk43kvZwNDQogKg0NCiAqIEB2ZXJzaW9uICAgICAgICAkSWQ6IG1ha2VodG1sX2FyY2hpdmVzX2FjdGlvbi5waHAgMSA5OjExIDIwMTDlubQ35pyIMTnml6VaIHRpYW55YSAkDQ0KICogQHBhY2thZ2UgICAgICAgIERlZGVDTVMuQWRtaW5pc3RyYXRvcg0NCiAqIEBjb3B5cmlnaHQgICAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDEwLCBEZXNEZXYsIEluYy4NDQogKiBAbGljZW5zZSAgICAgICAgaHR0cDovL2hlbHAuZGVkZWNtcy5jb20vdXNlcnNndWlkZS9saWNlbnNlLmh0bWwNDQogKiBAbGluayAgICAgICAgICAgaHR0cDovL3d3dy5kZWRlY21zLmNvbQ0NCiAqLw0NCnJlcXVpcmVfb25jZShkaXJuYW1lKF9fRklMRV9fKS4iL2NvbmZpZy5waHAiKTsNDQpDaGVja1B1cnZpZXcoJ3N5c19NYWtlSHRtbCcpOw0NCnJlcXVpcmVfb25jZShERURFSU5DLiIvYXJjLmFyY2hpdmVzLmNsYXNzX3dhcC5waHAiKTsNDQoNDQokZXN0MSA9IEV4ZWNUaW1lKCk7DQ0KJHN0YXJ0aWQgID0gKGVtcHR5KCRzdGFydGlkKSAgPyAtMSAgOiAkc3RhcnRpZCk7DQ0KJGVuZGlkICAgID0gKGVtcHR5KCRlbmRpZCkgICAgPyAwICA6ICRlbmRpZCk7DQ0KJHN0YXJ0ZGQgID0gKGVtcHR5KCRzdGFydGRkKSAgPyAwICA6ICRzdGFydGRkKTsNDQokcGFnZXNpemUgPSAoZW1wdHkoJHBhZ2VzaXplKSA/IDIwIDogJHBhZ2VzaXplKTsNDQokdG90YWxudW0gPSAoZW1wdHkoJHRvdGFsbnVtKSA/IDAgIDogJHRvdGFsbnVtKTsNDQokdHlwZWlkICAgPSAoZW1wdHkoJHR5cGVpZCkgICA/IDAgIDogJHR5cGVpZCk7DQ0KJHNlbHRpbWUgID0gKGVtcHR5KCRzZWx0aW1lKSAgPyAwICA6ICRzZWx0aW1lKTsNDQokc3RpbWUgICAgPSAoZW1wdHkoJHN0aW1lKSAgICA/ICcnIDogJHN0aW1lICk7DQ0KJGV0aW1lICAgID0gKGVtcHR5KCRldGltZSkgICAgPyAnJyA6ICRldGltZSk7DQ0KJHNzdGltZSAgID0gKGVtcHR5KCRzc3RpbWUpICAgPyAwICA6ICRzc3RpbWUpOyANDQokbWt2YWx1ZSAgPSAoZW1wdHkoJG1rdmFsdWUpICA/IDAgIDogJG1rdmFsdWUpOw0NCg0NCiRpc3JlbW90ZSAgPSAoZW1wdHkoJGlzcmVtb3RlKT8gMCAgOiAkaXNyZW1vdGUpOw0NCiRzZXJ2aXRlcm0gPSBlbXB0eSgkc2Vydml0ZXJtKT8gIiIgOiAkc2Vydml0ZXJtOw0NCg0NCi8v5LiA6ZSu5pu05paw5Lyg6YCS55qE5Y+C5pWwDQ0KaWYoIWVtcHR5KCR1cHR5cGUpKQ0NCnsNDQogICAgaWYoJHVwdHlwZSE9J3RpbWUnKSAkc3RhcnRpZCA9ICRta3ZhbHVlOw0NCiAgICBlbHNlICR0MSA9ICRta3ZhbHVlOw0NCn0NDQplbHNlDQ0Kew0NCiAgICAkdXB0eXBlID0gJyc7DQ0KfQ0NCg0NCi8v6I635Y+W5p2h5Lu2DQ0KJGlkc3FsID0gJyc7DQ0KJGd3aGVyZSA9ICgkc3RhcnRpZD09LTEgPyAiIFdIRVJFIGFyY3Jhbms9MCAiIDogIiBXSEVSRSBpZD49JHN0YXJ0aWQgQU5EIGFyY3Jhbms9MCAiKTsNDQppZigkZW5kaWQgPiAkc3RhcnRpZCAmJiAkc3RhcnRpZCA+IDApICRnd2hlcmUgLj0gIiBBTkQgaWQgPD0gJGVuZGlkICI7DQ0KDQ0KaWYoJHR5cGVpZCE9MCkgew0NCiAgICAkaWRzID0gR2V0U29uSWRzKCR0eXBlaWQpOw0NCiAgICAkZ3doZXJlIC49ICIgQU5EIHR5cGVpZCBpbigkaWRzKSAiOw0NCn0NDQoNDQppZigkaWRzcWw9PScnKSAkaWRzcWwgPSAkZ3doZXJlOw0NCg0NCmlmKCRzZWx0aW1lPT0xKQ0NCnsNDQogICAgJHQxID0gR2V0TWtUaW1lKCRzdGltZSk7DQ0KICAgICR0MiA9IEdldE1rVGltZSgkZXRpbWUpOw0NCiAgICAkaWRzcWwgLj0gIiBBbmQgKHNlbmRkYXRlID49ICR0MSBBbmQgc2VuZGRhdGUgPD0gJHQyKSAiOw0NCn0NDQplbHNlIGlmKGlzc2V0KCR0MSkgJiYgaXNfbnVtZXJpYygkdDEpKQ0NCnsNDQogICAgJGlkc3FsIC49ICIgQW5kIHNlbmRkYXRlID49ICR0MSAiOw0NCn0NDQoNDQovL+e7n+iuoeiusOW9leaAu+aVsA0NCmlmKCR0b3RhbG51bT09MCkNDQp7DQ0KICAgICRyb3cgPSAkZHNxbC0+R2V0T25lKCJTRUxFQ1QgQ09VTlQoKikgQVMgZGQgRlJPTSBgI0BfX2FyY3RpbnlgICRpZHNxbCIpOw0NCiAgICAkdG90YWxudW0gPSAkcm93WydkZCddOw0NCiAgICAvL+a4heepuue8k+WtmA0NCiAgICAkZHNxbC0+RXhlY3V0ZU5vbmVRdWVyeSgiREVMRVRFIEZST00gYCNAX19hcmNjYWNoZWAgIik7DQ0KfQ0NCg0NCi8v6I635Y+W6K6w5b2V77yM5bm255Sf5oiQSFRNTA0NCmlmKCR0b3RhbG51bSA+ICRzdGFydGRkKyRwYWdlc2l6ZSkgDQ0Kew0NCiAgICAkbGltaXRTcWwgPSAiIExJTUlUICRzdGFydGRkLCRwYWdlc2l6ZSI7DQ0KfQ0NCmVsc2Ugew0NCiAgICAkbGltaXRTcWwgPSAiIExJTUlUICRzdGFydGRkLCIuKCR0b3RhbG51bSAtICRzdGFydGRkKTsNDQp9DQ0KDQ0KJHRqbnVtID0gJHN0YXJ0ZGQ7DQ0KaWYoZW1wdHkoJHNzdGltZSkpICRzc3RpbWUgPSB0aW1lKCk7DQ0KDQ0KLy/lpoLmnpznlJ/miJDmlbDph4/lpKfkuo41MDDvvIzlubbkuJTmsqHpgInmoI/nm67vvIzmjInmoI/nm67mjpLluo/nlJ/miJANDQppZigkdG90YWxudW0gPiA1MDAgJiYgZW1wdHkoJHR5cGVpZCkpIA0NCnsNDQogICAgJGRzcWwtPkV4ZWN1dGUoJ291dCcsIlNFTEVDVCBpZCBGUk9NIGAjQF9fYXJjdGlueWAgJGlkc3FsIE9SREVSIEJZIHR5cGVpZCBBU0MgJGxpbWl0U3FsIik7DQ0KfSBlbHNlIHsNDQogICAgJGRzcWwtPkV4ZWN1dGUoJ291dCcsIlNFTEVDVCBpZCBGUk9NIGAjQF9fYXJjdGlueWAgJGlkc3FsICRsaW1pdFNxbCIpOw0NCn0NDQppZigkY2ZnX3JlbW90ZV9zaXRlPT0nWScgJiYgJGlzcmVtb3RlPT0iMSIpDQ0KeyAgICANDQogICAgaWYoJHNlcnZpdGVybSE9IiIpDQ0KICAgIHsNDQogICAgICAgIGxpc3QoJHNlcnZ1cmwsICRzZXJ2dXNlciwgJHNlcnZwd2QpID0gZXhwbG9kZSgnLCcsICRzZXJ2aXRlcm0pOw0NCiAgICAgICAgJGNvbmZpZyA9IGFycmF5KCAnaG9zdG5hbWUnID0+ICRzZXJ2dXJsLCAndXNlcm5hbWUnID0+ICRzZXJ2dXNlciwgDQ0KICAgICAgICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCcgPT4gJHNlcnZwd2QsJ2RlYnVnJyA9PiAnVFJVRScpOw0NCiAgICB9IGVsc2Ugew0NCiAgICAgICAgJGNvbmZpZz1hcnJheSgpOw0NCiAgICB9DQ0KICAgIGlmKCEkZnRwLT5jb25uZWN0KCRjb25maWcpKSBleGl0KCdFcnJvcjpOb25lIEZUUCBDb25uZWN0aW9uIScpOw0NCn0NDQoNDQp3aGlsZSgkcm93PSRkc3FsLT5HZXRPYmplY3QoJ291dCcpKQ0NCnsNDQogICAgJHRqbnVtKys7DQ0KICAgICRpZCA9ICRyb3ctPmlkOw0NCiAgICAkYWMgPSBuZXcgQXJjaGl2ZXMoJGlkKTsNDQogICAgJHJ1cmwgPSAkYWMtPk1ha2VIdG1sKCRpc3JlbW90ZSk7DQ0KfQ0NCg0NCiR0MiA9IEV4ZWNUaW1lKCk7DQ0KJHQyID0gKCR0MiAtICRlc3QxKTsNDQokdHRpbWUgPSB0aW1lKCkgLSAkc3N0aW1lOw0NCiR0dGltZSA9IG51bWJlcl9mb3JtYXQoKCR0dGltZSAvIDYwKSwyKTsNDQoNDQovL+i/lOWbnuaPkOekuuS/oeaBrw0NCiR0amxlbiA9ICR0b3RhbG51bT4wID8gY2VpbCggKCR0am51bS8kdG90YWxudW0pICogMTAwICkgOiAxMDA7DQ0KJGR2bGVuID0gJHRqbGVuICogMjsNDQokdGpzdGEgPSAiPGRpdiBzdHlsZT0nd2lkdGg6MjAwO2hlaWdodDoxNTtib3JkZXI6MXB4IHNvbGlkICM4OTg5ODk7dGV4dC1hbGlnbjpsZWZ0Jz48ZGl2IHN0eWxlPSd3aWR0aDokZHZsZW47aGVpZ2h0OjE1O2JhY2tncm91bmQtY29sb3I6IzgyOUQ4Myc+PC9kaXY+PC9kaXY+IjsNDQppZigkY2ZnX3JlbW90ZV9zaXRlPT0nWScgJiYgJGlzcmVtb3RlPT0iMSIpICR0anN0YSAuPSAiPGJyLz48Zm9udCBjb2xvcj0ncmVkJz7mgqjlt7LlvIDlkK/ov5znqIvlj5HluIPlip/og70s55Sf5oiQ6YCf5bqm5Lya5q+U6L6D5oWiLOivt+aCqOiAkOW/g+etieW+hS4uPC9mb250PiI7DQ0KJHRqc3RhIC49ICI8YnIvPuacrOasoeeUqOaXtu+8miIubnVtYmVyX2Zvcm1hdCgkdDIsMikuIu+8jOaAu+eUqOaXtu+8miR0dGltZSDliIbpkp/vvIzliLDovr7kvY3nva7vvJoiLigkc3RhcnRkZCskcGFnZXNpemUpLiI8YnIvPuWujOaIkOWIm+W7uuaWh+S7tuaAu+aVsOeahO+8miR0amxlbiAl77yM57un57ut5omn6KGM5Lu75YqhLi4uIjsNDQoNDQoNDQovL+mAn+W6pua1i+ivlQ0NCi8qDQ0KaWYoJHN0YXJ0ZGQgPiAxMDAwKQ0NCnsNDQogICAgU2hvd01zZygi55Sf5oiQ5paH5Lu277yaMTAwMCDmgLvnlKjml7bvvJp7JHR0aW1lfSDliIbpkp8iLCAiamF2YXNjcmlwdDo7Iik7DQ0KICAgIGV4aXQoKTsNDQp9DQ0KKi8NDQoNDQppZigkdGpudW0gPCAkdG90YWxudW0pDQ0Kew0NCiAgICAkbnVybCAgPSAibWFrZWh0bWxfYXJjaGl2ZXNfYWN0aW9uX3dhcC5waHA/ZW5kaWQ9JGVuZGlkJnN0YXJ0aWQ9JHN0YXJ0aWQmdHlwZWlkPSR0eXBlaWQiOw0NCiAgICAkbnVybCAuPSAiJnRvdGFsbnVtPSR0b3RhbG51bSZzdGFydGRkPSIuKCRzdGFydGRkKyRwYWdlc2l6ZSkuIiZwYWdlc2l6ZT0kcGFnZXNpemUiOw0NCiAgICAkbnVybCAuPSAiJnNlbHRpbWU9JHNlbHRpbWUmc3N0aW1lPSRzc3RpbWUmc3RpbWU9Ii51cmxlbmNvZGUoJHN0aW1lKS4iJmV0aW1lPSIudXJsZW5jb2RlKCRldGltZSkuIiZ1cHR5cGU9JHVwdHlwZSZta3ZhbHVlPSRta3ZhbHVlJmlzcmVtb3RlPXskaXNyZW1vdGV9JnNlcnZpdGVybT17JHNlcnZpdGVybX0iOw0NCiAgICBTaG93TXNnKCR0anN0YSwkbnVybCwwLDEwMCk7DQ0KICAgIGV4aXQoKTsNDQp9DQ0KZWxzZQ0NCnsNDQogICAgaWYoJHR5cGVpZCE9JycpDQ0KICAgIHsNDQogICAgICAgICAgU2hvd01zZygi55Sf5oiQ5paH5Lu277yaJHRvdGFsbnVtIOaAu+eUqOaXtu+8mnskdHRpbWV9IOWIhumSn++8jOeOsOi9rOWQkeW9k+WJjeagj+ebruabtOaWsCZndDsmZ3Q7IiwibWFrZWh0bWxfbGlzdF9hY3Rpb25fd2FwLnBocD90eXBlaWQ9JHR5cGVpZCZ1cHR5cGU9YWxsJm1heHBhZ2VzaXplPTUwJnVwbmV4dD0xJmlzcmVtb3RlPXskaXNyZW1vdGV9JnNlcnZpdGVybT17JHNlcnZpdGVybX0iKTsNDQogICAgfQ0NCiAgICBlbHNlDQ0KICAgIHsNDQogICAgICAgIGlmKCR1cHR5cGU9PScnKSANDQogICAgICAgIHsNDQogICAgICAgICAgICBTaG93TXNnKCLlrozmiJDmiYDmnInliJvlu7rku7vliqHvvIHvvIznlJ/miJDmlofku7bvvJokdG90YWxudW0g5oC755So5pe277yaeyR0dGltZX0g5YiG6ZKf44CCIiwiamF2YXNjcmlwdDo7Iik7DQ0KICAgICAgICB9IGVsc2Ugew0NCiAgICAgICAgICAgIFNob3dNc2coIuWujOaIkOaWh+aho0hUTUzmm7TmlrDku7vliqHvvIznjrDlnKjlvIDlp4vov5vooYzkuLvpobXmm7TmlrAuLi4iLCJtYWtlaHRtbF9hbGxfd2FwLnBocD9hY3Rpb249bWFrZSZzdGVwPTMmdXB0eXBlPSR1cHR5cGUmbWt2YWx1ZT0kbWt2YWx1ZSIpOw0NCiAgICAgICAgfQ0NCiAgICB9DQ0KfQ==
</file>
<file type='file' name='makehtml_list_wap.php'>
PD9waHANDQovKioNDQogKiDnlJ/miJDliJfooajmoI/nm64NDQogKg0NCiAqIEB2ZXJzaW9uICAgICAgICAkSWQ6IG1ha2VodG1sX2xpc3QucGhwIDEgMTE6MDkgMjAxMOW5tDfmnIgxOeaXpVogdGlhbnlhICQNDQogKiBAcGFja2FnZSAgICAgICAgRGVkZUNNUy5BZG1pbmlzdHJhdG9yDQ0KICogQGNvcHlyaWdodCAgICAgIENvcHlyaWdodCAoYykgMjAwNyAtIDIwMTAsIERlc0RldiwgSW5jLg0NCiAqIEBsaWNlbnNlICAgICAgICBodHRwOi8vaGVscC5kZWRlY21zLmNvbS91c2Vyc2d1aWRlL2xpY2Vuc2UuaHRtbA0NCiAqIEBsaW5rICAgICAgICAgICBodHRwOi8vd3d3LmRlZGVjbXMuY29tDQ0KICovDQ0KcmVxdWlyZV9vbmNlKGRpcm5hbWUoX19GSUxFX18pLiIvY29uZmlnLnBocCIpOw0NCnJlcXVpcmVfb25jZShERURFSU5DLiIvdHlwZWxpbmsuY2xhc3MucGhwIik7DQ0KaW5jbHVkZSBEZWRlSW5jbHVkZSgndGVtcGxldHMvbWFrZWh0bWxfbGlzdF93YXAuaHRtJyk7
</file>
<file type='file' name='makehtml_list_action_wap.php'>
PD9waHANDQovKioNDQogKiDnlJ/miJDliJfooajmoI/nm67mk43kvZwNDQogKg0NCiAqIEB2ZXJzaW9uICAgICAgICAkSWQ6IG1ha2VodG1sX2xpc3RfYWN0aW9uLnBocCAxIDExOjA5IDIwMTDlubQ35pyIMTnml6VaIHRpYW55YSAkDQ0KICogQHBhY2thZ2UgICAgICAgIERlZGVDTVMuQWRtaW5pc3RyYXRvcg0NCiAqIEBjb3B5cmlnaHQgICAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDEwLCBEZXNEZXYsIEluYy4NDQogKiBAbGljZW5zZSAgICAgICAgaHR0cDovL2hlbHAuZGVkZWNtcy5jb20vdXNlcnNndWlkZS9saWNlbnNlLmh0bWwNDQogKiBAbGluayAgICAgICAgICAgaHR0cDovL3d3dy5kZWRlY21zLmNvbQ0NCiAqLw0NCiBzZXRfdGltZV9saW1pdCgwKTsgDQ0KcmVxdWlyZV9vbmNlKGRpcm5hbWUoX19GSUxFX18pLiIvY29uZmlnLnBocCIpOw0NCkNoZWNrUHVydmlldygnc3lzX01ha2VIdG1sJyk7DQ0KcmVxdWlyZV9vbmNlKERFREVEQVRBLiIvY2FjaGUvaW5jX2NhdGFsb2dfYmFzZS5pbmMiKTsNDQpyZXF1aXJlX29uY2UoREVERUlOQy4iL2NoYW5uZWx1bml0LmZ1bmMucGhwIik7DQ0KDQ0KDQ0KaWYoIWlzc2V0KCR1cG5leHQpKSAkdXBuZXh0ID0gMTsNDQppZihlbXB0eSgkZ290eXBlKSkgJGdvdHlwZSA9ICcnOw0NCmlmKGVtcHR5KCRwYWdlbm8pKSAkcGFnZW5vID0gMDsNDQppZihlbXB0eSgkbWtwYWdlKSkgJG1rcGFnZSA9IDE7DQ0KaWYoZW1wdHkoJHR5cGVpZCkpICR0eXBlaWQgPSAwOw0NCmlmKCFpc3NldCgkdXBwYWdlKSkgJHVwcGFnZSA9IDA7DQ0KaWYoZW1wdHkoJG1heHBhZ2VzaXplKSkgJG1heHBhZ2VzaXplID0gNTA7DQ0KJGFkbWluSUQgPSAkY3VzZXJMb2dpbi0+Z2V0VXNlcklEKCk7DQ0KDQ0KJGlzcmVtb3RlID0gKGVtcHR5KCRpc3JlbW90ZSkgID8gMCA6ICRpc3JlbW90ZSk7DQ0KJHNlcnZpdGVybSA9IGVtcHR5KCRzZXJ2aXRlcm0pPyAiIiA6ICRzZXJ2aXRlcm07DQ0KDQ0KLy/mo4DmtYvojrflj5bmiYDmnInmoI/nm65JRA0NCi8v5pmu6YCa55Sf5oiQ5oiW5LiA6ZSu5pu05paw5pe25pu05paw5omA5pyJ5qCP55uuDQ0KaWYoJGdvdHlwZT09JycgfHwgJGdvdHlwZT09J21rYWxsY3QnKQ0NCnsNDQogICAgaWYoJHVwbmV4dD09MSB8fCAkdHlwZWlkPT0wKQ0NCiAgICB7DQ0KICAgICAgICBpZigkdHlwZWlkPjApIA0NCiAgICAgICAgew0NCiAgICAgICAgICAgICR0aWRzcyA9IEdldFNvbklkcygkdHlwZWlkLDApOw0NCiAgICAgICAgICAgICRpZEFycmF5ID0gZXhwbG9kZSgnLCcsJHRpZHNzKTsNDQogICAgICAgIH0gZWxzZSB7DQ0KICAgICAgICAgICAgZm9yZWFjaCgkY2ZnX0NzIGFzICRrPT4kdikgJGlkQXJyYXlbXSA9ICRrOw0NCiAgICAgICAgfQ0NCiAgICB9IGVsc2Ugew0NCiAgICAgICAgJGlkQXJyYXkgPSBhcnJheSgpOw0NCiAgICAgICAgJGlkQXJyYXlbXSA9ICR0eXBlaWQ7DQ0KICAgIH0NDQp9DQ0KLy/kuIDplK7mm7TmlrDluKbnvJPlrZjnmoTmg4XlhrUNDQplbHNlIGlmKCRnb3R5cGU9PSdta2FsbCcpDQ0Kew0NCiAgICAkdXBwYWdlID0gMTsNDQogICAgJG1rY2FjaGVmaWxlID0gREVERURBVEEuIi9ta2FsbF9jYWNoZV97JGFkbWluSUR9LnBocCI7DQ0KICAgICRpZEFycmF5ID0gYXJyYXkoKTsNDQogICAgaWYoZmlsZV9leGlzdHMoJG1rY2FjaGVmaWxlKSkgcmVxdWlyZV9vbmNlKCRta2NhY2hlZmlsZSk7DQ0KfQ0NCg0NCi8v5b2T5YmN5pu05paw5qCP55uu55qESUQNDQokdG90YWxwYWdlPWNvdW50KCRpZEFycmF5KTsNDQppZihpc3NldCgkaWRBcnJheVskcGFnZW5vXSkpDQ0Kew0NCiAgICAkdGlkID0gJGlkQXJyYXlbJHBhZ2Vub107DQ0KfQ0NCmVsc2UNDQp7DQ0KICAgIGlmKCRnb3R5cGU9PScnKQ0NCiAgICB7DQ0KICAgICAgICBTaG93TXNnKCLlrozmiJDmiYDmnInliJfooajmm7TmlrDvvIEiLCJqYXZhc2NyaXB0OjsiKTsNDQogICAgICAgIGV4aXQoKTsNDQogICAgfQ0NCiAgICBlbHNlIGlmKCRnb3R5cGU9PSdta2FsbCcgfHwgJGdvdHlwZT09J21rYWxsY3QnKQ0NCiAgICB7DQ0KICAgICAgICBTaG93TXNnKCLlrozmiJDmiYDmnInmoI/nm67liJfooajmm7TmlrDvvIznjrDlnKjkvZzmnIDlkI7mlbDmja7kvJjljJbvvIEiLCJtYWtlaHRtbF9hbGxfd2FwLnBocD9hY3Rpb249bWFrZSZzdGVwPTEwIik7DQ0KICAgICAgICBleGl0KCk7DQ0KICAgIH0NDQp9DQ0KDQ0KaWYoJHBhZ2Vubz09MCAmJiAkbWtwYWdlPT0xKSAvL+a4heepuue8k+WtmA0NCnsNDQogICAgJGRzcWwtPkV4ZWN1dGVOb25lUXVlcnkoIkRlbGV0ZSBGcm9tIGAjQF9fYXJjY2FjaGVgICIpOw0NCn0NDQoNDQokcmV1cmwgPSAnJzsNDQoNDQovL+abtOaWsOaVsOe7hOaJgOiusOW9leeahOagj+ebrg0NCmlmKCFlbXB0eSgkdGlkKSkNDQp7DQ0KICAgIGlmKCFpc3NldCgkY2ZnX0NzWyR0aWRdKSkNDQogICAgew0NCiAgICAgICAgc2hvd21zZygn5rKh5pyJ6K+l5qCP55uu5pWw5o2uLCDlj6/og73nvJPlrZjmlofku7YoL2RhdGEvY2FjaGUvaW5jX2NhdGFsb2dfYmFzZS5pbmMp5rKh5pyJ5pu05pawLCDor7fmo4Dmn6XmmK/lkKbmnInlhpnlhaXmnYPpmZAnKTsNDQogICAgICAgIGV4aXQoKTsNDQogICAgfQ0NCiAgICBpZigkY2ZnX0NzWyR0aWRdWzFdPjApDQ0KICAgIHsNDQogICAgICAgIHJlcXVpcmVfb25jZShERURFSU5DLiIvYXJjLmxpc3R2aWV3LmNsYXNzX3dhcC5waHAiKTsNDQogICAgICAgICRsdiA9IG5ldyBMaXN0VmlldygkdGlkKTsNDQogICAgICAgICRwb3NpdGlvbj0gTWZUeXBlZGlyKCRsdi0+RmllbGRzWyd0eXBlZGlyJ10pOw0NCiAgICB9DQ0KICAgIGVsc2UNDQogICAgew0NCiAgICAgICAgcmVxdWlyZV9vbmNlKERFREVJTkMuIi9hcmMuc2dsaXN0dmlld19tLmNsYXNzLnBocCIpOw0NCiAgICAgICAgJGx2ID0gbmV3IFNnTGlzdFZpZXcoJHRpZCk7ICAgICAgICANDQogICAgfQ0NCiAgICAkbHYtPkNvdW50UmVjb3JkKCk7DQ0KICAgIGlmKCRsdi0+VHlwZUxpbmstPlR5cGVJbmZvc1snaXNwYXJ0J109PTAgJiYgJGx2LT5UeXBlTGluay0+VHlwZUluZm9zWydpc2RlZmF1bHQnXSE9LTEpICRudG90YWxwYWdlID0gJGx2LT5Ub3RhbFBhZ2U7DQ0KICAgIGVsc2UgJG50b3RhbHBhZ2UgPSAxOw0NCiAgICBpZigkY2ZnX3JlbW90ZV9zaXRlPT0nWScgJiYgJGlzcmVtb3RlPT0iMSIpDQ0KICAgIHsNDQogICAgICAgIGlmKCRzZXJ2aXRlcm0hPSIiKQ0NCiAgICAgICAgew0NCiAgICAgICAgICAgIGxpc3QoJHNlcnZ1cmwsICRzZXJ2dXNlciwgJHNlcnZwd2QpID0gZXhwbG9kZSgnLCcsJHNlcnZpdGVybSk7DQ0KICAgICAgICAgICAgJGNvbmZpZyA9IGFycmF5KCAnaG9zdG5hbWUnID0+ICRzZXJ2dXJsLCAndXNlcm5hbWUnID0+ICRzZXJ2dXNlciwgDQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnID0+ICRzZXJ2cHdkLCdkZWJ1ZycgPT4gJ1RSVUUnKTsNDQogICAgICAgIH0gZWxzZSB7DQ0KICAgICAgICAgICAgJGNvbmZpZz1hcnJheSgpOw0NCiAgICAgICAgfQ0NCiAgICAgICAgaWYoISRmdHAtPmNvbm5lY3QoJGNvbmZpZykpIGV4aXQoJ0Vycm9yOk5vbmUgRlRQIENvbm5lY3Rpb24hJyk7DQ0KICAgIH0NDQogICAgLy/lpoLmnpzmoI/nm67nmoTmlofmoaPlpKrlpJrvvIzliIblpJrmibnmrKHmm7TmlrANDQogICAgaWYoJG50b3RhbHBhZ2UgPD0gJG1heHBhZ2VzaXplIHx8ICRsdi0+VHlwZUxpbmstPlR5cGVJbmZvc1snaXNwYXJ0J10hPTAgfHwgJGx2LT5UeXBlTGluay0+VHlwZUluZm9zWydpc2RlZmF1bHQnXT09LTEpDQ0KICAgIHsNDQogICAgICAgICRyZXVybCA9ICRsdi0+TWFrZUh0bWwoJycsICcnLCAkaXNyZW1vdGUpOw0NCiAgICAgICAgJGZpbmlzaFR5cGUgPSBUUlVFOw0NCiAgICB9DQ0KICAgIGVsc2UNDQogICAgew0NCiAgICAgICAgJHJldXJsID0gJGx2LT5NYWtlSHRtbCgkbWtwYWdlLCAkbWF4cGFnZXNpemUsICRpc3JlbW90ZSk7DQ0KICAgICAgICAkZmluaXNoVHlwZSA9IEZBTFNFOw0NCiAgICAgICAgJG1rcGFnZSA9ICRta3BhZ2UgKyAkbWF4cGFnZXNpemU7DQ0KICAgICAgICBpZiggJG1rcGFnZSA+PSAoJG50b3RhbHBhZ2UrMSkgKSAkZmluaXNoVHlwZSA9IFRSVUU7DQ0KICAgIH0NDQp9DQ0KDQ0KJG5leHRwYWdlID0gJHBhZ2VubysxOw0NCmlmKCRuZXh0cGFnZSA+PSAkdG90YWxwYWdlICYmICRmaW5pc2hUeXBlKQ0NCnsNDQogICAgaWYoJGdvdHlwZT09JycpDQ0KICAgIHsNDQogICAgICAgIGlmKGVtcHR5KCRyZXVybCkpIHsgJHJldXJsID0gJy4uL3BsdXMvbGlzdC5waHA/dGlkPScuJHRpZDsgfQ0NCiAgICAgICAgU2hvd01zZygi5a6M5oiQ5omA5pyJ5qCP55uu5YiX6KGo5pu05paw77yBIiwiamF2YXNjcmlwdDo7Iik7DQ0KICAgICAgICBleGl0KCk7DQ0KICAgIH0NDQogICAgZWxzZSBpZigkZ290eXBlPT0nbWthbGwnIHx8ICRnb3R5cGU9PSdta2FsbGN0JykNDQogICAgew0NCiAgICAgICAgU2hvd01zZygi5a6M5oiQ5omA5pyJ5qCP55uu5YiX6KGo5pu05paw77yM546w5Zyo5L2c5pyA5ZCO5pWw5o2u5LyY5YyW77yBIiwibWFrZWh0bWxfYWxsX3dhcC5waHA/YWN0aW9uPW1ha2Umc3RlcD0xMCIpOw0NCiAgICAgICAgZXhpdCgpOw0NCiAgICB9DQ0KfSBlbHNlIHsNDQogICAgaWYoJGZpbmlzaFR5cGUpDQ0KICAgIHsNDQogICAgICAgICRnb3VybCA9ICJtYWtlaHRtbF9saXN0X2FjdGlvbl93YXAucGhwP2dvdHlwZT17JGdvdHlwZX0mdXBwYWdlPSR1cHBhZ2UmbWF4cGFnZXNpemU9JG1heHBhZ2VzaXplJnR5cGVpZD0kdHlwZWlkJnBhZ2Vubz0kbmV4dHBhZ2UmaXNyZW1vdGU9eyRpc3JlbW90ZX0mc2Vydml0ZXJtPXskc2Vydml0ZXJtfSI7DQ0KICAgICAgICBTaG93TXNnKCLmiJDlip/liJvlu7rmoI/nm67vvJoiLiR0aWQuIu+8jOe7p+e7rei/m+ihjOaTjeS9nO+8gSIsJGdvdXJsLDAsMTAwKTsNDQogICAgICAgIGV4aXQoKTsNDQogICAgfSBlbHNlIHsNDQogICAgICAgICRnb3VybCA9ICJtYWtlaHRtbF9saXN0X2FjdGlvbl93YXAucGhwP2dvdHlwZT17JGdvdHlwZX0mdXBwYWdlPSR1cHBhZ2UmbWtwYWdlPSRta3BhZ2UmbWF4cGFnZXNpemU9JG1heHBhZ2VzaXplJnR5cGVpZD0kdHlwZWlkJnBhZ2Vubz0kcGFnZW5vJmlzcmVtb3RlPXskaXNyZW1vdGV9JnNlcnZpdGVybT17JHNlcnZpdGVybX0iOw0NCiAgICAgICAgU2hvd01zZygi5qCP55uu77yaIi4kdGlkLiLvvIznu6fnu63ov5vooYzmk43kvZwuLi4iLCRnb3VybCwwLDEwMCk7DQ0KICAgICAgICBleGl0KCk7DQ0KICAgIH0NDQp9
</file>
<file type='file' name='templets/makehtml_list_wap.htm'>
PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPg0NCjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4NDQo8aGVhZD4NDQo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD08P3BocCBlY2hvICRjZmdfc29mdF9sYW5nOyA/PiI+DQ0KPHRpdGxlPuabtOaWsOagj+ebrkhUTUw8L3RpdGxlPg0NCjxsaW5rIGhyZWY9ImNzcy9iYXNlLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+DQ0KPC9oZWFkPg0NCjxib2R5IGJhY2tncm91bmQ9ImltYWdlcy9hbGxiZy5naWYiIGxlZnRtYXJnaW49JzgnIHRvcG1hcmdpbj0nOCc+DQ0KPHRhYmxlIHdpZHRoPSI5OCUiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjMiIGNlbGxzcGFjaW5nPSIxIiBiZ2NvbG9yPSIjRDZENkQ2IiBhbGlnbj0iY2VudGVyIj4NDQogIDxmb3JtIG5hbWU9ImZvcm0xIiBhY3Rpb249Im1ha2VodG1sX2xpc3RfYWN0aW9uX3dhcC5waHAiIG1ldGhvZD0iZ2V0IiB0YXJnZXQ9J3N0YWZybSc+DQ0KICAgIDx0cj4gDQ0KICAgICAgPHRkIGhlaWdodD0iMjgiIGNvbHNwYW49IjIiIGJhY2tncm91bmQ9J2ltYWdlcy90YmcuZ2lmJz4NDQogICAgICAJPHRhYmxlIHdpZHRoPSI5OCUiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIj4NDQogICAgICAgICAgPHRyPiANDQogICAgICAgICAgICA8dGQgd2lkdGg9IjMwJSIgaGVpZ2h0PSIxOCIgc3R5bGU9InBhZGRpbmctbGVmdDoxMHB4OyI+PHN0cm9uZz7mm7TmlrB3YXDmoI/nm65IVE1M77yaPC9zdHJvbmc+PC90ZD4NDQogICAgICAgICAgICA8dGQgd2lkdGg9IjcwJSIgYWxpZ249InJpZ2h0Ij4NDQogICAgICAgICAgICAJPGEgaHJlZj0ibWFrZWh0bWxfYXJjaGl2ZXNfd2FwLnBocD90eXBlaWQ9PD9waHAgZWNobyAoaXNzZXQoJHR5cGVpZCkgPyAkdHlwZWlkIDogMCk7ID8+IiBjbGFzcz0ibnAgY29vbGJnIj7mm7TmlrDmlofmoaNIVE1MPC9hPg0NCiAgICAgICAgICAgIAk8YSBocmVmPSJjYXRhbG9nX21haW4ucGhwIiBjbGFzcz0ibnAgY29vbGJnIj7moI/nm67nrqHnkIY8L2E+DQ0KICAgICAgICAgICAgPC90ZD4NDQogICAgICAgICAgPC90cj4NDQogICAgICAgIDwvdGFibGU+DQ0KICAgICAgPC90ZD4NDQogICAgPC90cj4NDQogICAgPHRyPiANDQogICAgICA8dGQgd2lkdGg9IjEwOCIgdmFsaWduPSJ0b3AiIGJnY29sb3I9IiNGRkZGRkYiPumAieaLqeagj+ebru+8mjwvdGQ+DQ0KICAgICAgPHRkIHdpZHRoPSIzNzciIHZhbGlnbj0idG9wIiBiZ2NvbG9yPSIjRkZGRkZGIj4gDQ0KICAgIDw/cGhwDQ0KICAgICAgIGlmKGVtcHR5KCRjaWQpKSAkY2lkPTA7DQ0KICAgICAgICR0bCA9IG5ldyBUeXBlTGluaygkY2lkKTsNDQogICAgICAgJHR5cGVPcHRpb25zID0gJHRsLT5HZXRPcHRpb25BcnJheSgkY2lkLCRhZG1pbl9jYXRhbG9ncywwLDEpOw0NCiAgICAgICBlY2hvICI8c2VsZWN0IG5hbWU9J3R5cGVpZCcgc3R5bGU9J3dpZHRoOjMwMHB4Jz5cclxuIjsNDQogICAgICAgaWYoJGNpZD09JzAnKSBlY2hvICI8b3B0aW9uIHZhbHVlPScwJyBzZWxlY3RlZD0nMSc+5pu05paw5omA5pyJ5qCP55uuLi4uPC9vcHRpb24+XHJcbiI7DQ0KICAgICAgIGVjaG8gJHR5cGVPcHRpb25zOw0NCiAgICAgICBlY2hvICI8L3NlbGVjdD4iOw0NCgkJPz4NDQogICAgICA8L3RkPg0NCiAgICA8L3RyPg0NCiAgICA8dHI+DQ0KICAgICAgPHRkIGhlaWdodD0iMjAiIHZhbGlnbj0idG9wIiBiZ2NvbG9yPSIjRkZGRkZGIj7mr4/mrKHmnIDlpKfliJvlu7rpobXmlbDvvJo8L3RkPg0NCiAgICAgIDx0ZCBoZWlnaHQ9IjIwIiB2YWxpZ249InRvcCIgYmdjb2xvcj0iI0ZGRkZGRiI+PGlucHV0IG5hbWU9Im1heHBhZ2VzaXplIiB0eXBlPSJ0ZXh0IiBpZD0ibWF4cGFnZXNpemUiIHZhbHVlPSI1MCIgc2l6ZT0iMTAiPg0NCiAgICAgICAg5Liq5paH5Lu2IDwvdGQ+DQ0KICAgIDwvdHI+DQ0KICAgIDx0cj4gDQ0KICAgICAgPHRkIGhlaWdodD0iMjAiIHZhbGlnbj0idG9wIiBiZ2NvbG9yPSIjRkZGRkZGIj7mmK/lkKbmm7TmlrDlrZDmoI/nm67vvJo8L3RkPg0NCiAgICAgIDx0ZCBoZWlnaHQ9IjIwIiB2YWxpZ249InRvcCIgYmdjb2xvcj0iI0ZGRkZGRiI+DQ0KCSAgPGlucHV0IG5hbWU9InVwbmV4dCIgdHlwZT0icmFkaW8iIGNsYXNzPSJucCIgdmFsdWU9IjEiIGNoZWNrZWQ9JzEnIC8+DQ0KICAgICDmm7TmlrDlrZDnuqfmoI/nm64gIA0NCiAgICA8aW5wdXQgdHlwZT0icmFkaW8iIG5hbWU9InVwbmV4dCIgY2xhc3M9Im5wIiB2YWx1ZT0iMCIgLz4NDQogICAgIOS7heabtOaWsOaJgOmAieagj+ebrg0NCiAgICA8L3RkPg0NCiAgICA8L3RyPg0NCiAgICA8dHI+IA0NCiAgICAgIDx0ZCBoZWlnaHQ9IjIwIiBjb2xzcGFuPSIyIiBiZ2NvbG9yPSIjZmZmZmZmIiBhbGlnbj0iY2VudGVyIj4NDQogICAgICAJPGlucHV0IG5hbWU9ImIxMTIiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9ImNvb2xiZyBucCIgdmFsdWU9IuW8gOWni+eUn+aIkEhUTUwiIG9uQ2xpY2s9ImRvY3VtZW50LmZvcm0xLnN1Ym1pdCgpOyIgc3R5bGU9IndpZHRoOjEwMHB4Ij4NDQogICAgICAgICAgIDw/cGhwIA0NCiAgICAgIGlmKCRjZmdfcmVtb3RlX3NpdGU9PSdZJykNDQogICAgICB7DQ0KICAgID8+IOOAgA0NCiAgICAgICAgPGlucHV0IG5hbWU9ImlzcmVtb3RlIiB0eXBlPSJjaGVja2JveCIgaWQ9ImlzcmVtb3RlIiB2YWx1ZT0iMSI+5piv5ZCm5ZCM5q2l6L+c56iL5Y+R5biDDQ0KICAgICAgICAgPD9waHAgR2V0RnRwKCk7Pz4NDQogICA8P3BocA0NCiAgICAgIH0NDQogICAgPz4gICAgIA0NCiAgICAgIDwvdGQ+DQ0KICAgIDwvdHI+DQ0KICA8L2Zvcm0+DQ0KICA8dHIgYmdjb2xvcj0iI0Y5RkNFRiI+IA0NCiAgICA8dGQgaGVpZ2h0PSIyMCIgY29sc3Bhbj0iMiI+IDx0YWJsZSB3aWR0aD0iMTAwJSI+DQ0KICAgICAgICA8dHI+IA0NCiAgICAgICAgICA8dGQgd2lkdGg9Ijc0JSI+6L+b6KGM54q25oCB77yaIDwvdGQ+DQ0KICAgICAgICAgIDx0ZCB3aWR0aD0iMjYlIiBhbGlnbj0icmlnaHQiPiA8c2NyaXB0IGxhbmd1YWdlPSdqYXZhc2NyaXB0Jz4NDQogICAgICAgICAgICAJZnVuY3Rpb24gUmVzaXplRGl2KG9iaix0eSkNDQogICAgICAgICAgICAJew0NCiAgICAgICAgICAgIAkJaWYodHk9PSIrIikgZG9jdW1lbnQuYWxsW29ial0uc3R5bGUucGl4ZWxIZWlnaHQgKz0gNTA7DQ0KICAgICAgICAgICAgCQllbHNlIGlmKGRvY3VtZW50LmFsbFtvYmpdLnN0eWxlLnBpeGVsSGVpZ2h0PjgwKSBkb2N1bWVudC5hbGxbb2JqXS5zdHlsZS5waXhlbEhlaWdodCA9IGRvY3VtZW50LmFsbFtvYmpdLnN0eWxlLnBpeGVsSGVpZ2h0IC0gNTA7DQ0KICAgICAgICAgICAgCX0NDQogICAgICAgICAgICAJPC9zY3JpcHQ+DQ0KICAgICAgICAgICAgWzxhIGhyZWY9JyMnIG9uQ2xpY2s9IlJlc2l6ZURpdignbWR2JywnKycpOyI+5aKe5aSnPC9hPl0gWzxhIGhyZWY9JyMnIG9uQ2xpY2s9IlJlc2l6ZURpdignbWR2JywnLScpOyI+57yp5bCPPC9hPl0gDQ0KICAgICAgICAgIDwvdGQ+DQ0KICAgICAgICA8L3RyPg0NCiAgICAgIDwvdGFibGU+PC90ZD4NDQogIDwvdHI+DQ0KICA8dHIgYmdjb2xvcj0iI0ZGRkZGRiI+IA0NCiAgICA8dGQgY29sc3Bhbj0iMiIgaWQ9Im10ZCI+DQ0KICAgIAk8ZGl2IGlkPSdtZHYnIHN0eWxlPSd3aWR0aDoxMDAlO2hlaWdodDozNTBweDsnPiANDQogICAgICAgIDxpZnJhbWUgbmFtZT0ic3RhZnJtIiBmcmFtZWJvcmRlcj0iMCIgaWQ9InN0YWZybSIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSI+PC9pZnJhbWU+DQ0KICAgICAgPC9kaXY+DQ0KCSAgPC90ZD4NDQogIDwvdHI+DQ0KPC90YWJsZT4NDQo8L2JvZHk+DQ0KPC9odG1sPg0NCg==
</file>
<file type='file' name='templets/makehtml_homepage_wap.htm'>
PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPg0NCjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4NDQo8aGVhZD4NDQo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD08P3BocCBlY2hvICRjZmdfc29mdF9sYW5nOyA/PiI+DQ0KPHRpdGxlPuS4u+mhteabtOaWsOWQkeWvvDwvdGl0bGU+DQ0KPGxpbmsgaHJlZj0iY3NzL2Jhc2UuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIj4NDQo8bGluayByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiBtZWRpYT0iYWxsIiBocmVmPSIuLi9pbmNsdWRlL2NhbGVuZGFyL2NhbGVuZGFyLXdpbjJrLTEuY3NzIiB0aXRsZT0id2luMmstMSIgLz4NDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIuLi9pbmNsdWRlL2NhbGVuZGFyL2NhbGVuZGFyLmpzIj48L3NjcmlwdD4NDQo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIuLi9pbmNsdWRlL2NhbGVuZGFyL2NhbGVuZGFyLWNuLmpzIj48L3NjcmlwdD4NDQo8c2NyaXB0IGxhbmd1YWdlPSJqYXZhc2NyaXB0Ij4NDQpmdW5jdGlvbiBTZWxlY3RUZW1wbGV0cyhmbmFtZSkNDQp7DQ0KICAgdmFyIHBvc0xlZnQgPSAyMDA7DQ0KICAgdmFyIHBvc1RvcCA9IDMwMDsNDQogICB3aW5kb3cub3BlbigiLi4vaW5jbHVkZS9kaWFsb2cvc2VsZWN0X3RlbXBsZXRzLnBocD9mPSIrZm5hbWUsICJwb3B0ZW1wV2luIiwgInNjcm9sbGJhcnM9eWVzLHJlc2l6YWJsZT15ZXMsc3RhdGViYXI9bm8sd2lkdGg9NjAwLGhlaWdodD00MDAsbGVmdD0iK3Bvc0xlZnQrIiwgdG9wPSIrcG9zVG9wKTsNDQp9DQ0KPC9zY3JpcHQ+DQ0KPC9oZWFkPg0NCjxib2R5IGJhY2tncm91bmQ9ImltYWdlcy9hbGxiZy5naWYiIGxlZnRtYXJnaW49IjgiIHRvcG1hcmdpbj0iOCI+DQ0KPHRhYmxlIHdpZHRoPSI5OCUiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjMiIGNlbGxzcGFjaW5nPSIxIiBiZ2NvbG9yPSIjRDZENkQ2IiBhbGlnbj0iY2VudGVyIj4NDQogIDxmb3JtIG5hbWU9ImZvcm0xIiBhY3Rpb249Im1ha2VodG1sX2hvbWVwYWdlX3dhcC5waHAiIHRhcmdldD0ic3RhZnJtIiBtZXRob2Q9InBvc3QiPg0NCiAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iZG9wb3N0IiB2YWx1ZT0ibWFrZSI+DQ0KICAgIDx0cj4gDQ0KICAgICAgPHRkIGhlaWdodD0iMjgiIGNvbHNwYW49IjIiIGJhY2tncm91bmQ9J2ltYWdlcy90YmcuZ2lmJz4NDQoJICA8dGFibGUgd2lkdGg9Ijk4JSIgYm9yZGVyPSIwIiBjZWxscGFkZGluZz0iMCIgY2VsbHNwYWNpbmc9IjAiPg0NCiAgICAgICAgICA8dHI+IA0NCiAgICAgICAgICAgIDx0ZCB3aWR0aD0iMzAlIiBoZWlnaHQ9IjE4IiBzdHlsZT0icGFkZGluZy1sZWZ0OjEwcHg7Ij48c3Ryb25nPndhcOS4u+mhteabtOaWsOWQkeWvvO+8mjwvc3Ryb25nPjwvdGQ+DQ0KICAgICAgICAgICAgPHRkIHdpZHRoPSI3MCUiIGFsaWduPSJyaWdodCI+Jm5ic3A7PC90ZD4NDQogICAgICAgICAgPC90cj4NDQogICAgICAgIDwvdGFibGU+DQ0KCQk8L3RkPg0NCiAgICA8L3RyPg0NCiAgIA0NCiANDQoNDQogICAgPHRyPiANDQogICAgICA8dGQgaGVpZ2h0PSIzMSIgY29sc3Bhbj0iMiIgYmdjb2xvcj0iI2ZmZmZmZiIgYWxpZ249ImNlbnRlciI+Jm5ic3A7Jm5ic3A7DQ0KDQ0KDQ0KICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgY2xhc3M9J2Nvb2xiZyBucCcgbmFtZT0iU3VibWl0IiB2YWx1ZT0i5pu05paw5Li76aG1SFRNTCIgLz4NDQogICAgICAmbmJzcDsNDQogICAgICAgICAgIDw/cGhwIA0NCiAgICAgIGlmKCRjZmdfcmVtb3RlX3NpdGU9PSdZJykNDQogICAgICB7DQ0KICAgID8+IOOAgCANDQogICAgICA8aW5wdXQgbmFtZT0iaXNyZW1vdGUiIHR5cGU9ImNoZWNrYm94IiBpZD0iaXNyZW1vdGUiIHZhbHVlPSIxIj4NDQrmmK/lkKblkIzmraXov5znqIvlj5HluIMgIDw/cGhwIEdldEZ0cCgpOz8+ICAgICA8P3BocA0NCiAgICAgIH0NDQogICAgPz4gICAgIA0NCjwvdGQ+DQ0KICAgIDwvdHI+DQ0KDQ0KICA8L2Zvcm0+DQ0KICA8dHIgYmdjb2xvcj0iI0Y5RkNFRiI+IA0NCiAgICA8dGQgaGVpZ2h0PSIyMCIgY29sc3Bhbj0iMiI+PHRhYmxlIHdpZHRoPSIxMDAlIj4NDQogICAgICAgIDx0cj4gDQ0KICAgICAgICAgIDx0ZCB3aWR0aD0iNzQlIj7ov5vooYznirbmgIHvvJogPC90ZD4NDQogICAgICAgICAgPHRkIHdpZHRoPSIyNiUiIGFsaWduPSJyaWdodCI+DQ0KCQkgICAgPHNjcmlwdCBsYW5ndWFnZT0namF2YXNjcmlwdCc+DQ0KICAgICAgICAgICAgCWZ1bmN0aW9uIFJlc2l6ZURpdihvYmosdHkpDQ0KICAgICAgICAgICAgCXsNDQogICAgICAgICAgICAJCWlmKHR5PT0iKyIpIGRvY3VtZW50LmFsbFtvYmpdLnN0eWxlLnBpeGVsSGVpZ2h0ICs9IDUwOw0NCiAgICAgICAgICAgIAkJZWxzZSBpZihkb2N1bWVudC5hbGxbb2JqXS5zdHlsZS5waXhlbEhlaWdodD44MCkgZG9jdW1lbnQuYWxsW29ial0uc3R5bGUucGl4ZWxIZWlnaHQgPSBkb2N1bWVudC5hbGxbb2JqXS5zdHlsZS5waXhlbEhlaWdodCAtIDUwOw0NCiAgICAgICAgICAgIAl9DQ0KICAgICAgICAgICAgCTwvc2NyaXB0Pg0NCiAgICAgICAgICAgIFs8YSBocmVmPScjJyBvbkNsaWNrPSJSZXNpemVEaXYoJ21kdicsJysnKTsiPuWinuWkpzwvYT5dIFs8YSBocmVmPScjJyBvbkNsaWNrPSJSZXNpemVEaXYoJ21kdicsJy0nKTsiPue8qeWwjzwvYT5dIA0NCiAgICAgICAgICA8L3RkPg0NCiAgICAgICAgPC90cj4NDQogICAgICA8L3RhYmxlPiA8L3RkPg0NCiAgPC90cj4NDQogIDx0ciBiZ2NvbG9yPSIjRkZGRkZGIj4gDQ0KICAgIDx0ZCBjb2xzcGFuPSIyIiBpZD0ibXRkIj4NDQoJCQk8ZGl2IGlkPSdtZHYnIHN0eWxlPSd3aWR0aDoxMDAlO2hlaWdodDozNTBweDsnPiANDQogICAgICAgIDxpZnJhbWUgbmFtZT0ic3RhZnJtIiBmcmFtZWJvcmRlcj0iMCIgaWQ9InN0YWZybSIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSI+PC9pZnJhbWU+DQ0KICAgICAgPC9kaXY+DQ0KCSAgPC90ZD4NDQogIDwvdHI+DQ0KPC90YWJsZT4NDQo8L2JvZHk+DQ0KPC9odG1sPg==
</file>
<file type='file' name='templets/makehtml_archives_wap.htm'>
PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPg0NCjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4NDQo8aGVhZD4NDQo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD08P3BocCBlY2hvICRjZmdfc29mdF9sYW5nOyA/PiI+DQ0KPHRpdGxlPueUn+aIkEhUTUw8L3RpdGxlPg0NCjxsaW5rIGhyZWY9ImNzcy9iYXNlLmNzcyIgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyI+DQ0KPC9oZWFkPg0NCjxib2R5IGJhY2tncm91bmQ9J2ltYWdlcy9hbGxiZy5naWYnIGxlZnRtYXJnaW49JzgnIHRvcG1hcmdpbj0nOCc+DQ0KPHRhYmxlIHdpZHRoPSI5OCUiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjMiIGNlbGxzcGFjaW5nPSIxIiBiZ2NvbG9yPSIjRDZENkQ2IiBhbGlnbj0iY2VudGVyIj4NDQogIDxmb3JtIG5hbWU9J2Zvcm0yJyBhY3Rpb249J2NvbnRlbnRfbGlzdC5waHAnIG1ldGhvZD0iZ2V0IiB0YXJnZXQ9J3N0YWZybSc+DQ0KICAgPGlucHV0IHR5cGU9J2hpZGRlbicgbmFtZT0nbnVsbGZpZWxkJyB2YWx1ZT0nb2snPg0NCiAgPC9mb3JtPg0NCiAgPGZvcm0gbmFtZT0iZm9ybTEiIGFjdGlvbj0ibWFrZWh0bWxfYXJjaGl2ZXNfYWN0aW9uX3dhcC5waHAiIG1ldGhvZD0iZ2V0IiB0YXJnZXQ9J3N0YWZybSc+DQ0KICA8dHI+IA0NCiAgICA8dGQgaGVpZ2h0PSIyOCIgY29sc3Bhbj0iMiIgYmFja2dyb3VuZD0naW1hZ2VzL3RiZy5naWYnPg0NCiAgICAJPHRhYmxlIHdpZHRoPSI5OCUiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIj4NDQogICAgICAgIDx0cj4gDQ0KICAgICAgICAgIDx0ZCB3aWR0aD0iMzAlIiBoZWlnaHQ9IjE4IiBzdHlsZT0icGFkZGluZy1sZWZ0OjEwcHg7Ij48c3Ryb25nPuabtOaWsHdhcOaWh+aho0hUTUzvvJo8L3N0cm9uZz48L3RkPg0NCiAgICAgICAgICA8dGQgd2lkdGg9IjcwJSIgYWxpZ249InJpZ2h0Ij4NDQogICAgICAgICAgCTxhIGhyZWY9Im1ha2VodG1sX2xpc3Rfd2FwLnBocD90eXBlaWQ9PD9waHAgZWNobyAoaXNzZXQoJHR5cGVpZCkgPyAkdHlwZWlkIDogMCk7ID8+IiBjbGFzcz0ibnAgY29vbGJnIj7mm7TmlrB3YXDmoI/nm65IVE1MPC9hPg0NCiAgICAgICAgICA8L3RkPg0NCiAgICAgICAgPC90cj4NDQogICAgICA8L3RhYmxlPjwvdGQ+DQ0KICA8L3RyPg0NCiAgPHRyPiANDQogICAgPHRkIHdpZHRoPSIxMDgiIHZhbGlnbj0idG9wIiBiZ2NvbG9yPSIjRkZGRkZGIj7pgInmi6nmoI/nm67vvJo8L3RkPg0NCiAgICA8dGQgd2lkdGg9IjM3NyIgdmFsaWduPSJ0b3AiIGJnY29sb3I9IiNGRkZGRkYiPg0NCiAgICA8P3BocA0NCiAgICAgICBpZihlbXB0eSgkY2lkKSkgJGNpZD0iMCI7DQ0KICAgICAgICR0bCA9IG5ldyBUeXBlTGluaygkY2lkKTsNDQogICAgICAgJHR5cGVPcHRpb25zID0gJHRsLT5HZXRPcHRpb25BcnJheSgkY2lkLCRhZG1pbl9jYXRhbG9ncywwKTsNDQogICAgICAgZWNobyAiPHNlbGVjdCBuYW1lPSd0eXBlaWQnIHN0eWxlPSd3aWR0aDozMDAnPlxyXG4iOw0NCiAgICAgICBpZigkY2lkPT0iMCIpIGVjaG8gIjxvcHRpb24gdmFsdWU9JzAnIHNlbGVjdGVkPuabtOaWsOaJgOacieaWh+ahoy4uLjwvb3B0aW9uPlxyXG4iOw0NCiAgICAgICBlY2hvICR0eXBlT3B0aW9uczsNDQogICAgICAgZWNobyAiPC9zZWxlY3Q+IjsNDQoJCT8+DQ0KICAgPC90ZD4NDQogIDwvdHI+DQ0KICA8dHI+DQ0KICAgIDx0ZCBoZWlnaHQ9IjIwIiB2YWxpZ249InRvcCIgYmdjb2xvcj0iI0ZGRkZGRiI+6LW35aeLSUTvvJo8L3RkPg0NCiAgICA8dGQgaGVpZ2h0PSIyMCIgdmFsaWduPSJ0b3AiIGJnY29sb3I9IiNGRkZGRkYiPjxpbnB1dCBuYW1lPSJzdGFydGlkIiB0eXBlPSJ0ZXh0IiBpZD0ic3RhcnRpZCIgc2l6ZT0iMTAiPg0NCiAgICAgIO+8iOepuuaIljDooajnpLrku47lpLTlvIDlp4vvvIk8L3RkPg0NCiAgPC90cj4NDQogIDx0cj4gDQ0KICAgIDx0ZCBoZWlnaHQ9IjIwIiB2YWxpZ249InRvcCIgYmdjb2xvcj0iI0ZGRkZGRiI+57uT5p2fSUTvvJo8L3RkPg0NCiAgICA8dGQgaGVpZ2h0PSIyMCIgdmFsaWduPSJ0b3AiIGJnY29sb3I9IiNGRkZGRkYiPjxpbnB1dCBuYW1lPSJlbmRpZCIgdHlwZT0idGV4dCIgaWQ9ImVuZGlkIiBzaXplPSIxMCI+DQ0KICAgICAg77yI56m65oiWMOihqOekuuebtOWIsOe7k+adn0lE77yJIDwvdGQ+DQ0KICA8L3RyPg0NCiAgICA8dHI+IA0NCiAgICAgIDx0ZCBoZWlnaHQ9IjIwIiBiZ2NvbG9yPSIjRkZGRkZGIj7mr4/pobXnlJ/miJDvvJo8L3RkPg0NCiAgICAgIDx0ZCBoZWlnaHQ9IjIwIiBiZ2NvbG9yPSIjRkZGRkZGIj4gPGlucHV0IG5hbWU9InBhZ2VzaXplIiB0eXBlPSJ0ZXh0IiBpZD0icGFnZXNpemUiIHZhbHVlPSIyMCIgc2l6ZT0iOCI+DQ0KICAgICAgICDkuKrmlofku7Y8L3RkPg0NCiAgICA8L3RyPg0NCiAgICA8dHI+IA0NCiAgICAgIDx0ZCBoZWlnaHQ9IjIwIiBjb2xzcGFuPSIyIiBiZ2NvbG9yPSIjZmZmZmZmIiBhbGlnbj0iY2VudGVyIj4NDQogICAgICAJPGlucHV0IG5hbWU9ImIxMTIiIHR5cGU9ImJ1dHRvbiIgY2xhc3M9J2Nvb2xiZyBucCcgdmFsdWU9IuW8gOWni+eUn+aIkEhUTUwiIG9uQ2xpY2s9ImRvY3VtZW50LmZvcm0xLnN1Ym1pdCgpOyIgc3R5bGU9IndpZHRoOjEwMCI+ICA8P3BocCANDQogICAgICBpZigkY2ZnX3JlbW90ZV9zaXRlPT0nWScpDQ0KICAgICAgew0NCiAgICA/PiAgICANDQogICAgIDxpbnB1dCBuYW1lPSJpc3JlbW90ZSIgdHlwZT0iY2hlY2tib3giIGlkPSJpc3JlbW90ZSIgdmFsdWU9IjEiPg0NCuaYr+WQpuWQjOatpei/nOeoi+WPkeW4g+WIsCAgICAgDQ0KICAgICAgPD9waHAgR2V0RnRwKCk7Pz4NDQogICAgICA8P3BocA0NCiAgICAgIH0NDQogICAgPz4gIA0NCiAgICAgICAgJm5ic3A7DQ0KICAgICAgPGlucHV0IHR5cGU9ImJ1dHRvbiIgbmFtZT0iYjExMyIgdmFsdWU9Iuafpeeci+aJgOacieaWh+ahoyIgIGNsYXNzPSdjb29sYmcgbnAnIG9uQ2xpY2s9ImRvY3VtZW50LmZvcm0yLnN1Ym1pdCgpOyIgc3R5bGU9IndpZHRoOjEwMCI+PC90ZD4NDQogICAgPC90cj4NDQogIDwvZm9ybT4NDQogIDx0ciBiZ2NvbG9yPSIjRjlGQ0VGIj4gDQ0KICAgIDx0ZCBoZWlnaHQ9IjIwIiBjb2xzcGFuPSIyIj4gPHRhYmxlIHdpZHRoPSIxMDAlIj4NDQogICAgICAgIDx0cj4gDQ0KICAgICAgICAgIDx0ZCB3aWR0aD0iNzQlIj7ov5vooYznirbmgIHvvJogPC90ZD4NDQogICAgICAgICAgPHRkIHdpZHRoPSIyNiUiIGFsaWduPSJyaWdodCI+DQ0KICAgICAgICAgIAk8c2NyaXB0IGxhbmd1YWdlPSdqYXZhc2NyaXB0Jz4NDQogICAgICAgICAgICAJZnVuY3Rpb24gUmVzaXplRGl2KG9iaix0eSkNDQogICAgICAgICAgICAJew0NCiAgICAgICAgICAgIAkJaWYodHk9PSIrIikgZG9jdW1lbnQuYWxsW29ial0uc3R5bGUucGl4ZWxIZWlnaHQgKz0gNTA7DQ0KICAgICAgICAgICAgCQllbHNlIGlmKGRvY3VtZW50LmFsbFtvYmpdLnN0eWxlLnBpeGVsSGVpZ2h0PjgwKSBkb2N1bWVudC5hbGxbb2JqXS5zdHlsZS5waXhlbEhlaWdodCA9IGRvY3VtZW50LmFsbFtvYmpdLnN0eWxlLnBpeGVsSGVpZ2h0IC0gNTA7DQ0KICAgICAgICAgICAgCX0NDQogICAgICAgICAgICAJPC9zY3JpcHQ+DQ0KICAgICAgICAgICAgWzxhIGhyZWY9JyMnIG9uQ2xpY2s9IlJlc2l6ZURpdignbWR2JywnKycpOyI+5aKe5aSnPC9hPl0gWzxhIGhyZWY9JyMnIG9uQ2xpY2s9IlJlc2l6ZURpdignbWR2JywnLScpOyI+57yp5bCPPC9hPl0gDQ0KICAgICAgICAgIDwvdGQ+DQ0KICAgICAgICA8L3RyPg0NCiAgICAgIDwvdGFibGU+PC90ZD4NDQogIDwvdHI+DQ0KICA8dHIgYmdjb2xvcj0iI0ZGRkZGRiI+IA0NCiAgICA8dGQgY29sc3Bhbj0iMiIgaWQ9Im10ZCI+DQ0KICAgIAk8ZGl2IGlkPSdtZHYnIHN0eWxlPSd3aWR0aDoxMDAlO2hlaWdodDozNTBweDsnPiANDQogICAgICAgIDxpZnJhbWUgbmFtZT0ic3RhZnJtIiBmcmFtZWJvcmRlcj0iMCIgaWQ9InN0YWZybSIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSI+PC9pZnJhbWU+DQ0KICAgICAgPC9kaXY+DQ0KICAgIDwvdGQ+DQ0KICA8L3RyPg0NCjwvdGFibGU+DQ0KPC9ib2R5Pg0NCjwvaHRtbD4=
</file>
<file type='file' name='templets/makehtml_all_wap.htm'>
PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIgImh0dHA6Ly93d3cudzMub3JnL1RSL3hodG1sMS9EVEQveGh0bWwxLXRyYW5zaXRpb25hbC5kdGQiPg0NCjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4NDQo8aGVhZD4NDQo8bWV0YSBodHRwLWVxdWl2PSJDb250ZW50LVR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD08P3BocCBlY2hvICRjZmdfc29mdF9sYW5nOyA/PiI+DQ0KPHRpdGxlPuS4gOmUruabtOaWsDwvdGl0bGU+DQ0KPGxpbmsgaHJlZj0iY3NzL2Jhc2UuY3NzIiByZWw9InN0eWxlc2hlZXQiIHR5cGU9InRleHQvY3NzIiAvPg0NCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImpzL2NhbGVuZGFyL2NhbGVuZGFyLmpzIj48L3NjcmlwdD4NDQo8c2NyaXB0IGxhbmd1YWdlPSdqYXZhc2NyaXB0Jz4NDQpmdW5jdGlvbiBTZWxVcCgpew0NCiAgIHZhciBvYjEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXB0eXBlMSIpOw0NCiAgIHZhciBvYjIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXB0eXBlMiIpOw0NCiAgIHZhciBvYjMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXB0eXBlMyIpOw0NCiAgIGlmKG9iMS5jaGVja2VkKXsNDQogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2VsdGltZSIpLnN0eWxlLmRpc3BsYXkgPSAiIjsNDQoJICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2VsaWQiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOw0NCiAgIH1lbHNlIGlmKG9iMi5jaGVja2VkKXsNDQogICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2VsdGltZSIpLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7DQ0KCSAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInNlbGlkIikuc3R5bGUuZGlzcGxheSA9ICIiOw0NCiAgIH1lbHNlew0NCiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZWx0aW1lIikuc3R5bGUuZGlzcGxheSA9ICJub25lIjsNDQoJICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2VsaWQiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOw0NCiAgIH0NDQp9DQ0KPC9zY3JpcHQ+DQ0KPC9oZWFkPg0NCjxib2R5IGJhY2tncm91bmQ9J2ltYWdlcy9hbGxiZy5naWYnIGxlZnRtYXJnaW49JzgnIHRvcG1hcmdpbj0nOCc+DQ0KPHRhYmxlIHdpZHRoPSI5OCUiIGJvcmRlcj0iMCIgY2VsbHBhZGRpbmc9IjMiIGNlbGxzcGFjaW5nPSIxIiBiZ2NvbG9yPSIjRDZENkQ2IiBhbGlnbj0iY2VudGVyIj4NDQogIDxmb3JtIG5hbWU9ImZvcm0xIiBhY3Rpb249Im1ha2VodG1sX2FsbF93YXAucGhwIiB0YXJnZXQ9InN0YWZybSIgbWV0aG9kPSJwb3N0Ij4NDQogIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImFjdGlvbiIgdmFsdWU9Im1ha2UiIC8+DQ0KICAgPHRyPg0NCiAgICA8dGQgaGVpZ2h0PSIyOCIgY29sc3Bhbj0iMiIgYmdjb2xvcj0iI0VERjlENSIgYmFja2dyb3VuZD0naW1hZ2VzL3RiZy5naWYnIHN0eWxlPSJwYWRkaW5nLWxlZnQ6MTBweDsiPg0NCgkgICAgPHN0cm9uZz7kuIDplK7mm7TmlrB3YXDnvZHnq5nvvJo8L3N0cm9uZz48L3RkPg0NCiAgICA8L3RkPg0NCiAgICA8L3RyPg0NCiAgICA8dHI+DQ0KICAgICAgPHRkIHdpZHRoPSIzMCUiIGhlaWdodD0iMzAiICBiZ2NvbG9yPSIjRkZGRkZGIj4mbmJzcDsmbmJzcDvmm7TmlrDpgInpobnvvJo8L3RkPg0NCiAgICAgIDx0ZCB2YWxpZ249InRvcCIgYmdjb2xvcj0iI0ZGRkZGRiI+DQ0KCSAgIDxpbnB1dCBuYW1lPSJ1cHR5cGUiIGlkPSJ1cHR5cGUxIiB0eXBlPSJyYWRpbyIgY2xhc3M9Im5wIiB2YWx1ZT0idGltZSIgb25DbGljaz0iU2VsVXAoKSIgY2hlY2tlZD0iY2hlY2tlZCIgLz4NDQoJICAg5oyH5a6a5pe26Ze055qE5omA5pyJ5pu05pawDQ0KCSAgIDxpbnB1dCBuYW1lPSJ1cHR5cGUiIGlkPSJ1cHR5cGUyIiB0eXBlPSJyYWRpbyIgY2xhc3M9Im5wIiBvbkNsaWNrPSJTZWxVcCgpIiB2YWx1ZT0iaWQiIC8+DQ0KCSAgIOaMh+WumklE5paH5qGj55qE5omA5pyJ5pu05pawDQ0KCSAgIDxpbnB1dCBuYW1lPSJ1cHR5cGUiIGlkPSJ1cHR5cGUzIiB0eXBlPSJyYWRpbyIgY2xhc3M9Im5wIiBvbkNsaWNrPSJTZWxVcCgpIiB2YWx1ZT0ibWthbGwiIC8+DQ0KCSAgIOabtOaWsOaJgOaciQ0NCgkgICA8L3RkPg0NCiAgICA8L3RyPg0NCiAgICA8dHIgaWQ9J3NlbHRpbWUnPg0NCiAgICAgIDx0ZCBoZWlnaHQ9IjIwIiAgYmdjb2xvcj0iI0ZGRkZGRiI+Jm5ic3A7Jm5ic3A76LW35aeL5pe26Ze077yaPC90ZD4NDQogICAgICA8dGQgaGVpZ2h0PSIyMCIgIGJnY29sb3I9IiNGRkZGRkYiPg0NCiAgICAgIAk8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ic3RhcnR0aW1lIiBpZD0ic3RhcnR0aW1lIiB2YWx1ZT0iPD9waHAgZWNobyBHZXREYXRlTWsodGltZSgpKTsgPz4iIHN0eWxlPSJ3aWR0aDoyMDBweCIgLz4NDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNjcmlwdCBsYW5ndWFnZT0iamF2YXNjcmlwdCIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4NDQoJCQkJCUNhbGVuZGFyLnNldHVwKHsNDQoJCQkJCQlpbnB1dEZpZWxkICAgICA6ICAgICJzdGFydHRpbWUiLA0NCgkJCQkJCWlmRm9ybWF0ICAgICAgIDogICAgIiVZLSVtLSVkIiwNDQoJCQkJCQlzaG93c1RpbWUgICAgICA6ICAgIGZhbHNlLA0NCgkJCQkJCXRpbWVGb3JtYXQgICAgIDogICAgIjI0Ig0NCgkJCQkJfSk7DQ0KCQkJCSA8L3NjcmlwdD4NDQogICAgICA8L3RkPg0NCiAgICA8L3RyPg0NCiAgICA8dHIgYmdjb2xvcj0iI0ZGRkZGRiIgaWQ9InNlbGlkIiBzdHlsZT0iZGlzcGxheTpub25lOyI+DQ0KICAgICAgPHRkIGhlaWdodD0iMjAiPiZuYnNwOyZuYnNwO+i1t+Wni0lE77yaPC90ZD4NDQogICAgICA8dGQgaGVpZ2h0PSIyMCI+DQ0KICAgICAgCTxpbnB1dCBuYW1lPSJzdGFydGlkIiB0eXBlPSJ0ZXh0IiBpZD0ic3RhcnRpZCIgdmFsdWU9IjAiIHNpemU9IjQiIC8+DQ0KICAgICAgPC90ZD4NDQogICAgPC90cj4NDQoJPHRyPg0NCiAgICAgIDx0ZCBoZWlnaHQ9IjMxIiBjb2xzcGFuPSIyIiBiZ2NvbG9yPSIjZmZmZmZmIiBhbGlnbj0iY2VudGVyIiBzdHlsZT0icGFkZGluZy10b3A6NnB4Ij4NDQogICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0iU3VibWl0IiB2YWx1ZT0i5byA5aeL5pu05pawIiBjbGFzcz0iY29vbGJnIiAvPg0NCiAgICAgIDwvdGQ+DQ0KICAgIDwvdHI+DQ0KICA8L2Zvcm0+DQ0KICA8dHIgYmdjb2xvcj0iI0Y5RkNFRiI+DQ0KICAgIDx0ZCBoZWlnaHQ9IjIwIiBjb2xzcGFuPSIyIj4NDQogICAgPHRhYmxlIHdpZHRoPSIxMDAlIj4NDQogICAgIDx0cj4NDQogICAgICA8dGQgd2lkdGg9Ijc0JSI+6L+b6KGM54q25oCB77yaIDwvdGQ+DQ0KICAgICAgIDx0ZCB3aWR0aD0iMjYlIiBhbGlnbj0icmlnaHQiPg0NCgkJICAgIDxzY3JpcHQgbGFuZ3VhZ2U9J2phdmFzY3JpcHQnPg0NCiAgICAgICAgICAgIAlmdW5jdGlvbiBSZXNpemVEaXYob2JqLHR5KQ0NCiAgICAgICAgICAgIAl7DQ0KICAgICAgICAgICAgCQlpZih0eT09IisiKSBkb2N1bWVudC5hbGxbb2JqXS5zdHlsZS5waXhlbEhlaWdodCArPSA1MDsNDQogICAgICAgICAgICAJCWVsc2UgaWYoZG9jdW1lbnQuYWxsW29ial0uc3R5bGUucGl4ZWxIZWlnaHQ+ODApIGRvY3VtZW50LmFsbFtvYmpdLnN0eWxlLnBpeGVsSGVpZ2h0ID0gZG9jdW1lbnQuYWxsW29ial0uc3R5bGUucGl4ZWxIZWlnaHQgLSA1MDsNDQogICAgICAgICAgICAJfQ0NCiAgICAgICAgICAgIAk8L3NjcmlwdD4NDQogICAgICAgICAgICBbPGEgaHJlZj0nIycgb25DbGljaz0iUmVzaXplRGl2KCdtZHYnLCcrJyk7Ij7lop7lpKc8L2E+XSBbPGEgaHJlZj0nIycgb25DbGljaz0iUmVzaXplRGl2KCdtZHYnLCctJyk7Ij7nvKnlsI88L2E+XSAgICAgICAgICA8L3RkPg0NCiAgICAgICAgPC90cj4NDQogICAgICA8L3RhYmxlPg0NCiAgICAgPC90ZD4NDQogICA8L3RyPg0NCiAgIDx0ciBiZ2NvbG9yPSIjRkZGRkZGIj4NDQogICAgPHRkIGNvbHNwYW49IjIiIGlkPSJtdGQiPg0NCgkgIDxkaXYgaWQ9J21kdicgc3R5bGU9J3dpZHRoOjEwMCU7aGVpZ2h0OjM1MHB4Oyc+DQ0KICAgICAgPGlmcmFtZSBuYW1lPSJzdGFmcm0iIGZyYW1lYm9yZGVyPSIwIiBpZD0ic3RhZnJtIiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIzNTBweCI+PC9pZnJhbWU+DQ0KICAgPC9kaXY+DQ0KICAgPHNjcmlwdCBsYW5ndWFnZT0iSmF2YVNjcmlwdCI+DQ0KCSAgZG9jdW1lbnQuYWxsLm1kdi5zdHlsZS5waXhlbEhlaWdodCA9IHNjcmVlbi5oZWlnaHQgLSAzNjA7DQ0KCSAgPC9zY3JpcHQ+DQ0KICAgPC90ZD4NDQogIDwvdHI+DQ0KPC90YWJsZT4NDQo8L2JvZHk+DQ0KPC9odG1sPg==
</file>
<file type='file' name='inc/inc_menu.php'>

</file>
</modulefiles>
</module>
